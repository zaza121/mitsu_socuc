
/* /web/static/src/views/graph/graph_arch_parser.js */
odoo.define('@web/views/graph/graph_arch_parser',['@web/core/utils/strings','@web/core/utils/xml','@web/search/utils/misc'],function(require){'use strict';let __exports={};const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const{GROUPABLE_TYPES}=require("@web/search/utils/misc");const MODES=["bar","line","pie"];const ORDERS=["ASC","DESC","asc","desc",null];const GraphArchParser=__exports.GraphArchParser=class GraphArchParser{parse(arch,fields={}){const archInfo={fields,fieldAttrs:{},groupBy:[],measures:[]};visitXML(arch,(node)=>{switch(node.tagName){case"graph":{if(node.hasAttribute("disable_linking")){archInfo.disableLinking=exprToBoolean(node.getAttribute("disable_linking"));}
if(node.hasAttribute("stacked")){archInfo.stacked=exprToBoolean(node.getAttribute("stacked"));}
if(node.hasAttribute("cumulated")){archInfo.cumulated=exprToBoolean(node.getAttribute("cumulated"));}
if(node.hasAttribute("cumulated_start")){archInfo.cumulatedStart=exprToBoolean(node.getAttribute("cumulated_start"));}
const mode=node.getAttribute("type");if(mode&&MODES.includes(mode)){archInfo.mode=mode;}
const order=node.getAttribute("order");if(order&&ORDERS.includes(order)){archInfo.order=order.toUpperCase();}
const title=node.getAttribute("string");if(title){archInfo.title=title;}
break;}
case"field":{const fieldName=node.getAttribute("name");if(fieldName==="id"){break;}
const string=node.getAttribute("string");if(string){if(!archInfo.fieldAttrs[fieldName]){archInfo.fieldAttrs[fieldName]={};}
archInfo.fieldAttrs[fieldName].string=string;}
const widget=node.getAttribute("widget");if(widget){if(!archInfo.fieldAttrs[fieldName]){archInfo.fieldAttrs[fieldName]={};}
archInfo.fieldAttrs[fieldName].widget=widget;}
if(node.getAttribute("invisible")==="True"||node.getAttribute("invisible")==="1"){if(!archInfo.fieldAttrs[fieldName]){archInfo.fieldAttrs[fieldName]={};}
archInfo.fieldAttrs[fieldName].isInvisible=true;break;}
const isMeasure=node.getAttribute("type")==="measure";if(isMeasure){archInfo.measures.push(fieldName);archInfo.measure=fieldName;}else{const{type}=archInfo.fields[fieldName];if(GROUPABLE_TYPES.includes(type)){let groupBy=fieldName;const interval=node.getAttribute("interval");if(interval){groupBy+=`:${interval}`;}
archInfo.groupBy.push(groupBy);}}
break;}}});return archInfo;}}
return __exports;});;

/* /web/static/src/views/graph/graph_controller.js */
odoo.define('@web/views/graph/graph_controller',['@web/search/layout','@web/model/model','@web/views/standard_view_props','@web/search/action_hook','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/search/cog_menu/cog_menu','@odoo/owl'],function(require){'use strict';let __exports={};const{Layout}=require("@web/search/layout");const{useModelWithSampleData}=require("@web/model/model");const{standardViewProps}=require("@web/views/standard_view_props");const{useSetupAction}=require("@web/search/action_hook");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Component,useRef}=require("@odoo/owl");const GraphController=__exports.GraphController=class GraphController extends Component{static template="web.GraphView";static components={Layout,SearchBar,CogMenu};static props={...standardViewProps,Model:Function,modelParams:Object,Renderer:Function,buttonTemplate:String,};setup(){this.model=useModelWithSampleData(this.props.Model,this.props.modelParams);useSetupAction({rootRef:useRef("root"),getLocalState:()=>{return{metaData:this.model.metaData};},getContext:()=>this.getContext(),});this.searchBarToggler=useSearchBarToggler();}
getContext(){const{measure,groupBy,mode}=this.model.metaData;const context={graph_measure:measure,graph_mode:mode,graph_groupbys:groupBy.map((gb)=>gb.spec),};if(mode!=="pie"){context.graph_order=this.model.metaData.order;context.graph_stacked=this.model.metaData.stacked;if(mode==="line"){context.graph_cumulated=this.model.metaData.cumulated;}}
return context;}}
return __exports;});;

/* /web/static/src/views/graph/graph_model.js */
odoo.define('@web/views/graph/graph_model',['@web/core/l10n/translation','@web/core/utils/arrays','@web/core/utils/concurrency','@web/search/utils/dates','@web/search/utils/group_by','@web/search/utils/misc','@web/model/model','@web/views/utils','@web/core/domain'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{sortBy,groupBy}=require("@web/core/utils/arrays");const{KeepLast,Race}=require("@web/core/utils/concurrency");const{rankInterval}=require("@web/search/utils/dates");const{getGroupBy}=require("@web/search/utils/group_by");const{GROUPABLE_TYPES}=require("@web/search/utils/misc");const{Model}=require("@web/model/model");const{computeReportMeasures,processMeasure}=require("@web/views/utils");const{Domain}=require("@web/core/domain");const SEP=__exports.SEP=" / ";const SEQUENTIAL_TYPES=__exports.SEQUENTIAL_TYPES=["date","datetime"];class DateClasses{constructor(array){this.__referenceIndex=null;this.__array=array;for(let i=0;i<this.__array.length;i++){const arr=this.__array[i];if(arr.length&&this.__referenceIndex===null){this.__referenceIndex=i;}}}
classLabel(index,o){return`${this.__array[index].indexOf(o)}`;}
classMembers(classLabel){const classNumber=Number(classLabel);const classMembers=new Set();for(const arr of this.__array){if(arr[classNumber]!==undefined){classMembers.add(arr[classNumber]);}}
return[...classMembers];}
representative(classLabel,index){const classNumber=Number(classLabel);const i=index===undefined?this.__referenceIndex:index;if(i===null){return null;}
return this.__array[i][classNumber];}
arrayLength(index){return this.__array[index].length;}}
const GraphModel=__exports.GraphModel=class GraphModel extends Model{setup(params){this.keepLast=new KeepLast();this.race=new Race();const _fetchDataPoints=this._fetchDataPoints.bind(this);this._fetchDataPoints=(...args)=>{return this.race.add(_fetchDataPoints(...args));};this.initialGroupBy=null;this.metaData=params;this.data=null;this.searchParams=null;this.lineOverlayDataset=null;}
async load(searchParams){this.searchParams=searchParams;if(!this.initialGroupBy){this.initialGroupBy=searchParams.context.graph_groupbys||this.metaData.groupBy;}
const metaData=this._buildMetaData();await this._fetchDataPoints(metaData);}
hasData(){return this.dataPoints.length>0;}
async updateMetaData(params){if("measure"in params){const metaData=this._buildMetaData(params);await this._fetchDataPoints(metaData);this.useSampleModel=false;}else{await this.race.getCurrentProm();this.metaData=Object.assign({},this.metaData,params);this._prepareData();}
this.notify();}
_buildMetaData(params){const{comparison,domain,context,groupBy}=this.searchParams;const metaData=Object.assign({},this.metaData,{context});if(comparison){metaData.domains=comparison.domains;metaData.comparisonField=comparison.fieldName;}else{metaData.domains=[{arrayRepr:domain,description:null}];}
metaData.measure=context.graph_measure||metaData.measure;metaData.mode=context.graph_mode||metaData.mode;metaData.groupBy=groupBy.length?groupBy:this.initialGroupBy;if(metaData.mode!=="pie"){metaData.order="graph_order"in context?context.graph_order:metaData.order;if(comparison){metaData.stacked=false;}else if("graph_stacked"in context){metaData.stacked=context.graph_stacked;}
if(metaData.mode==="line"){metaData.cumulated="graph_cumulated"in context?context.graph_cumulated:metaData.cumulated;}}
this._normalize(metaData);metaData.measures=computeReportMeasures(metaData.fields,metaData.fieldAttrs,[...(metaData.viewMeasures||[]),metaData.measure,]);return Object.assign(metaData,params);}
async _fetchDataPoints(metaData){this.dataPoints=await this.keepLast.add(this._loadDataPoints(metaData));this.metaData=metaData;this._prepareData();}
_getData(dataPoints){const{comparisonField,groupBy,mode}=this.metaData;let identify=false;if(comparisonField&&groupBy.length&&groupBy[0].fieldName===comparisonField){identify=true;}
const dateClasses=identify?this._getDateClasses(dataPoints):null;let labels=[];const labelMap={};for(const dataPt of dataPoints){const x=dataPt.labels.slice(0,mode==="pie"?undefined:1);const trueLabel=x.length?x.join(SEP):_t("Total");if(dateClasses){x[0]=dateClasses.classLabel(dataPt.originIndex,x[0]);}
const key=JSON.stringify(x);if(labelMap[key]===undefined){labelMap[key]=labels.length;if(dateClasses){if(mode==="pie"){x[0]=dateClasses.classMembers(x[0]).join(", ");}else{x[0]=dateClasses.representative(x[0]);}}
const label=x.length?x.join(SEP):_t("Total");labels.push(label);}
dataPt.labelIndex=labelMap[key];dataPt.trueLabel=trueLabel;}
const datasetsTmp={};for(const dataPt of dataPoints){const{domain,labelIndex,originIndex,trueLabel,value,identifier,cumulatedStart,}=dataPt;const datasetLabel=this._getDatasetLabel(dataPt);if(!(datasetLabel in datasetsTmp)){let dataLength=labels.length;if(mode!=="pie"&&dateClasses){dataLength=dateClasses.arrayLength(originIndex);}
datasetsTmp[datasetLabel]={data:new Array(dataLength).fill(0),cumulatedStart,trueLabels:labels.slice(0,dataLength),domains:new Array(dataLength).fill([]),label:datasetLabel,originIndex:originIndex,identifiers:new Set(),};}
datasetsTmp[datasetLabel].data[labelIndex]=value;datasetsTmp[datasetLabel].domains[labelIndex]=domain;datasetsTmp[datasetLabel].trueLabels[labelIndex]=trueLabel;datasetsTmp[datasetLabel].identifiers.add(identifier);}
let datasets=sortBy(Object.values(datasetsTmp),"originIndex");if(mode==="pie"){datasets=datasets.filter((dataset)=>dataset.data.some((v)=>Boolean(v)));const labelsToKeepIndexes={};labels.forEach((_,index)=>{if(datasets.some((dataset)=>Boolean(dataset.data[index]))){labelsToKeepIndexes[index]=true;}});labels=labels.filter((_,index)=>labelsToKeepIndexes[index]);for(const dataset of datasets){dataset.data=dataset.data.filter((_,index)=>labelsToKeepIndexes[index]);dataset.domains=dataset.domains.filter((_,index)=>labelsToKeepIndexes[index]);dataset.trueLabels=dataset.trueLabels.filter((_,index)=>labelsToKeepIndexes[index]);}}
return{datasets,labels};}
_getLabel(description){if(!description){return _t("Sum");}else{return _t("Sum (%s)",description);}}
_getLineOverlayDataset(){const{domains,stacked}=this.metaData;const data=this.data;let lineOverlayDataset=null;if(stacked){const stacks=groupBy(data.datasets,(dataset)=>dataset.originIndex);if(Object.keys(stacks).length==1){const[[originIndex,datasets]]=Object.entries(stacks);if(datasets.length>1){const data=[];for(const dataset of datasets){for(let i=0;i<dataset.data.length;i++){data[i]=(data[i]||0)+dataset.data[i];}}
lineOverlayDataset={label:this._getLabel(domains[originIndex].description),data,trueLabels:datasets[0].trueLabels,};}}}
return lineOverlayDataset;}
_getDatasetLabel(dataPoint){const{measure,measures,domains,mode}=this.metaData;const{labels,originIndex}=dataPoint;if(mode==="pie"){return domains[originIndex].description||"";}
let datasetLabel=labels.slice(1).join(SEP);if(domains.length>1){datasetLabel=domains[originIndex].description+(datasetLabel?SEP+datasetLabel:"");}
datasetLabel=datasetLabel||measures[measure].string;return datasetLabel;}
_getDateClasses(dataPoints){const{domains}=this.metaData;const dateSets=domains.map(()=>new Set());for(const{labels,originIndex}of dataPoints){const date=labels[0];dateSets[originIndex].add(date);}
const arrays=dateSets.map((dateSet)=>[...dateSet]);return new DateClasses(arrays);}
_getDefaultFilterLabel(field){return _t("None");}
_getProcessedDataPoints(){const{domains,groupBy,mode,order}=this.metaData;let processedDataPoints=[];if(mode==="line"){processedDataPoints=this.dataPoints.filter((dataPoint)=>dataPoint.labels[0]!==this._getDefaultFilterLabel(groupBy[0]));}else if(mode==="pie"){processedDataPoints=this.dataPoints.filter((dataPoint)=>dataPoint.value>0&&dataPoint.count!==0);}else{processedDataPoints=this.dataPoints.filter((dataPoint)=>dataPoint.count!==0);}
if(order!==null&&mode!=="pie"&&domains.length===1&&groupBy.length>0){const groupedDataPoints={};for(const dataPt of processedDataPoints){const key=dataPt.labels[0];if(!groupedDataPoints[key]){groupedDataPoints[key]=[];}
groupedDataPoints[key].push(dataPt);}
const groups=Object.values(groupedDataPoints);const groupTotal=(group)=>group.reduce((sum,dataPt)=>sum+dataPt.value,0);processedDataPoints=sortBy(groups,groupTotal,order.toLowerCase()).flat();}
return processedDataPoints;}
async _loadDataPoints(metaData){const{measure,domains,fields,groupBy,resModel,cumulatedStart}=metaData;const fieldName=groupBy[0]?.fieldName;const sequential_field=cumulatedStart&&SEQUENTIAL_TYPES.includes(fields[fieldName]?.type)?fieldName:null;const sequential_spec=sequential_field&&groupBy[0].spec;const measures=["__count"];if(measure!=="__count"){let{aggregator,type}=fields[measure];if(type==="many2one"){aggregator="count_distinct";}
if(aggregator===undefined){throw new Error(`No aggregate function has been provided for the measure '${measure}'`);}
measures.push(`${measure}:${aggregator}`);}
const numbering={};const proms=domains.map(async(domain,originIndex)=>{const data=await this.orm.webReadGroup(resModel,domain.arrayRepr,measures,groupBy.map((gb)=>gb.spec),{lazy:false,context:{fill_temporal:true,...this.searchParams.context},});let start=false;if(cumulatedStart&&sequential_field&&data.groups.length&&domain.arrayRepr.some((leaf)=>leaf.length===3&&leaf[0]==sequential_field)){const first_date=data.groups[0].__range[sequential_spec].from;const new_domain=Domain.combine([new Domain([[sequential_field,"<",first_date]]),Domain.removeDomainLeaves(domain.arrayRepr,[sequential_field]),],"AND").toList();start=await this.orm.webReadGroup(resModel,new_domain,measures,groupBy.filter((gb)=>gb.fieldName!=sequential_field).map((gb)=>gb.spec),{lazy:false,context:{...this.searchParams.context},});}
const dataPoints=[];const cumulatedStartValue={};if(start){for(const group of start.groups){const rawValues=[];for(const gb of groupBy.filter((gb)=>gb.fieldName!=sequential_field)){rawValues.push({[gb.spec]:group[gb.spec]});}
cumulatedStartValue[JSON.stringify(rawValues)]=group[measure];}}
for(const group of data.groups){const{__domain,__count}=group;const labels=[];const rawValues=[];for(const gb of groupBy){let label;const val=group[gb.spec];rawValues.push({[gb.spec]:val});const fieldName=gb.fieldName;const{type}=fields[fieldName];if(type==="boolean"){label=`${val}`;}else if(val===false){label=this._getDefaultFilterLabel(gb);}else if(["many2many","many2one"].includes(type)){const[id,name]=val;const key=JSON.stringify([fieldName,name]);if(!numbering[key]){numbering[key]={};}
const numbers=numbering[key];if(!numbers[id]){numbers[id]=Object.keys(numbers).length+1;}
const num=numbers[id];label=num===1?name:`${name} (${num})`;}else if(type==="selection"){const selected=fields[fieldName].selection.find((s)=>s[0]===val);label=selected[1];}else{label=val;}
labels.push(label);}
let value=group[measure];if(value instanceof Array){value=1;}
if(!Number.isInteger(value)){metaData.allIntegers=false;}
const group_id=JSON.stringify(rawValues.slice(1));dataPoints.push({count:__count,domain:__domain,value,labels,originIndex,identifier:JSON.stringify(rawValues),cumulatedStart:cumulatedStartValue[group_id]||0,});}
return dataPoints;});const promResults=await Promise.all(proms);return promResults.flat();}
_normalize(metaData){const{fields}=metaData;const groupBy=[];for(const gb of metaData.groupBy){let ngb=gb;if(typeof gb==="string"){ngb=getGroupBy(gb,fields);}
groupBy.push(ngb);}
const processedGroupBy=[];for(const gb of groupBy){const{fieldName,interval}=gb;const{groupable,type}=fields[fieldName];if(!groupable||["id","__count"].includes(fieldName)||!GROUPABLE_TYPES.includes(type)){continue;}
const index=processedGroupBy.findIndex((gb)=>gb.fieldName===fieldName);if(index===-1){processedGroupBy.push(gb);}else if(interval){const registeredInterval=processedGroupBy[index].interval;if(rankInterval(registeredInterval)<rankInterval(interval)){processedGroupBy.splice(index,1,gb);}}}
metaData.groupBy=processedGroupBy;metaData.measure=processMeasure(metaData.measure);}
_prepareData(){const processedDataPoints=this._getProcessedDataPoints();this.data=this._getData(processedDataPoints);this.lineOverlayDataset=null;if(this.metaData.mode==="bar"){this.lineOverlayDataset=this._getLineOverlayDataset();}}}
return __exports;});;

/* /web/static/src/views/graph/graph_renderer.js */
odoo.define('@web/views/graph/graph_renderer',['@web/core/l10n/translation','@web/core/colors/colors','@web/core/registry','@web/views/fields/formatters','@web/views/graph/graph_model','@web/core/utils/arrays','@web/core/assets','@web/core/utils/render','@web/core/utils/hooks','@odoo/owl','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web/core/browser/cookie','@web/views/view_components/report_view_measures'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{getBorderWhite,DEFAULT_BG,getColor,getCustomColor,lightenColor,darkenColor,}=require("@web/core/colors/colors");const{registry}=require("@web/core/registry");const{formatFloat}=require("@web/views/fields/formatters");const{SEP}=require("@web/views/graph/graph_model");const{sortBy}=require("@web/core/utils/arrays");const{loadBundle}=require("@web/core/assets");const{renderToString}=require("@web/core/utils/render");const{useService}=require("@web/core/utils/hooks");const{Component,onWillUnmount,useEffect,useRef,onWillStart}=require("@odoo/owl");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{cookie}=require("@web/core/browser/cookie");const{ReportViewMeasures}=require("@web/views/view_components/report_view_measures");const NO_DATA=_t("No data");const formatters=registry.category("formatters");const colorScheme=cookie.get("color_scheme");const GRAPH_LEGEND_COLOR=getCustomColor(colorScheme,"#111827","#ffffff");const GRAPH_GRID_COLOR=getCustomColor(colorScheme,"rgba(0,0,0,.1)","rgba(255,255,255,.15");const GRAPH_LABEL_COLOR=getCustomColor(colorScheme,"#111827","#E4E4E4");const NO_DATA_COLOR=getCustomColor(colorScheme,DEFAULT_BG,"#3C3E4B");const gridOnTop={id:"gridOnTop",afterDraw:(chart)=>{const elements=chart.getDatasetMeta(0).data||[];const ctx=chart.ctx;const chartArea=chart.chartArea;const yAxis=chart.scales.y;const xAxis=chart.scales.x;ctx.lineWidth=1;ctx.strokeStyle=GRAPH_GRID_COLOR;yAxis.ticks.forEach((value,index)=>{const y=yAxis.getPixelForTick(index);ctx.beginPath();ctx.moveTo(chartArea.left,y);ctx.lineTo(chartArea.right,y);ctx.moveTo(chartArea.left-8,y);ctx.lineTo(chartArea.left,y);ctx.setLineDash([]);ctx.stroke();});xAxis.ticks.forEach((value,tickIndex)=>{const x=xAxis.getPixelForTick(tickIndex);ctx.beginPath();ctx.moveTo(x,chartArea.bottom);ctx.lineTo(x,chartArea.bottom+8);ctx.stroke();});elements.forEach((point,eltIndex)=>{xAxis.ticks.forEach((value,tickIndex)=>{if(point.active&&eltIndex===tickIndex){const x=xAxis.getPixelForTick(tickIndex);ctx.beginPath();ctx.moveTo(x,chartArea.top);ctx.lineTo(x,chartArea.bottom);ctx.strokeStyle=GRAPH_GRID_COLOR;ctx.stroke();}});});},};function getMaxWidth(chartArea){const{left,right}=chartArea;return Math.floor((right-left)/1.618)+"px";}
function shortenLabel(label){const groups=label.toString().split(SEP);let shortLabel=groups.slice(0,3).join(SEP);if(shortLabel.length>30){shortLabel=`${shortLabel.slice(0, 30)}...`;}else if(groups.length>3){shortLabel=`${shortLabel}${SEP}...`;}
return shortLabel;}
const GraphRenderer=__exports.GraphRenderer=class GraphRenderer extends Component{static template="web.GraphRenderer";static components={Dropdown,DropdownItem,ReportViewMeasures};static props=["class?","model","buttonTemplate"];setup(){this.model=this.props.model;this.rootRef=useRef("root");this.canvasRef=useRef("canvas");this.containerRef=useRef("container");this.actionService=useService("action");this.chart=null;this.tooltip=null;this.legendTooltip=null;onWillStart(async()=>{await loadBundle("web.chartjs_lib");});useEffect(()=>this.renderChart());onWillUnmount(this.onWillUnmount);}
onWillUnmount(){if(this.chart){this.chart.destroy();}}
adjustTooltipHeight(tooltip,maxTooltipHeight){const sizeOneLine=tooltip.querySelector("tbody tr").clientHeight;const tbodySize=tooltip.querySelector("tbody").clientHeight;const toKeep=Math.max(0,Math.floor((maxTooltipHeight-(tooltip.clientHeight-tbodySize))/sizeOneLine)-1);const lines=tooltip.querySelectorAll("tbody tr");const toRemove=lines.length-toKeep;if(toRemove>0){for(let index=toKeep;index<lines.length;++index){lines[index].remove();}
const tr=document.createElement("tr");const td=document.createElement("td");tr.classList.add("o_show_more","text-center","fw-bold");td.setAttribute("colspan","2");td.innerText=_t("...");tr.appendChild(td);tooltip.querySelector("tbody").appendChild(tr);}}
customTooltip(data,metaData,context){const tooltipModel=context.tooltip;const{measure,measures,disableLinking,mode}=metaData;this.containerRef.el.style.cursor="";this.removeTooltips();if(tooltipModel.opacity===0||tooltipModel.dataPoints.length===0){return;}
if(!disableLinking&&mode!=="line"){this.containerRef.el.style.cursor="pointer";}
const chartAreaTop=this.chart.chartArea.top;const viewContentTop=this.containerRef.el.getBoundingClientRect().top;const innerHTML=renderToString("web.GraphRenderer.CustomTooltip",{maxWidth:getMaxWidth(this.chart.chartArea),measure:measures[measure].string,mode:this.model.metaData.mode,tooltipItems:this.getTooltipItems(data,metaData,tooltipModel),});const template=Object.assign(document.createElement("template"),{innerHTML});const tooltip=template.content.firstChild;this.containerRef.el.prepend(tooltip);let top;const tooltipHeight=tooltip.clientHeight;const minTopAllowed=Math.floor(chartAreaTop);const maxTopAllowed=Math.floor(window.innerHeight-(viewContentTop+tooltipHeight))-2;const y=Math.floor(tooltipModel.y);if(minTopAllowed<=maxTopAllowed){if(y<=maxTopAllowed){if(y>=minTopAllowed){top=y;}else{top=minTopAllowed;}}else{top=maxTopAllowed;}}else{top=minTopAllowed;const maxTooltipHeight=window.innerHeight-(viewContentTop+chartAreaTop)-2;this.adjustTooltipHeight(tooltip,maxTooltipHeight);}
this.fixTooltipLeftPosition(tooltip,tooltipModel.x);tooltip.style.top=Math.floor(top)+"px";this.tooltip=tooltip;}
fixTooltipLeftPosition(tooltip,x){let left;const tooltipWidth=tooltip.clientWidth;const minLeftAllowed=Math.floor(this.chart.chartArea.left+2);const maxLeftAllowed=Math.floor(this.chart.chartArea.right-tooltipWidth-2);x=Math.floor(x);if(x<minLeftAllowed){left=minLeftAllowed;}else if(x>maxLeftAllowed){left=maxLeftAllowed;}else{left=x;}
tooltip.style.left=`${left}px`;}
formatValue(value,allIntegers=true,formatType=""){const largeNumber=Math.abs(value)>=1000;if(formatType){return formatters.get(formatType)(value);}
if(allIntegers&&!largeNumber){return String(value);}
if(largeNumber){return formatFloat(value,{humanReadable:true,decimals:2,minDigits:1});}
return formatFloat(value);}
getBarChartData(){const{domains,stacked}=this.model.metaData;const{data,lineOverlayDataset}=this.model;for(let index=0;index<data.datasets.length;++index){const dataset=data.datasets[index];const itemColor=getColor(index,colorScheme,data.datasets.length);if(stacked){dataset.stack=domains[dataset.originIndex].description||"";}
dataset.backgroundColor=itemColor;dataset.borderRadius=4;}
if(lineOverlayDataset){Object.assign(lineOverlayDataset,{type:"line",order:-1,tension:0,fill:false,pointHitRadius:20,pointRadius:5,pointHoverRadius:10,backgroundColor:getCustomColor(colorScheme,"#343a40","#e9ecef"),borderColor:getCustomColor(colorScheme,"rgba(0,0,0,.3)","rgba(255,255,255,.5)"),borderWidth:2,lineWidth:3,});return{...data,datasets:[...data.datasets,lineOverlayDataset],};}
return data;}
getChartConfig(){const{mode}=this.model.metaData;let data;switch(mode){case"bar":data=this.getBarChartData();break;case"line":data=this.getLineChartData();break;case"pie":data=this.getPieChartData();}
const options=this.prepareOptions();const config={data,options,type:mode};if(mode==="line"){config.plugins=[gridOnTop];}
return config;}
getAnimationOptions(){let delayed;const{mode}=this.model.metaData;const labelsCount=this.model.data.labels.length;const gap=350;const animationOptions={};if(mode==="pie"){animationOptions.offset={duration:200};}else{animationOptions.duration=600;animationOptions.onComplete=()=>{delayed=true;};animationOptions.delay=(context)=>{let delay=0;if((mode==="bar"||mode==="line")&&!delayed){delay=context.dataIndex*(gap/labelsCount);}
return delay;};}
return animationOptions;}
getElementOptions(){const{mode,stacked}=this.model.metaData;const elementOptions={};if(mode==="bar"){elementOptions.bar={borderWidth:1};}else if(mode==="line"){elementOptions.line={fill:stacked,tension:0};}
return elementOptions;}
getLegendOptions(){const{mode}=this.model.metaData;const legendOptions={onHover:this.onLegendHover.bind(this),onLeave:this.onLegendLeave.bind(this),};if(mode==="line"){legendOptions.onClick=this.onLegendClick.bind(this);}
if(mode==="pie"){legendOptions.labels={generateLabels:(chart)=>{return chart.data.labels.map((label,index)=>{const hidden=!chart.getDataVisibility(index);const fullText=label;const text=shortenLabel(fullText);const fillStyle=label===NO_DATA?NO_DATA_COLOR:getColor(index,colorScheme,chart.data.labels.length);return{text,fullText,fillStyle,hidden,index,fontColor:GRAPH_LEGEND_COLOR,lineWidth:0,};});},};}else{legendOptions.position="top";legendOptions.align="end";const referenceColor=mode==="bar"?"backgroundColor":"borderColor";legendOptions.labels={generateLabels:(chart)=>{const{data}=chart;const labels=data.datasets.map((dataset,index)=>{return{text:shortenLabel(dataset.label),fullText:dataset.label,fillStyle:dataset[referenceColor],hidden:!chart.isDatasetVisible(index),lineCap:dataset.borderCapStyle,lineDash:dataset.borderDash,lineDashOffset:dataset.borderDashOffset,lineJoin:dataset.borderJoinStyle,lineWidth:dataset.borderWidth,strokeStyle:dataset[referenceColor],pointStyle:dataset.pointStyle,datasetIndex:index,fontColor:GRAPH_LEGEND_COLOR,};});return labels;},};}
return legendOptions;}
getLineChartData(){const{cumulated}=this.model.metaData;const data=this.model.data;for(let index=0;index<data.datasets.length;++index){const dataset=data.datasets[index];const itemColor=getColor(index,colorScheme,data.datasets.length);dataset.backgroundColor=getCustomColor(colorScheme,lightenColor(itemColor,0.5),darkenColor(itemColor,0.5));dataset.cubicInterpolationMode="monotone";dataset.borderColor=itemColor;dataset.borderWidth=2;dataset.hoverBackgroundColor=dataset.borderColor;dataset.pointRadius=3;dataset.pointHoverRadius=6;if(cumulated){let accumulator=dataset.cumulatedStart;dataset.data=dataset.data.map((value)=>{accumulator+=value;return accumulator;});}
if(data.labels.length===1){dataset.data.unshift(undefined);dataset.trueLabels.unshift(undefined);dataset.domains.unshift(undefined);}
dataset.pointBackgroundColor=dataset.borderColor;}
data.labels=data.labels.length>1?data.labels:["",...data.labels,""];return data;}
getPieChartData(){const{domains}=this.model.metaData;const data=this.model.data;const colors=data.labels.map((_,index)=>getColor(index,colorScheme,data.labels.length));const borderColor=getBorderWhite(colorScheme);for(const dataset of data.datasets){dataset.backgroundColor=colors;dataset.hoverBackgroundColor=colors;dataset.borderColor=borderColor;dataset.hoverOffset=60;}
const representedOriginIndexes=new Set(data.datasets.map((dataset)=>dataset.originIndex));let addNoDataToLegend=false;const fakeData=new Array(data.labels.length+1);fakeData[data.labels.length]=1;const fakeTrueLabels=new Array(data.labels.length+1);fakeTrueLabels[data.labels.length]=NO_DATA;for(let index=0;index<domains.length;++index){if(!representedOriginIndexes.has(index)){data.datasets.push({label:domains[index].description,data:fakeData,trueLabels:fakeTrueLabels,backgroundColor:[...colors,NO_DATA_COLOR],borderColor,});addNoDataToLegend=true;}}
if(addNoDataToLegend){data.labels.push(NO_DATA);}
return data;}
getScaleOptions(){const{labels}=this.model.data;const{fieldAttrs,measure,measures,mode,stacked}=this.model.metaData;if(mode==="pie"){return{};}
const xAxe={type:"category",ticks:{callback:(val,index)=>{const value=labels[index];return shortenLabel(value);},color:GRAPH_LABEL_COLOR,},grid:{color:"transparent",},border:{display:false,},};const yAxe={beginAtZero:true,type:"linear",title:{text:measures[measure].string,color:cookie.get("color_scheme")==="dark"?getColor(15,cookie.get("color_scheme")):null,},ticks:{callback:(value)=>this.formatValue(value,false,fieldAttrs[measure]?.widget),color:GRAPH_LABEL_COLOR,},stacked:mode==="line"&&stacked?stacked:undefined,grid:{display:mode==="line"?false:true,color:GRAPH_GRID_COLOR,},border:{display:false,},suggestedMax:0,suggestedMin:0,};return{x:xAxe,y:yAxe};}
getTooltipItems(data,metaData,tooltipModel){const{allIntegers,domains,mode,groupBy,measure}=metaData;const sortedDataPoints=sortBy(tooltipModel.dataPoints,"raw","desc");const items=[];for(const item of sortedDataPoints){const index=item.dataIndex;const dataset=data.datasets[item.datasetIndex]||this.model.lineOverlayDataset;let label=dataset.trueLabels[index];let value=dataset.data[index];const measureWidget=metaData.fieldAttrs[measure]?.widget;value=this.formatValue(value,allIntegers,measureWidget);let boxColor;let percentage;if(mode==="pie"){if(label===NO_DATA){value=this.formatValue(0,allIntegers,measureWidget);}
if(domains.length>1){label=`${dataset.label} / ${label}`;}
boxColor=dataset.backgroundColor[index];const totalData=dataset.data.reduce((a,b)=>a+b,0);percentage=totalData&&((dataset.data[index]*100)/totalData).toFixed(2);}else{if(groupBy.length>1||domains.length>1){label=`${label} / ${dataset.label}`;}
boxColor=mode==="bar"?dataset.backgroundColor:dataset.borderColor;}
items.push({label,value,boxColor,percentage});}
return items;}
getTooltipOptions(){const{data,metaData}=this.model;const{mode}=metaData;const tooltipOptions={enabled:false,external:this.customTooltip.bind(this,data,metaData),};if(mode==="line"){tooltipOptions.mode="index";tooltipOptions.intersect=false;tooltipOptions.position="average";}
if(mode==="bar"){tooltipOptions.xAlign="center";tooltipOptions.yAlign="bottom";}
if(mode==="pie"){tooltipOptions.xAlign="center";tooltipOptions.yAlign="center";}
return tooltipOptions;}
onGraphClicked(ev){const[activeElement]=this.chart.getElementsAtEventForMode(ev,"nearest",{intersect:true},false);if(!activeElement){return;}
const{datasetIndex,index}=activeElement;const{domains}=this.chart.data.datasets[datasetIndex];if(domains){this.onGraphClickedFinal(domains[index]);}}
onLegendClick(ev,legendItem){this.removeTooltips();const index=legendItem.datasetIndex;const meta=this.chart.getDatasetMeta(index);meta.hidden=meta.hidden===null?!this.chart.data.datasets[index].hidden:null;this.chart.update();}
onLegendHover(ev,legendItem){ev=ev.native;this.canvasRef.el.style.cursor="pointer";const{fullText,text}=legendItem;if(this.legendTooltip||text===fullText){return;}
const viewContentTop=this.canvasRef.el.getBoundingClientRect().top;const legendTooltip=Object.assign(document.createElement("div"),{className:"o_tooltip_legend popover p-3 pe-none position-absolute",innerText:fullText,});legendTooltip.style.top=`${ev.clientY - viewContentTop}px`;legendTooltip.style.maxWidth=getMaxWidth(this.chart.chartArea);this.containerRef.el.appendChild(legendTooltip);this.fixTooltipLeftPosition(legendTooltip,ev.clientX);this.legendTooltip=legendTooltip;}
onLegendLeave(){this.canvasRef.el.style.cursor="";this.removeLegendTooltip();}
prepareOptions(){const{disableLinking,mode}=this.model.metaData;const options={maintainAspectRatio:false,scales:this.getScaleOptions(),plugins:{legend:this.getLegendOptions(),tooltip:this.getTooltipOptions(),},elements:this.getElementOptions(),onResize:()=>{this.resizeChart(options);},animation:this.getAnimationOptions(),};if(!disableLinking&&mode!=="line"){options.onClick=this.onGraphClicked.bind(this);}
if(mode==="line"){options.interaction={mode:"index",intersect:false,};}
if(mode==="pie"){options.radius="90%";}
return options;}
resizeChart(context){const{mode}=this.model.metaData;if(mode==="pie"){if(this.env.isSmall){context.plugins.legend.position="bottom";context.plugins.legend.align="center";}else{context.plugins.legend.position="right";context.plugins.legend.align="start";}}}
removeLegendTooltip(){if(this.legendTooltip){this.legendTooltip.remove();this.legendTooltip=null;}}
removeTooltips(){if(this.tooltip){this.tooltip.remove();this.tooltip=null;}
this.removeLegendTooltip();}
renderChart(){if(this.chart){this.chart.destroy();}
if(this.canvasRef.el){const config=this.getChartConfig();this.chart=new Chart(this.canvasRef.el,config);}}
openView(domain,views,context){this.actionService.doAction({context,domain,name:this.model.metaData.title,res_model:this.model.metaData.resModel,target:"current",type:"ir.actions.act_window",views,},{viewType:"list",});}
onGraphClickedFinal(domain){const{context}=this.model.metaData;Object.keys(context).forEach((x)=>{if(x==="group_by"||x.startsWith("search_default_")){delete context[x];}});const views={};for(const[viewId,viewType]of this.env.config.views||[]){views[viewType]=viewId;}
function getView(viewType){return[views[viewType]||false,viewType];}
const actionViews=[getView("list"),getView("form")];this.openView(domain,actionViews,context);}
onMeasureSelected({measure}){this.model.updateMetaData({measure});}
onModeSelected(mode){if(this.model.metaData.mode!=mode){this.model.updateMetaData({mode});}}
toggleOrder(order){const{order:currentOrder}=this.model.metaData;const nextOrder=currentOrder===order?null:order;this.model.updateMetaData({order:nextOrder});}
toggleStacked(){const{stacked}=this.model.metaData;this.model.updateMetaData({stacked:!stacked});}
toggleCumulated(){const{cumulated}=this.model.metaData;this.model.updateMetaData({cumulated:!cumulated});}}
return __exports;});;

/* /web/static/src/views/graph/graph_search_model.js */
odoo.define('@web/views/graph/graph_search_model',['@web/search/search_model'],function(require){'use strict';let __exports={};const{SearchModel}=require("@web/search/search_model");const GraphSearchModel=__exports.GraphSearchModel=class GraphSearchModel extends SearchModel{_getIrFilterDescription(){this.preparingIrFilterDescription=true;const result=super._getIrFilterDescription(...arguments);this.preparingIrFilterDescription=false;return result;}
_getSearchItemGroupBys(activeItem){const{searchItemId}=activeItem;const{context,type}=this.searchItems[searchItemId];if(!this.preparingIrFilterDescription&&type==="favorite"&&context.graph_groupbys){return context.graph_groupbys;}
return super._getSearchItemGroupBys(...arguments);}}
return __exports;});;

/* /web/static/src/views/graph/graph_view.js */
odoo.define('@web/views/graph/graph_view',['@web/core/l10n/translation','@web/core/registry','@web/views/graph/graph_arch_parser','@web/views/graph/graph_model','@web/views/graph/graph_controller','@web/views/graph/graph_renderer','@web/views/graph/graph_search_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{registry}=require("@web/core/registry");const{GraphArchParser}=require("@web/views/graph/graph_arch_parser");const{GraphModel}=require("@web/views/graph/graph_model");const{GraphController}=require("@web/views/graph/graph_controller");const{GraphRenderer}=require("@web/views/graph/graph_renderer");const{GraphSearchModel}=require("@web/views/graph/graph_search_model");const viewRegistry=registry.category("views");const graphView=__exports.graphView={type:"graph",Controller:GraphController,Renderer:GraphRenderer,Model:GraphModel,ArchParser:GraphArchParser,SearchModel:GraphSearchModel,searchMenuTypes:["filter","groupBy","comparison","favorite"],buttonTemplate:"web.GraphView.Buttons",props:(genericProps,view)=>{let modelParams;if(genericProps.state){modelParams=genericProps.state.metaData;}else{const{arch,fields,resModel}=genericProps;const parser=new view.ArchParser();const archInfo=parser.parse(arch,fields);modelParams={disableLinking:Boolean(archInfo.disableLinking),fieldAttrs:archInfo.fieldAttrs,fields:fields,groupBy:archInfo.groupBy,measure:archInfo.measure||"__count",viewMeasures:archInfo.measures,mode:archInfo.mode||"bar",order:archInfo.order||null,resModel:resModel,stacked:"stacked"in archInfo?archInfo.stacked:true,cumulated:archInfo.cumulated||false,cumulatedStart:archInfo.cumulatedStart||false,title:archInfo.title||_t("Untitled"),};}
return{...genericProps,modelParams,Model:view.Model,Renderer:view.Renderer,buttonTemplate:view.buttonTemplate,};},};viewRegistry.add("graph",graphView);return __exports;});;

/* /web/static/src/views/pivot/pivot_arch_parser.js */
odoo.define('@web/views/pivot/pivot_arch_parser',['@web/core/utils/strings','@web/core/utils/xml'],function(require){'use strict';let __exports={};const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const PivotArchParser=__exports.PivotArchParser=class PivotArchParser{parse(arch){const archInfo={activeMeasures:[],colGroupBys:[],defaultOrder:null,fieldAttrs:{},rowGroupBys:[],widgets:{},};visitXML(arch,(node)=>{switch(node.tagName){case"pivot":{if(node.hasAttribute("disable_linking")){archInfo.disableLinking=exprToBoolean(node.getAttribute("disable_linking"));}
if(node.hasAttribute("default_order")){archInfo.defaultOrder=node.getAttribute("default_order");}
if(node.hasAttribute("string")){archInfo.title=node.getAttribute("string");}
if(node.hasAttribute("display_quantity")){archInfo.displayQuantity=exprToBoolean(node.getAttribute("display_quantity"));}
break;}
case"field":{let fieldName=node.getAttribute("name");archInfo.fieldAttrs[fieldName]={};if(node.hasAttribute("string")){archInfo.fieldAttrs[fieldName].string=node.getAttribute("string");}
if(node.getAttribute("invisible")==="True"||node.getAttribute("invisible")==="1"){archInfo.fieldAttrs[fieldName].isInvisible=true;break;}
if(node.hasAttribute("interval")){fieldName+=":"+node.getAttribute("interval");}
if(node.hasAttribute("widget")){archInfo.widgets[fieldName]=node.getAttribute("widget");}
if(node.getAttribute("type")==="measure"||node.hasAttribute("operator")){archInfo.activeMeasures.push(fieldName);}
if(node.getAttribute("type")==="col"){archInfo.colGroupBys.push(fieldName);}
if(node.getAttribute("type")==="row"){archInfo.rowGroupBys.push(fieldName);}
break;}}});return archInfo;}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_controller.js */
odoo.define('@web/views/pivot/pivot_controller',['@web/search/layout','@web/model/model','@web/views/standard_view_props','@web/search/action_hook','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/search/cog_menu/cog_menu','@odoo/owl'],function(require){'use strict';let __exports={};const{Layout}=require("@web/search/layout");const{useModelWithSampleData}=require("@web/model/model");const{standardViewProps}=require("@web/views/standard_view_props");const{useSetupAction}=require("@web/search/action_hook");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Component,useRef}=require("@odoo/owl");const PivotController=__exports.PivotController=class PivotController extends Component{static template="web.PivotView";static components={Layout,SearchBar,CogMenu};static props={...standardViewProps,Model:Function,modelParams:Object,Renderer:Function,buttonTemplate:String,};setup(){this.model=useModelWithSampleData(this.props.Model,this.props.modelParams);useSetupAction({rootRef:useRef("root"),getLocalState:()=>{const{data,metaData}=this.model;return{data,metaData};},getContext:()=>this.getContext(),});this.searchBarToggler=useSearchBarToggler();}
getContext(){return{pivot_measures:this.model.metaData.activeMeasures,pivot_column_groupby:this.model.metaData.fullColGroupBys,pivot_row_groupby:this.model.metaData.fullRowGroupBys,};}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_header.js */
odoo.define('@web/views/pivot/pivot_header',['@odoo/owl','@web/core/dropdown/checkbox_item','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_hooks','@web/core/l10n/localization','@web/core/utils/arrays','@web/core/utils/hooks','@web/search/custom_group_by_item/custom_group_by_item','@web/search/properties_group_by_item/properties_group_by_item','@web/search/utils/dates','@web/search/utils/misc'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{CheckboxItem}=require("@web/core/dropdown/checkbox_item");const{Dropdown}=require("@web/core/dropdown/dropdown");const{useDropdownState}=require("@web/core/dropdown/dropdown_hooks");const{localization}=require("@web/core/l10n/localization");const{sortBy}=require("@web/core/utils/arrays");const{useBus}=require("@web/core/utils/hooks");const{CustomGroupByItem}=require("@web/search/custom_group_by_item/custom_group_by_item");const{PropertiesGroupByItem}=require("@web/search/properties_group_by_item/properties_group_by_item");const{getIntervalOptions}=require("@web/search/utils/dates");const{FACET_ICONS,GROUPABLE_TYPES}=require("@web/search/utils/misc");const PivotHeader=__exports.PivotHeader=class PivotHeader extends Component{static template="web.PivotHeader";static components={CustomGroupByItem,Dropdown,CheckboxItem,PropertiesGroupByItem,};static defaultProps={isInHead:false,isXAxis:false,showCaretDown:false,};static props={cell:Object,isInHead:{type:Boolean,optional:true},isXAxis:{type:Boolean,optional:true},customGroupBys:Object,onAddCustomGroupBy:Function,onItemSelected:Function,onClick:Function,slots:{optional:true},};setup(){this.icon=FACET_ICONS.groupBy;const fields=[];for(const[fieldName,field]of Object.entries(this.env.searchModel.searchViewFields)){if(this.validateField(fieldName,field)){fields.push(Object.assign({name:fieldName},field));}}
this.fields=sortBy(fields,"string");this.l10n=localization;this.dropdownState=useDropdownState();useBus(this.env.searchModel,"update",this.render);}
get hideCustomGroupBy(){return this.env.searchModel.hideCustomGroupBy||false;}
get items(){let items=this.env.searchModel.getSearchItems((searchItem)=>["groupBy","dateGroupBy"].includes(searchItem.type)&&!searchItem.custom);if(items.length===0){items=this.fields;}
let groupNumber=1+Math.max(0,...items.map(({groupNumber:n})=>n));for(const[fieldName,customGroupBy]of this.props.customGroupBys.entries()){items.push({...customGroupBy,name:fieldName,groupNumber:groupNumber++});}
return items.map((item)=>({...item,id:item.id||item.name,fieldName:item.fieldName||item.name,description:item.description||item.string,isActive:false,options:item.options||["date","datetime"].includes(item.type)?getIntervalOptions():undefined,}));}
get cell(){return this.props.cell;}
get padding(){return 5+this.cell.indent*30;}
validateField(fieldName,field){const{groupable,type}=field;return(groupable&&fieldName!=="id"&&GROUPABLE_TYPES.includes(type));}
onGroupBySelected({itemId,optionId}){const item=this.items.find(({id})=>id===itemId);this.props.onItemSelected({itemId,optionId,fieldName:item.fieldName,interval:optionId,groupId:this.cell.groupId,});}
onAddCustomGroup(fieldName){this.props.onAddCustomGroupBy(fieldName);}
onClick(event){if(this.cell.isLeaf&&!this.cell.isFolded){this.dropdownState.open();}
this.props.onClick();}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_model.js */
odoo.define('@web/views/pivot/pivot_model',['@web/core/l10n/translation','@web/core/domain','@web/core/utils/arrays','@web/core/utils/concurrency','@web/search/utils/dates','@web/model/model','@web/views/utils'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Domain}=require("@web/core/domain");const{cartesian,sections,sortBy,symmetricalDifference}=require("@web/core/utils/arrays");const{KeepLast,Race}=require("@web/core/utils/concurrency");const{DEFAULT_INTERVAL}=require("@web/search/utils/dates");const{Model}=require("@web/model/model");const{computeReportMeasures,processMeasure}=require("@web/views/utils");function computeVariation(value,comparisonValue){if(isNaN(value)||isNaN(comparisonValue)){return NaN;}
if(comparisonValue===0){if(value===0){return 0;}else if(value>0){return 1;}else{return-1;}}
return(value-comparisonValue)/Math.abs(comparisonValue);}
const PivotModel=__exports.PivotModel=class PivotModel extends Model{setup(params){this.keepLast=new KeepLast();this.race=new Race();const _loadData=this._loadData.bind(this);this._loadData=(...args)=>{return this.race.add(_loadData(...args));};let sortedColumn=params.metaData.sortedColumn||null;if(!sortedColumn&&params.metaData.defaultOrder){const defaultOrder=params.metaData.defaultOrder.split(" ");sortedColumn={groupId:[[],[]],measure:defaultOrder[0],order:defaultOrder[1]?defaultOrder[1]:"asc",};}
this.searchParams={context:{},domain:[],domains:[],groupBy:[],};this.data=params.data||{colGroupTree:null,rowGroupTree:null,groupDomains:{},measurements:{},counts:{},numbering:{},};const metaData=Object.assign({},params.metaData,{customGroupBys:params.metaData.customGroupBys||new Map(),expandedRowGroupBys:params.metaData.expandedRowGroupBys||[],expandedColGroupBys:params.metaData.expandedColGroupBys||[],sortedColumn,});this.metaData=this._buildMetaData(metaData);this.reload=false;this.nextActiveMeasures=null;}
async addGroupBy(params){if(this.race.getCurrentProm()){return;}
const{groupId,fieldName,type,custom}=params;let{interval}=params;const metaData=this._buildMetaData();if(custom&&!metaData.customGroupBys.has(fieldName)){const field=metaData.fields[fieldName];if(!interval&&["date","datetime"].includes(field.type)){interval=DEFAULT_INTERVAL;}
metaData.customGroupBys.set(fieldName,{...field,id:fieldName,});}
let groupBy=fieldName;if(interval){groupBy=`${groupBy}:${interval}`;}
if(type==="row"){metaData.expandedRowGroupBys.push(groupBy);}else{metaData.expandedColGroupBys.push(groupBy);}
const config={metaData,data:this.data};await this._expandGroup(groupId,type,config);this.metaData=metaData;this.notify();}
closeGroup(groupId,type){if(this.race.getCurrentProm()){return;}
let groupBys;let expandedGroupBys;let keyPart;let group;let tree;if(type==="row"){groupBys=this.metaData.rowGroupBys;expandedGroupBys=this.metaData.expandedRowGroupBys;tree=this.data.rowGroupTree;group=this._findGroup(this.data.rowGroupTree,groupId[0]);keyPart=0;}else{groupBys=this.metaData.colGroupBys;expandedGroupBys=this.metaData.expandedColGroupBys;tree=this.data.colGroupTree;group=this._findGroup(this.data.colGroupTree,groupId[1]);keyPart=1;}
const groupIdPart=groupId[keyPart];const range=groupIdPart.map((_,index)=>index);function keep(key){const idPart=JSON.parse(key)[keyPart];return(range.some((index)=>groupIdPart[index]!==idPart[index])||idPart.length===groupIdPart.length);}
function omitKeys(object){const newObject={};for(const key in object){if(keep(key)){newObject[key]=object[key];}}
return newObject;}
this.data.measurements=omitKeys(this.data.measurements);this.data.counts=omitKeys(this.data.counts);this.data.groupDomains=omitKeys(this.data.groupDomains);group.directSubTrees.clear();delete group.sortedKeys;var newGroupBysLength=this._getTreeHeight(tree)-1;if(newGroupBysLength<=groupBys.length){expandedGroupBys.splice(0);groupBys.splice(newGroupBysLength);}else{expandedGroupBys.splice(newGroupBysLength-groupBys.length);}
this.notify();}
async expandAll(){const config={metaData:this.metaData,data:this.data};await this._loadData(config,false);this.notify();}
async expandGroup(groupId,type){if(this.race.getCurrentProm()){return;}
const config={metaData:this.metaData,data:this.data};await this._expandGroup(groupId,type,config);this.notify();}
exportData(){const measureCount=this.metaData.activeMeasures.length;const originCount=this.metaData.origins.length;const table=this.getTable();const headers=table.headers;let colGroupHeaderRows;let measureRow=[];let originRow=[];function processHeader(header){const inTotalColumn=header.groupId[1].length===0;return{title:header.title,width:header.width,height:header.height,is_bold:!!header.measure&&inTotalColumn,};}
if(originCount>1){colGroupHeaderRows=headers.slice(0,headers.length-2);measureRow=headers[headers.length-2].map(processHeader);originRow=headers[headers.length-1].map(processHeader);}else{colGroupHeaderRows=headers.slice(0,headers.length-1);measureRow=headers[headers.length-1].map(processHeader);}
colGroupHeaderRows[0].splice(0,1);colGroupHeaderRows=colGroupHeaderRows.map((headerRow)=>{return headerRow.map(processHeader);});const tableRows=table.rows.map((row)=>{return{title:row.title,indent:row.indent,values:row.subGroupMeasurements.map((measurement)=>{let value=measurement.value;if(value===undefined){value="";}else if(measurement.originIndexes.length>1){value=value*100;}
return{is_bold:measurement.isBold,value:value,};}),};});return{model:this.metaData.resModel,title:this.metaData.title,col_group_headers:colGroupHeaderRows,measure_headers:measureRow,origin_headers:originRow,rows:tableRows,measure_count:measureCount,origin_count:originCount,};}
async flip(){await this.race.getCurrentProm();let temp=this.data.rowGroupTree;this.data.rowGroupTree=this.data.colGroupTree;this.data.colGroupTree=temp;temp=this.metaData.rowGroupBys;this.metaData.rowGroupBys=this.metaData.colGroupBys;this.metaData.colGroupBys=temp;temp=this.metaData.expandedColGroupBys;this.metaData.expandedColGroupBys=this.metaData.expandedRowGroupBys;this.metaData.expandedRowGroupBys=temp;function twistKey(key){return JSON.stringify(JSON.parse(key).reverse());}
function twist(object){const newObject={};Object.keys(object).forEach((key)=>{const value=object[key];newObject[twistKey(key)]=value;});return newObject;}
this.data.measurements=twist(this.data.measurements);this.data.counts=twist(this.data.counts);this.data.groupDomains=twist(this.data.groupDomains);this.notify();}
getGroupDomain(group){const config={metaData:this.metaData,data:this.data};return this._getGroupDomain(group,config);}
getTable(){const headers=this._getTableHeaders();return{headers:headers,rows:this._getTableRows(this.data.rowGroupTree,headers[headers.length-1]),};}
getTableWidth(){var leafCounts=this._getLeafCounts(this.data.colGroupTree);return leafCounts[JSON.stringify(this.data.colGroupTree.root.values)]+2;}
hasData(){return this._hasData(this.data);}
async load(searchParams){this.searchParams=searchParams;const processedMeasures=processMeasure(searchParams.context.pivot_measures);const activeMeasures=processedMeasures||this.metaData.activeMeasures;const metaData=this._buildMetaData({activeMeasures});if(!this.reload){metaData.rowGroupBys=searchParams.context.pivot_row_groupby||(searchParams.groupBy.length?searchParams.groupBy:metaData.rowGroupBys);this.reload=true;}else{metaData.rowGroupBys=searchParams.groupBy.length?searchParams.groupBy:searchParams.context.pivot_row_groupby||metaData.rowGroupBys;}
metaData.colGroupBys=searchParams.context.pivot_column_groupby||this.metaData.colGroupBys;if(JSON.stringify(metaData.rowGroupBys)!==JSON.stringify(this.metaData.rowGroupBys)){metaData.expandedRowGroupBys=[];}
if(JSON.stringify(metaData.colGroupBys)!==JSON.stringify(this.metaData.colGroupBys)){metaData.expandedColGroupBys=[];}
const allActivesMeasures=new Set(this.metaData.activeMeasures);if(processedMeasures){processedMeasures.forEach((e)=>allActivesMeasures.add(e));}
metaData.measures=computeReportMeasures(metaData.fields,metaData.fieldAttrs,[...allActivesMeasures,]);const config={metaData,data:this.data};return this._loadData(config);}
sortRows(sortedColumn){if(this.race.getCurrentProm()){return;}
const config={metaData:this.metaData,data:this.data};this._sortRows(sortedColumn,config);this.notify();}
async toggleMeasure(fieldName){const metaData=this._buildMetaData();this.nextActiveMeasures=this.nextActiveMeasures||metaData.activeMeasures;metaData.activeMeasures=this.nextActiveMeasures;const index=metaData.activeMeasures.indexOf(fieldName);if(index!==-1){metaData.activeMeasures.splice(index,1);await Promise.resolve(this.race.getCurrentProm());this.metaData=metaData;}else{metaData.activeMeasures.push(fieldName);const config={metaData,data:this.data};await this._loadData(config);this.useSampleModel=false;}
this.nextActiveMeasures=null;this.notify();}
_addGroup(groupTree,labels,values){let tree=groupTree;values.slice(0,values.length-1).forEach(function(value){tree=tree.directSubTrees.get(value);});const value=values[values.length-1];if(tree.directSubTrees.has(value)){return;}
tree.directSubTrees.set(value,{root:{labels:labels,values:values,},directSubTrees:new Map(),});}
_buildMetaData(params){const metaData=Object.assign({},this.metaData,params);metaData.activeMeasures=[...metaData.activeMeasures];metaData.colGroupBys=[...metaData.colGroupBys];metaData.rowGroupBys=[...metaData.rowGroupBys];metaData.expandedColGroupBys=[...metaData.expandedColGroupBys];metaData.expandedRowGroupBys=[...metaData.expandedRowGroupBys];metaData.customGroupBys=new Map([...metaData.customGroupBys]);metaData.sortedColumn=metaData.sortedColumn?{...metaData.sortedColumn}:null;if(this.searchParams.comparison){const domains=this.searchParams.comparison.domains.slice().reverse();metaData.domains=domains.map((d)=>d.arrayRepr);metaData.origins=domains.map((d)=>d.description);}else{metaData.domains=[this.searchParams.domain];metaData.origins=[""];}
Object.defineProperty(metaData,"fullColGroupBys",{get(){return metaData.colGroupBys.concat(metaData.expandedColGroupBys);},});Object.defineProperty(metaData,"fullRowGroupBys",{get(){return metaData.rowGroupBys.concat(metaData.expandedRowGroupBys);},});return metaData;}
async _expandGroup(groupId,type,config){const{metaData}=config;const group={rowValues:groupId[0],colValues:groupId[1],type:type,};const groupValues=type==="row"?groupId[0]:groupId[1];const groupBys=type==="row"?metaData.fullRowGroupBys:metaData.fullColGroupBys;if(groupValues.length>=groupBys.length){throw new Error("Cannot expand group");}
const groupBy=groupBys[groupValues.length];let leftDivisors;let rightDivisors;if(group.type==="row"){leftDivisors=[[groupBy]];rightDivisors=sections(metaData.fullColGroupBys);}else{leftDivisors=sections(metaData.fullRowGroupBys);rightDivisors=[[groupBy]];}
const divisors=cartesian(leftDivisors,rightDivisors);delete group.type;await this._subdivideGroup(group,divisors,config);}
_findGroup(groupTree,values){let tree=groupTree;values.slice(0,values.length).forEach((value)=>{tree=tree.directSubTrees.get(value);});return tree;}
_getCellValue(groupId,measure,originIndexes,config){var key=JSON.stringify(groupId);if(!config.data.measurements[key]){return;}
var values=originIndexes.map((originIndex)=>{return config.data.measurements[key][originIndex][measure];});if(originIndexes.length>1){return computeVariation(values[1],values[0]);}else{return values[0];}}
_getGroupBySpecs(rowGroupBy,colGroupBy){const set=rowGroupBy.concat(colGroupBy).reduce((acc,gb)=>{acc.add(this._normalize(gb));return acc;},new Set());return[...set];}
_getGroupDomain(group,config){const{data}=config;var key=JSON.stringify([group.rowValues,group.colValues]);return data.groupDomains[key][group.originIndex];}
_getGroupLabels(group,groupBys,config){return groupBys.map((gb)=>{const groupBy=this._normalize(gb);return this._sanitizeLabel(group[groupBy],groupBy,config);});}
async _getGroupSubdivision(group,rowGroupBy,colGroupBy,params){const groupBy=this._getGroupBySpecs(rowGroupBy,colGroupBy);const subGroups=await this._getSubGroups(groupBy,params);return{group,subGroups,rowGroupBy:rowGroupBy,colGroupBy:colGroupBy,};}
_getGroupValues(group,groupBys){return groupBys.map((gb)=>{const groupBy=this._normalize(gb);return this._sanitizeValue(group[groupBy]);});}
_getLeafCounts(tree){const leafCounts={};let leafCount;if(!tree.directSubTrees.size){leafCount=1;}else{leafCount=[...tree.directSubTrees.values()].reduce((acc,subTree)=>{const subLeafCounts=this._getLeafCounts(subTree);Object.assign(leafCounts,subLeafCounts);return acc+leafCounts[JSON.stringify(subTree.root.values)];},0);}
leafCounts[JSON.stringify(tree.root.values)]=leafCount;return leafCounts;}
_getMeasurements(group,config){const{metaData}=config;return metaData.activeMeasures.reduce((measurements,measureName)=>{var measurement=group[measureName];if(measurement instanceof Array){measurement=1;}
if(metaData.measures[measureName].type==="boolean"&&measurement instanceof Boolean){measurement=measurement?1:0;}
if(metaData.origins.length>1&&!measurement){measurement=0;}
measurements[measureName]=measurement;return measurements;},{});}
_getMeasuresRow(columns){const sortedColumn=this.metaData.sortedColumn||{};const measureRow=[];columns.forEach((column)=>{this.metaData.activeMeasures.forEach((measureName)=>{const measureCell={groupId:column.groupId,height:1,measure:measureName,title:this.metaData.measures[measureName].string,width:2*this.metaData.origins.length-1,};if(sortedColumn.measure===measureName&&JSON.stringify(sortedColumn.groupId)===JSON.stringify(column.groupId)){measureCell.order=sortedColumn.order;}
measureRow.push(measureCell);});});return measureRow;}
_getMeasureSpecs(config){const{metaData}=config;return metaData.activeMeasures.reduce((acc,measure)=>{if(measure==="__count"){acc.push(measure);return acc;}
const field=this.metaData.fields[measure];if(field.type==="many2one"){field.aggregator="count_distinct";}
if(field.aggregator===undefined){throw new Error("No aggregate function has been provided for the measure '"+measure+"'");}
acc.push(measure+":"+field.aggregator);return acc;},[]);}
_getNumberedLabel(label,fieldName,config){const{data}=config;const id=label[0];const name=label[1];data.numbering[fieldName]=data.numbering[fieldName]||{};data.numbering[fieldName][name]=data.numbering[fieldName][name]||{};const numbers=data.numbering[fieldName][name];numbers[id]=numbers[id]||Object.keys(numbers).length+1;return name+(numbers[id]>1?"  ("+numbers[id]+")":"");}
_getOriginsRow(columns){const sortedColumn=this.metaData.sortedColumn||{};const originRow=[];columns.forEach((column)=>{const groupId=column.groupId;const measure=column.measure;const isSorted=sortedColumn.measure===measure&&JSON.stringify(sortedColumn.groupId)===JSON.stringify(groupId);const isSortedByOrigin=isSorted&&!sortedColumn.originIndexes[1];const isSortedByVariation=isSorted&&sortedColumn.originIndexes[1];this.metaData.origins.forEach((origin,originIndex)=>{const originCell={groupId:groupId,height:1,measure:measure,originIndexes:[originIndex],title:origin,width:1,};if(isSortedByOrigin&&sortedColumn.originIndexes[0]===originIndex){originCell.order=sortedColumn.order;}
originRow.push(originCell);if(originIndex>0){const variationCell={groupId:groupId,height:1,measure:measure,originIndexes:[originIndex-1,originIndex],title:_t("Variation"),width:1,};if(isSortedByVariation&&sortedColumn.originIndexes[1]===originIndex){variationCell.order=sortedColumn.order;}
originRow.push(variationCell);}});});return originRow;}
async _getSubGroups(groupBy,params){const{resModel,groupDomain,measureSpecs,kwargs,mapping}=params;const key=JSON.stringify(groupBy);if(!mapping[key]){mapping[key]=this.orm.readGroup(resModel,groupDomain,measureSpecs,groupBy,kwargs);}
return mapping[key];}
_getTableHeaders(){const colGroupBys=this.metaData.fullColGroupBys;const height=colGroupBys.length+1;const measureCount=this.metaData.activeMeasures.length;const originCount=this.metaData.origins.length;const leafCounts=this._getLeafCounts(this.data.colGroupTree);let headers=[];const measureColumns=[];const colGroupRows=new Array(height).fill(0).map(()=>[]);colGroupRows[0].push({height:height+1+(originCount>1?1:0),title:"",width:1,});function generateTreeHeaders(tree,fields){const group=tree.root;const rowIndex=group.values.length;const row=colGroupRows[rowIndex];const groupId=[[],group.values];const isLeaf=!tree.directSubTrees.size;const leafCount=leafCounts[JSON.stringify(tree.root.values)];const cell={groupId:groupId,height:isLeaf?colGroupBys.length+1-rowIndex:1,isLeaf:isLeaf,isFolded:isLeaf&&colGroupBys.length>group.values.length,label:rowIndex===0?undefined:fields[colGroupBys[rowIndex-1].split(":")[0]].string,title:group.labels.length?group.labels[group.labels.length-1]:_t("Total"),width:leafCount*measureCount*(2*originCount-1),};row.push(cell);if(isLeaf){measureColumns.push(cell);}
[...tree.directSubTrees.values()].forEach((subTree)=>{generateTreeHeaders(subTree,fields);});}
generateTreeHeaders(this.data.colGroupTree,this.metaData.fields);if(leafCounts[JSON.stringify(this.data.colGroupTree.root.values)]>1){var groupId=[[],[]];var totalTopRightCell={groupId:groupId,height:height,title:"",width:measureCount*(2*originCount-1),};colGroupRows[0].push(totalTopRightCell);measureColumns.push(totalTopRightCell);}
headers=headers.concat(colGroupRows);var measuresRow=this._getMeasuresRow(measureColumns);headers.push(measuresRow);if(originCount>1){headers.push(this._getOriginsRow(measuresRow));}
return headers;}
_getTableRows(tree,columns){let rows=[];const group=tree.root;const rowGroupId=[group.values,[]];const title=group.labels.length?group.labels[group.labels.length-1]:_t("Total");const indent=group.labels.length;const isLeaf=!tree.directSubTrees.size;const rowGroupBys=this.metaData.fullRowGroupBys;const subGroupMeasurements=columns.map((column)=>{const colGroupId=column.groupId;const groupIntersectionId=[rowGroupId[0],colGroupId[1]];const measure=column.measure;const originIndexes=column.originIndexes||[0];const value=this._getCellValue(groupIntersectionId,measure,originIndexes,{data:this.data,});const measurement={groupId:groupIntersectionId,originIndexes:originIndexes,measure:measure,value:value,isBold:!groupIntersectionId[0].length||!groupIntersectionId[1].length,};return measurement;});rows.push({title:title,label:indent===0?undefined:this.metaData.fields[rowGroupBys[indent-1].split(":")[0]].string,groupId:rowGroupId,indent:indent,isLeaf:isLeaf,isFolded:isLeaf&&rowGroupBys.length>group.values.length,subGroupMeasurements:subGroupMeasurements,});const subTreeKeys=tree.sortedKeys||[...tree.directSubTrees.keys()];subTreeKeys.forEach((subTreeKey)=>{const subTree=tree.directSubTrees.get(subTreeKey);rows=rows.concat(this._getTableRows(subTree,columns));});return rows;}
_getTreeHeight(tree){const subTreeHeights=[...tree.directSubTrees.values()].map(this._getTreeHeight.bind(this));return Math.max(0,Math.max.apply(null,subTreeHeights))+1;}
_hasData(data){return(data.counts[JSON.stringify([[],[]])]||[]).some((count)=>{return count>0;});}
async _loadData(config,prune=true){config.data={};const{data,metaData}=config;data.rowGroupTree={root:{labels:[],values:[]},directSubTrees:new Map()};data.colGroupTree={root:{labels:[],values:[]},directSubTrees:new Map()};data.measurements={};data.counts={};data.groupDomains={};data.numbering={};const key=JSON.stringify([[],[]]);data.groupDomains[key]=metaData.domains.slice(0);const group={rowValues:[],colValues:[]};const leftDivisors=sections(metaData.fullRowGroupBys);const rightDivisors=sections(metaData.fullColGroupBys);const divisors=cartesian(leftDivisors,rightDivisors);await this._subdivideGroup(group,divisors.slice(0,1),config);await this._subdivideGroup(group,divisors.slice(1),config);if(prune&&this._hasData(data)&&this._hasData(this.data)){if(symmetricalDifference(metaData.rowGroupBys,this.metaData.rowGroupBys).length===0){this._pruneTree(data.rowGroupTree,this.data.rowGroupTree);}
if(symmetricalDifference(metaData.colGroupBys,this.metaData.colGroupBys).length===0){this._pruneTree(data.colGroupTree,this.data.colGroupTree);}}
this.data=config.data;this.metaData=config.metaData;}
_normalize(gb){const[fieldName,interval]=gb.split(":");const field=this.metaData.fields[fieldName];if(["date","datetime"].includes(field.type)){return`${fieldName}:${interval || "month"}`;}else{return fieldName;}}
_prepareData(group,groupSubdivisions,config){const{data,metaData}=config;const groupRowValues=group.rowValues;let groupRowLabels=[];let rowSubTree=data.rowGroupTree;let root;if(groupRowValues.length){rowSubTree=this._findGroup(data.rowGroupTree,groupRowValues);root=rowSubTree.root;groupRowLabels=root.labels;}
const groupColValues=group.colValues;let groupColLabels=[];if(groupColValues.length){root=this._findGroup(data.colGroupTree,groupColValues).root;groupColLabels=root.labels;}
groupSubdivisions.forEach((groupSubdivision)=>{groupSubdivision.subGroups.forEach((subGroup)=>{const rowValues=groupRowValues.concat(this._getGroupValues(subGroup,groupSubdivision.rowGroupBy));const rowLabels=groupRowLabels.concat(this._getGroupLabels(subGroup,groupSubdivision.rowGroupBy,config));const colValues=groupColValues.concat(this._getGroupValues(subGroup,groupSubdivision.colGroupBy));const colLabels=groupColLabels.concat(this._getGroupLabels(subGroup,groupSubdivision.colGroupBy,config));if(!colValues.length&&rowValues.length){this._addGroup(data.rowGroupTree,rowLabels,rowValues);}
if(colValues.length&&!rowValues.length){this._addGroup(data.colGroupTree,colLabels,colValues);}
const key=JSON.stringify([rowValues,colValues]);const originIndex=groupSubdivision.group.originIndex;if(!(key in data.measurements)){data.measurements[key]=metaData.origins.map(()=>{return this._getMeasurements({},config);});}
data.measurements[key][originIndex]=this._getMeasurements(subGroup,config);if(!(key in data.counts)){data.counts[key]=metaData.origins.map(function(){return 0;});}
data.counts[key][originIndex]=subGroup.__count;if(!(key in data.groupDomains)){data.groupDomains[key]=metaData.origins.map(function(){return Domain.FALSE.toList();});}
if(subGroup.__domain){data.groupDomains[key][originIndex]=subGroup.__domain;}});});if(metaData.sortedColumn){this._sortRows(metaData.sortedColumn,config);}}
_pruneTree(tree,oldTree){if(!oldTree.directSubTrees.size){tree.directSubTrees.clear();delete tree.sortedKeys;return;}
[...tree.directSubTrees.keys()].forEach((subTreeKey)=>{const subTree=tree.directSubTrees.get(subTreeKey);if(!oldTree.directSubTrees.has(subTreeKey)){subTree.directSubTrees.clear();delete subTree.sortedKeys;}else{const oldSubTree=oldTree.directSubTrees.get(subTreeKey);this._pruneTree(subTree,oldSubTree);}});}
_getEmptyGroupLabel(fieldName){return _t("None");}
_sanitizeLabel(value,groupBy,config){const{metaData}=config;const fieldName=groupBy.split(":")[0];if(fieldName&&metaData.fields[fieldName]&&metaData.fields[fieldName].type==="boolean"){return value===undefined?_t("None"):value?_t("Yes"):_t("No");}
if(value===false){return this._getEmptyGroupLabel(fieldName);}
if(value instanceof Array){return this._getNumberedLabel(value,fieldName,config);}
if(fieldName&&metaData.fields[fieldName]&&metaData.fields[fieldName].type==="selection"){const selected=metaData.fields[fieldName].selection.find((o)=>o[0]===value);return selected?selected[1]:value;}
return value;}
_sanitizeValue(value){if(value instanceof Array){return value[0];}
return value;}
async _subdivideGroup(group,divisors,config){const{data,metaData}=config;const key=JSON.stringify([group.rowValues,group.colValues]);const proms=metaData.origins.reduce((acc,origin,originIndex)=>{if(!data.counts[key]||data.counts[key][originIndex]>0){const subGroup={rowValues:group.rowValues,colValues:group.colValues,originIndex:originIndex,};const groupDomain=this._getGroupDomain(subGroup,config);const measureSpecs=this._getMeasureSpecs(config);const resModel=config.metaData.resModel;const kwargs={lazy:false,context:this.searchParams.context};const mapping={};divisors.forEach((divisor)=>{acc.push(this._getGroupSubdivision(subGroup,divisor[0],divisor[1],{resModel,groupDomain,measureSpecs,kwargs,mapping,}));});}
return acc;},[]);const groupSubdivisions=await this.keepLast.add(Promise.all(proms));if(groupSubdivisions.length){this._prepareData(group,groupSubdivisions,config);}}
_sortRows(sortedColumn,config){const metaData=config.metaData||this.metaData;const data=config.data||this.data;const colGroupValues=sortedColumn.groupId[1];sortedColumn.originIndexes=sortedColumn.originIndexes||[0];metaData.sortedColumn=sortedColumn;const sortFunction=(tree)=>{return(subTreeKey)=>{const subTree=tree.directSubTrees.get(subTreeKey);const groupIntersectionId=[subTree.root.values,colGroupValues];const value=this._getCellValue(groupIntersectionId,sortedColumn.measure,sortedColumn.originIndexes,{data})||0;return sortedColumn.order==="asc"?value:-value;};};this._sortTree(sortFunction,data.rowGroupTree);}
_sortTree(sortFunction,tree){tree.sortedKeys=sortBy([...tree.directSubTrees.keys()],sortFunction(tree));[...tree.directSubTrees.values()].forEach((subTree)=>{this._sortTree(sortFunction,subTree);});}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_renderer.js */
odoo.define('@web/views/pivot/pivot_renderer',['@web/core/l10n/translation','@web/core/checkbox/checkbox','@web/core/l10n/localization','@web/core/registry','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web/views/fields/formatters','@web/views/pivot/pivot_header','@odoo/owl','@web/core/network/download','@web/core/utils/hooks','@web/views/view_components/report_view_measures'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{CheckBox}=require("@web/core/checkbox/checkbox");const{localization}=require("@web/core/l10n/localization");const{registry}=require("@web/core/registry");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{formatPercentage}=require("@web/views/fields/formatters");const{PivotHeader}=require("@web/views/pivot/pivot_header");const{Component,onWillUpdateProps,useRef}=require("@odoo/owl");const{download}=require("@web/core/network/download");const{useService}=require("@web/core/utils/hooks");const{ReportViewMeasures}=require("@web/views/view_components/report_view_measures");const formatters=registry.category("formatters");const PivotRenderer=__exports.PivotRenderer=class PivotRenderer extends Component{static template="web.PivotRenderer";static components={Dropdown,DropdownItem,CheckBox,PivotHeader,ReportViewMeasures};static props=["model","buttonTemplate"];setup(){this.actionService=useService("action");this.model=this.props.model;this.table=this.model.getTable();this.l10n=localization;this.tableRef=useRef("table");onWillUpdateProps(this.onWillUpdateProps);}
onWillUpdateProps(){this.table=this.model.getTable();}
getFormattedValue(cell){const field=this.model.metaData.measures[cell.measure];let formatType=this.model.metaData.widgets[cell.measure];if(!formatType){const fieldType=field.type;formatType=["many2one","reference"].includes(fieldType)?"integer":fieldType;}
const formatter=formatters.get(formatType);return formatter(cell.value,field);}
getFormattedVariation(cell){if(isNaN(cell.value)){return"-";}
return formatPercentage(cell.value,this.model.metaData.fields[cell.measure]);}
getHeaderProps({cell,isXAxis=false,isInHead=false}){const type=isXAxis?"col":"row";return{cell,isXAxis,isInHead,customGroupBys:this.model.metaData.customGroupBys,onItemSelected:(payload)=>this.onGroupBySelected(type,payload),onAddCustomGroupBy:(fieldName)=>this.onAddCustomGroupBy(type,cell.groupId,fieldName),onClick:()=>this.onHeaderClick(cell,type),};}
onAddCustomGroupBy(type,groupId,fieldName){this.model.addGroupBy({groupId,fieldName,custom:true,type});}
onGroupBySelected(type,payload){this.model.addGroupBy({...payload,type});}
onHeaderClick(cell,type){if(cell.isLeaf&&cell.isFolded){this.model.expandGroup(cell.groupId,type);}else if(!cell.isLeaf){this.model.closeGroup(cell.groupId,type);}}
onMeasureClick(cell){this.model.sortRows({groupId:cell.groupId,measure:cell.measure,order:(cell.order||"desc")==="asc"?"desc":"asc",originIndexes:cell.originIndexes,});}
onMouseEnter(ev){var index=[...ev.currentTarget.parentNode.children].indexOf(ev.currentTarget);if(ev.currentTarget.tagName==="TH"){if(!ev.currentTarget.classList.contains("o_pivot_origin_row")&&this.model.metaData.origins.length===2){index=3*index;}
index+=1;}
this.tableRef.el.querySelectorAll("td:nth-child("+(index+1)+")").forEach((elt)=>elt.classList.add("o_cell_hover"));}
onMouseLeave(){this.tableRef.el.querySelectorAll(".o_cell_hover").forEach((elt)=>elt.classList.remove("o_cell_hover"));}
onDownloadButtonClicked(){if(this.model.getTableWidth()>16384){throw new Error(_t("For Excel compatibility, data cannot be exported if there are more than 16384 columns.\n\nTip: try to flip axis, filter further or reduce the number of measures."));}
const table=this.model.exportData();download({url:"/web/pivot/export_xlsx",data:{data:JSON.stringify(table)},});}
onExpandButtonClicked(){this.model.expandAll();}
onFlipButtonClicked(){this.model.flip();}
onMeasureSelected({measure}){this.model.toggleMeasure(measure);}
openView(domain,views,context){this.actionService.doAction({type:"ir.actions.act_window",name:this.model.metaData.title,res_model:this.model.metaData.resModel,views:views,view_mode:"list",target:"current",context,domain,});}
onOpenView(cell){if(cell.value===undefined||this.model.metaData.disableLinking){return;}
const context=Object.assign({},this.model.searchParams.context);Object.keys(context).forEach((x)=>{if(x==="group_by"||x.startsWith("search_default_")){delete context[x];}});const{views=[]}=this.env.config;this.views=["list","form"].map((viewType)=>{const view=views.find((view)=>view[1]===viewType);return[view?view[0]:false,viewType];});const group={rowValues:cell.groupId[0],colValues:cell.groupId[1],originIndex:cell.originIndexes[0],};this.openView(this.model.getGroupDomain(group),this.views,context);}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_search_model.js */
odoo.define('@web/views/pivot/pivot_search_model',['@web/search/search_model'],function(require){'use strict';let __exports={};const{SearchModel}=require("@web/search/search_model");const PivotSearchModel=__exports.PivotSearchModel=class PivotSearchModel extends SearchModel{_getIrFilterDescription(){this.preparingIrFilterDescription=true;const result=super._getIrFilterDescription(...arguments);this.preparingIrFilterDescription=false;return result;}
_getSearchItemGroupBys(activeItem){const{searchItemId}=activeItem;const{context,type}=this.searchItems[searchItemId];if(!this.preparingIrFilterDescription&&type==="favorite"&&context.pivot_row_groupby){return context.pivot_row_groupby;}
return super._getSearchItemGroupBys(...arguments);}}
return __exports;});;

/* /web/static/src/views/pivot/pivot_view.js */
odoo.define('@web/views/pivot/pivot_view',['@web/core/l10n/translation','@web/core/registry','@web/views/pivot/pivot_arch_parser','@web/views/pivot/pivot_controller','@web/views/pivot/pivot_model','@web/views/pivot/pivot_renderer','@web/views/pivot/pivot_search_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{registry}=require("@web/core/registry");const{PivotArchParser}=require("@web/views/pivot/pivot_arch_parser");const{PivotController}=require("@web/views/pivot/pivot_controller");const{PivotModel}=require("@web/views/pivot/pivot_model");const{PivotRenderer}=require("@web/views/pivot/pivot_renderer");const{PivotSearchModel}=require("@web/views/pivot/pivot_search_model");const viewRegistry=registry.category("views");const pivotView=__exports.pivotView={type:"pivot",Controller:PivotController,Renderer:PivotRenderer,Model:PivotModel,ArchParser:PivotArchParser,SearchModel:PivotSearchModel,searchMenuTypes:["filter","groupBy","comparison","favorite"],buttonTemplate:"web.PivotView.Buttons",props:(genericProps,view)=>{const modelParams={};if(genericProps.state){modelParams.data=genericProps.state.data;modelParams.metaData=genericProps.state.metaData;}else{const{arch,fields,resModel}=genericProps;const archInfo=new view.ArchParser().parse(arch);if(!archInfo.activeMeasures.length||archInfo.displayQuantity){archInfo.activeMeasures.unshift("__count");}
modelParams.metaData={activeMeasures:archInfo.activeMeasures,colGroupBys:archInfo.colGroupBys,defaultOrder:archInfo.defaultOrder,disableLinking:Boolean(archInfo.disableLinking),fields:fields,fieldAttrs:archInfo.fieldAttrs,resModel:resModel,rowGroupBys:archInfo.rowGroupBys,title:archInfo.title||_t("Untitled"),widgets:archInfo.widgets,};}
return{...genericProps,Model:view.Model,modelParams,Renderer:view.Renderer,buttonTemplate:view.buttonTemplate,};},};viewRegistry.add("pivot",pivotView);return __exports;});;

/* /mail/static/src/views/web/activity/activity_arch_parser.js */
odoo.define('@mail/views/web/activity/activity_arch_parser',['@web/core/utils/xml','@web/views/fields/field'],function(require){'use strict';let __exports={};const{visitXML}=require("@web/core/utils/xml");const{Field}=require("@web/views/fields/field");const ActivityArchParser=__exports.ActivityArchParser=class ActivityArchParser{parse(xmlDoc,models,modelName){const jsClass=xmlDoc.getAttribute("js_class");const title=xmlDoc.getAttribute("string");const fieldNodes={};const templateDocs={};const fieldNextIds={};visitXML(xmlDoc,(node)=>{if(node.hasAttribute("t-name")){templateDocs[node.getAttribute("t-name")]=node;return;}
if(node.tagName==="field"){const fieldInfo=Field.parseFieldNode(node,models,modelName,"activity",jsClass);if(!(fieldInfo.name in fieldNextIds)){fieldNextIds[fieldInfo.name]=0;}
const fieldId=`${fieldInfo.name}_${fieldNextIds[fieldInfo.name]++}`;fieldNodes[fieldId]=fieldInfo;node.setAttribute("field_id",fieldId);}
if(node.tagName==="img"){const attSrc=node.getAttribute("t-att-src");if(attSrc&&/\bactivity_image\b/.test(attSrc)&&!Object.values(fieldNodes).some((f)=>f.name==="write_date")){fieldNodes.write_date_0={name:"write_date",type:"datetime"};}}});return{fieldNodes,templateDocs,title,};}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_cell.js */
odoo.define('@mail/views/web/activity/activity_cell',['@mail/core/web/activity_list_popover','@mail/views/web/fields/avatar/avatar','@odoo/owl','@web/core/popover/popover_hook','@web/core/l10n/dates'],function(require){'use strict';let __exports={};const{ActivityListPopover}=require("@mail/core/web/activity_list_popover");const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{Component,useRef}=require("@odoo/owl");const{usePopover}=require("@web/core/popover/popover_hook");const{formatDate}=require("@web/core/l10n/dates");const ActivityCell=__exports.ActivityCell=class ActivityCell extends Component{static components={Avatar,};static props={activityIds:{type:Array,elements:Number,},attachmentsInfo:{optional:true,type:Object,},activityTypeId:Number,reportingDate:String,countByState:Object,reloadFunc:Function,resId:Number,resModel:String,userAssignedIds:Array,};static template="mail.ActivityCell";setup(){this.popover=usePopover(ActivityListPopover,{position:"bottom-start"});this.contentRef=useRef("content");}
get reportingDateFormatted(){return formatDate(luxon.DateTime.fromISO(this.props.reportingDate));}
get ongoingActivityCount(){return((this.props.countByState?.planned??0)+
(this.props.countByState?.today??0)+
(this.props.countByState?.overdue??0));}
get totalActivityCount(){return this.ongoingActivityCount+(this.props.countByState?.done??0);}
onClick(){if(this.popover.isOpen){this.popover.close();}else{this.popover.open(this.contentRef.el,{activityIds:this.props.activityIds,defaultActivityTypeId:this.props.activityTypeId,onActivityChanged:()=>{this.props.reloadFunc();this.popover.close();},resId:this.props.resId,resModel:this.props.resModel,});}}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_compiler.js */
odoo.define('@mail/views/web/activity/activity_compiler',['@web/core/utils/xml','@web/views/view_compiler','@web/views/utils'],function(require){'use strict';let __exports={};const{createElement,extractAttributes}=require("@web/core/utils/xml");const{toInterpolatedStringExpression,ViewCompiler}=require("@web/views/view_compiler");const{toStringExpression}=require("@web/views/utils");const ActivityCompiler=__exports.ActivityCompiler=class ActivityCompiler extends ViewCompiler{compileField(el,params){let compiled;if(el.hasAttribute("widget")){compiled=super.compileField(el,params);}else{compiled=createElement("div",{"t-out":`record["${el.getAttribute("name")}"].value`,});}
const classNames=[];const{bold,display,muted}=extractAttributes(el,["bold","display","muted"]);if(display==="right"){classNames.push("float-end");}
if(display==="full"){classNames.push("d-block","text-truncate");}else{classNames.push("d-inline-block");}
if(bold){classNames.push("fw-bold");}
if(muted){classNames.push("text-muted");}
if(classNames.length>0){const clsFormatted=el.hasAttribute("widget")?toStringExpression(classNames.join(" ")):classNames.join(" ");compiled.setAttribute("class",clsFormatted);}
const attrs={};for(const attr of el.attributes){attrs[attr.name]=attr.value;}
if(el.hasAttribute("widget")){const attrsParts=Object.entries(attrs).map(([key,value])=>{if(key.startsWith("t-attf-")){key=key.slice(7);value=toInterpolatedStringExpression(value);}else if(key.startsWith("t-att-")){key=key.slice(6);value=`"" + (${value})`;}else if(key.startsWith("t-att")){throw new Error("t-att on <field> nodes is not supported");}else if(!key.startsWith("t-")){value=toStringExpression(value);}
return`'${key}':${value}`;});compiled.setAttribute("attrs",`{${attrsParts.join(",")}}`);}
for(const attr in attrs){if(attr.startsWith("t-")&&!attr.startsWith("t-att")){compiled.setAttribute(attr,attrs[attr]);}}
return compiled;}}
ActivityCompiler.OWL_DIRECTIVE_WHITELIST=[...ViewCompiler.OWL_DIRECTIVE_WHITELIST,"t-name","t-esc","t-out","t-set","t-value","t-if","t-else","t-elif","t-foreach","t-as","t-key","t-att.*","t-call","t-translation",];return __exports;});;

/* /mail/static/src/views/web/activity/activity_controller.js */
odoo.define('@mail/views/web/activity/activity_controller',['@web/core/l10n/translation','@odoo/owl','@web/core/utils/hooks','@web/model/model','@web/model/relational_model/utils','@web/search/cog_menu/cog_menu','@web/search/layout','@web/search/search_bar/search_bar','@web/search/pager_hook','@web/views/standard_view_props','@web/views/view_dialogs/select_create_dialog'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Component,useState}=require("@odoo/owl");const{useService}=require("@web/core/utils/hooks");const{useModel}=require("@web/model/model");const{extractFieldsFromArchInfo}=require("@web/model/relational_model/utils");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Layout}=require("@web/search/layout");const{SearchBar}=require("@web/search/search_bar/search_bar");const{usePager}=require("@web/search/pager_hook");const{standardViewProps}=require("@web/views/standard_view_props");const{SelectCreateDialog}=require("@web/views/view_dialogs/select_create_dialog");const ActivityController=__exports.ActivityController=class ActivityController extends Component{static components={Layout,SearchBar,CogMenu};static props={...standardViewProps,Model:Function,Renderer:Function,archInfo:Object,};static template="mail.ActivityController";setup(){this.model=useState(useModel(this.props.Model,this.modelParams));this.dialog=useService("dialog");this.action=useService("action");this.store=useService("mail.store");this.ui=useState(useService("ui"));usePager(()=>{const{count,hasLimitedCount,limit,offset}=this.model.root;return{offset:offset,limit:limit,total:count,onUpdate:async(params)=>{params.domain=[...(this.model.originalDomain||[]),["activity_ids.active","in",[true,false]]];await Promise.all([this.model.root.load(params),this.model.fetchActivityData(params),]);},updateTotal:hasLimitedCount?()=>this.model.root.fetchCount():undefined,};});}
get modelParams(){const{archInfo,resModel}=this.props;const{activeFields,fields}=extractFieldsFromArchInfo(archInfo,this.props.fields);return{config:{activeFields,resModel,fields,},};}
getSearchProps(){const{comparision,context,domain,groupBy,orderBy}=this.env.searchModel;return{comparision,context,domain,groupBy,orderBy};}
scheduleActivity(){this.dialog.add(SelectCreateDialog,{resModel:this.props.resModel,searchViewId:this.env.searchModel.searchViewId,domain:this.model.originalDomain,title:_t("Search: %s",this.props.archInfo.title),multiSelect:false,context:this.props.context,onSelected:async(resIds)=>{await this.store.scheduleActivity(this.props.resModel,resIds);this.model.load(this.getSearchProps());},});}
openActivityFormView(resId,activityTypeId){this.action.doAction({type:"ir.actions.act_window",res_model:"mail.activity",views:[[false,"form"]],view_mode:"form",view_type:"form",res_id:false,target:"new",context:{default_res_id:resId,default_res_model:this.props.resModel,default_activity_type_id:activityTypeId,},},{onClose:()=>this.model.load(this.getSearchProps()),});}
sendMailTemplate(templateID,activityTypeID){const groupedActivities=this.model.activityData.grouped_activities;const resIds=[];for(const resId in groupedActivities){const activityByType=groupedActivities[resId];const activity=activityByType[activityTypeID];if(activity){resIds.push(parseInt(resId));}}
this.model.orm.call(this.props.resModel,"activity_send_mail",[resIds,templateID],{});}
async openRecord(record,mode){const activeIds=this.model.root.records.map((datapoint)=>datapoint.resId);this.props.selectRecord(record.resId,{activeIds,mode});}
get rendererProps(){return{activityTypes:this.model.activityData.activity_types,activityResIds:this.model.activityData.activity_res_ids,fields:this.model.root.fields,records:this.model.root.records,resModel:this.props.resModel,archInfo:this.props.archInfo,groupedActivities:this.model.activityData.grouped_activities,scheduleActivity:this.scheduleActivity.bind(this),onReloadData:()=>this.model.load(this.getSearchProps()),onEmptyCell:this.openActivityFormView.bind(this),onSendMailTemplate:this.sendMailTemplate.bind(this),openRecord:this.openRecord.bind(this),};}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_model.js */
odoo.define('@mail/views/web/activity/activity_model',['@web/model/relational_model/relational_model'],function(require){'use strict';let __exports={};const{RelationalModel}=require("@web/model/relational_model/relational_model");const ActivityModel=__exports.ActivityModel=class ActivityModel extends RelationalModel{static DEFAULT_LIMIT=100;async load(params={}){this.originalDomain=params.domain?[...params.domain]:[];params.domain=[...(params.domain||[]),["activity_ids.active","in",[true,false]]];if(params&&"groupBy"in params){params.groupBy=[];}
await Promise.all([this.fetchActivityData(params),super.load(params)]);}
async fetchActivityData(params){this.activityData=await this.orm.call("mail.activity","get_activity_data",[],{res_model:this.config.resModel,domain:params.domain||this.env.searchModel._domain,limit:params.limit||this.initialLimit,offset:params.offset||0,fetch_done:true,});}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_record.js */
odoo.define('@mail/views/web/activity/activity_record',['@mail/views/web/activity/activity_compiler','@odoo/owl','@web/core/py_js/py','@web/core/user','@web/views/fields/field','@web/views/kanban/kanban_record','@web/views/view_compiler'],function(require){'use strict';let __exports={};const{ActivityCompiler}=require("@mail/views/web/activity/activity_compiler");const{Component}=require("@odoo/owl");const{evaluateBooleanExpr}=require("@web/core/py_js/py");const{user}=require("@web/core/user");const{Field}=require("@web/views/fields/field");const{getFormattedRecord,getImageSrcFromRecordInfo,isHtmlEmpty,}=require("@web/views/kanban/kanban_record");const{useViewCompiler}=require("@web/views/view_compiler");const ActivityRecord=__exports.ActivityRecord=class ActivityRecord extends Component{static components={Field,};static props={archInfo:{type:Object},openRecord:{type:Function},record:{type:Object},};static template="mail.ActivityRecord";setup(){this.evaluateBooleanExpr=evaluateBooleanExpr;this.widget={deletable:false,editable:false,isHtmlEmpty,};const{templateDocs}=this.props.archInfo;const templates=useViewCompiler(ActivityCompiler,templateDocs);this.recordTemplate=templates["activity-box"];}
getRenderingContext(){const{record}=this.props;return{record:getFormattedRecord(record),activity_image:(...args)=>getImageSrcFromRecordInfo(record,...args),user_context:user.context,widget:this.widget,luxon,__comp__:Object.assign(Object.create(this),{this:this}),};}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_renderer.js */
odoo.define('@mail/views/web/activity/activity_renderer',['@mail/core/web/mail_column_progress','@mail/views/web/activity/activity_cell','@mail/views/web/activity/activity_record','@odoo/owl','@web/core/browser/browser','@web/core/checkbox/checkbox','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web/core/l10n/translation'],function(require){'use strict';let __exports={};const{MailColumnProgress}=require("@mail/core/web/mail_column_progress");const{ActivityCell}=require("@mail/views/web/activity/activity_cell");const{ActivityRecord}=require("@mail/views/web/activity/activity_record");const{Component,useState}=require("@odoo/owl");const{browser}=require("@web/core/browser/browser");const{CheckBox}=require("@web/core/checkbox/checkbox");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{_t}=require("@web/core/l10n/translation");const ActivityRenderer=__exports.ActivityRenderer=class ActivityRenderer extends Component{static components={ActivityCell,ActivityRecord,ColumnProgress:MailColumnProgress,Dropdown,DropdownItem,CheckBox,};static props={activityTypes:{type:Object},activityResIds:{type:Array},fields:{type:Object},resModel:{type:String},records:{type:Array},archInfo:{type:Object},groupedActivities:{type:Object},scheduleActivity:{type:Function},onReloadData:{type:Function},onEmptyCell:{type:Function},onSendMailTemplate:{type:Function},openRecord:{type:Function},};static template="mail.ActivityRenderer";setup(){this.activeFilter=useState({progressValue:{active:null,},activityTypeId:null,resIds:new Set(Object.keys(this.props.groupedActivities)),});this.storageKey=["activity_columns",this.props.resModel,this.env.config.viewId];this.setupStorageActiveColumns();}
getGroupInfo(activityType){const types={done:{color:"secondary",inProgressBar:false,label:_t("done"),value:0,},planned:{color:"success",inProgressBar:true,value:0,},today:{color:"warning",inProgressBar:true,value:0,},overdue:{color:"danger",inProgressBar:true,value:0,},};for(const[type,label]of this.props.fields.activity_state.selection){types[type].label=label;}
const typeId=activityType.id;const isColumnFiltered=this.activeFilter.activityTypeId===activityType.id;const progressValue=isColumnFiltered?this.activeFilter.progressValue:{active:null};let totalCountWithoutDone=0;for(const activities of Object.values(this.props.groupedActivities)){if(typeId in activities){for(const[state,stateCount]of Object.entries(activities[typeId].count_by_state)){types[state].value+=stateCount;if(state!=="done"){totalCountWithoutDone+=stateCount;}}}}
const progressBar={bars:[],activeBar:isColumnFiltered?this.activeFilter.progressValue.active:null,};for(const[value,count]of Object.entries(types)){if(count.inProgressBar){progressBar.bars.push({count:count.value,value,string:types[value].label,color:count.color,});}}
const ongoingActivityCount=types.overdue.value+types.today.value+types.planned.value;const ongoingAndDoneCount=ongoingActivityCount+types.done.value;const labelAggregate=`${types.overdue.label} + ${types.today.label} + ${types.planned.label}`;const aggregateOn=ongoingAndDoneCount&&this.isTypeDisplayDone(typeId)?{title:`${types.done.label} + ${labelAggregate}`,value:ongoingAndDoneCount,}:undefined;return{aggregate:{title:labelAggregate,value:isColumnFiltered?types[progressValue.active].value:ongoingActivityCount,},aggregateOn:aggregateOn,data:{count:totalCountWithoutDone,filterProgressValue:(name)=>this.onSetProgressBarState(typeId,name),progressBar,progressValue,},};}
getRecord(resId){return this.props.records.find((r)=>r.resId===resId);}
isTypeDisplayDone(typeId){return this.props.activityTypes.find((a)=>a.id===typeId).keep_done;}
onSetProgressBarState(typeId,bar){const name=bar.value;if(this.activeFilter.progressValue.active===name){this.activeFilter.progressValue.active=null;this.activeFilter.activityTypeId=null;this.activeFilter.resIds=new Set(Object.keys(this.props.groupedActivities));}else{this.activeFilter.progressValue.active=name;this.activeFilter.activityTypeId=typeId;this.activeFilter.resIds=new Set(Object.entries(this.props.groupedActivities).filter(([,resIds])=>typeId in resIds&&name in resIds[typeId].count_by_state).map(([key])=>parseInt(key)));}}
get activeColumns(){return this.props.activityTypes.filter((activityType)=>this.storageActiveColumns[activityType.id]);}
setupStorageActiveColumns(){const storageActiveColumnsList=browser.localStorage.getItem(this.storageKey)?.split(",");this.storageActiveColumns=useState({});for(const activityType of this.props.activityTypes){if(storageActiveColumnsList){this.storageActiveColumns[activityType.id]=storageActiveColumnsList.includes(activityType.id.toString());}else{this.storageActiveColumns[activityType.id]=true;}}}
toggleDisplayColumn(typeId){this.storageActiveColumns[typeId]=!this.storageActiveColumns[typeId];browser.localStorage.setItem(this.storageKey.join(","),Object.keys(this.storageActiveColumns).filter((activityType)=>this.storageActiveColumns[activityType]));}}
return __exports;});;

/* /mail/static/src/views/web/activity/activity_view.js */
odoo.define('@mail/views/web/activity/activity_view',['@mail/views/web/activity/activity_arch_parser','@mail/views/web/activity/activity_controller','@mail/views/web/activity/activity_model','@mail/views/web/activity/activity_renderer','@web/core/registry'],function(require){'use strict';let __exports={};const{ActivityArchParser}=require("@mail/views/web/activity/activity_arch_parser");const{ActivityController}=require("@mail/views/web/activity/activity_controller");const{ActivityModel}=require("@mail/views/web/activity/activity_model");const{ActivityRenderer}=require("@mail/views/web/activity/activity_renderer");const{registry}=require("@web/core/registry");const activityView=__exports.activityView={type:"activity",searchMenuTypes:["filter","favorite"],Controller:ActivityController,Renderer:ActivityRenderer,ArchParser:ActivityArchParser,Model:ActivityModel,props:(genericProps,view)=>{const{arch,relatedModels,resModel}=genericProps;const archInfo=new view.ArchParser().parse(arch,relatedModels,resModel);return{...genericProps,archInfo,Model:view.Model,Renderer:view.Renderer,};},};registry.category("views").add("activity",activityView);return __exports;});;

/* /hr/static/src/views/hr_graph_view.js */
odoo.define('@hr/views/hr_graph_view',['@web/core/registry','@web/views/graph/graph_view','@web/views/graph/graph_controller','@hr/views/hr_action_helper'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{graphView}=require("@web/views/graph/graph_view");const{GraphController}=require("@web/views/graph/graph_controller");const{HrActionHelper}=require("@hr/views/hr_action_helper");const HrGraphController=__exports.HrGraphController=class HrGraphController extends GraphController{static template="hr.GraphView";static components={...GraphController.components,HrActionHelper};}
const HrGraphView=__exports.HrGraphView={...graphView,Controller:HrGraphController,};registry.category("views").add("hr_graph_view",HrGraphView);return __exports;});;

/* /hr/static/src/views/hr_pivot_view.js */
odoo.define('@hr/views/hr_pivot_view',['@web/core/registry','@web/views/pivot/pivot_view','@web/views/pivot/pivot_controller','@hr/views/hr_action_helper'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{pivotView}=require("@web/views/pivot/pivot_view");const{PivotController}=require("@web/views/pivot/pivot_controller");const{HrActionHelper}=require("@hr/views/hr_action_helper");const HrPivotController=__exports.HrPivotController=class HrPivotController extends PivotController{static template="hr.PivotView";static components={...PivotController.components,HrActionHelper};}
const HrPivotView=__exports.HrPivotView={...pivotView,Controller:HrPivotController,};registry.category("views").add("hr_pivot_view",HrPivotView);return __exports;});;

/* /project/static/src/views/project_task_graph/project_task_graph_model.js */
odoo.define('@project/views/project_task_graph/project_task_graph_model',['@web/views/graph/graph_model','@web/core/l10n/translation'],function(require){'use strict';let __exports={};const{GraphModel}=require("@web/views/graph/graph_model");const{_t}=require("@web/core/l10n/translation");const ProjectTaskGraphModel=__exports.ProjectTaskGraphModel=class ProjectTaskGraphModel extends GraphModel{_getDefaultFilterLabel(field){if(field.fieldName==="project_id"){return _t("🔒 Private");}
return super._getDefaultFilterLabel(field);}}
return __exports;});;

/* /project/static/src/views/project_task_graph/project_task_graph_view.js */
odoo.define('@project/views/project_task_graph/project_task_graph_view',['@web/core/registry','@web/views/graph/graph_view','@project/views/project_task_graph/project_task_graph_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{graphView}=require("@web/views/graph/graph_view");const{ProjectTaskGraphModel}=require("@project/views/project_task_graph/project_task_graph_model");const viewRegistry=registry.category("views");const projectTaskGraphView=__exports.projectTaskGraphView={...graphView,Model:ProjectTaskGraphModel,};viewRegistry.add("project_task_graph",projectTaskGraphView);return __exports;});;

/* /project/static/src/views/project_task_pivot/project_pivot_model.js */
odoo.define('@project/views/project_task_pivot/project_pivot_model',['@web/core/l10n/translation','@web/views/pivot/pivot_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{PivotModel}=require("@web/views/pivot/pivot_model");const ProjectTaskPivotModel=__exports.ProjectTaskPivotModel=class ProjectTaskPivotModel extends PivotModel{_getEmptyGroupLabel(fieldName){if(fieldName==="project_id"){return _t("Private");}else if(fieldName==="user_ids"){return _t("Unassigned");}else{return super._getEmptyGroupLabel(fieldName);}}}
return __exports;});;

/* /project/static/src/views/project_task_pivot/project_pivot_view.js */
odoo.define('@project/views/project_task_pivot/project_pivot_view',['@web/core/registry','@web/views/pivot/pivot_view','@project/views/project_task_pivot/project_pivot_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{pivotView}=require("@web/views/pivot/pivot_view");const{ProjectTaskPivotModel}=require("@project/views/project_task_pivot/project_pivot_model");const projectPivotView=__exports.projectPivotView={...pivotView,Model:ProjectTaskPivotModel,};registry.category("views").add("project_pivot",projectPivotView);return __exports;});;

/* /project/static/src/views/burndown_chart/burndown_chart_model.js */
odoo.define('@project/views/burndown_chart/burndown_chart_model',['@web/core/l10n/translation','@web/views/graph/graph_model','@web/core/utils/arrays'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{GraphModel}=require("@web/views/graph/graph_model");const{sortBy}=require("@web/core/utils/arrays");const BurndownChartModel=__exports.BurndownChartModel=class BurndownChartModel extends GraphModel{setup(params){super.setup(params);this.stageSeqAndNamePerId={};}
async _fetchStageInfo(context){const searchDomain=!context.active_id||!context.default_project_id?[]:[["project_ids","in",context.active_id]];const data=await this.orm.webSearchRead("project.task.type",searchDomain,{specification:{name:{},sequence:{},},});const stageSeqAndNamePerId={};for(const{id,name,sequence}of data.records){stageSeqAndNamePerId[id]={name,sequence};}
return stageSeqAndNamePerId;}
async load(searchParams){const{context,groupBy}=searchParams;if(groupBy.includes("stage_id")){if(context.stage_name_and_sequence_per_id&&context.default_project_id){this.stageSeqAndNamePerId=context.stage_name_and_sequence_per_id;}else{this.stageSeqAndNamePerId=await this._fetchStageInfo(context);}}else{this.stageSeqAndNamePerId={};}
await super.load(searchParams);}
_prepareData(){super._prepareData();const{groupBy}=this.searchParams;const{mode}=this.metaData;if(mode==="line"&&groupBy.includes("stage_id")){this.data.datasets=sortBy(this.data.datasets,(dataSet)=>{const firstIdentifier=[...dataSet.identifiers][0];const group=Object.assign(...JSON.parse(firstIdentifier));const val=group.stage_id;if(Array.isArray(val)){return this.stageSeqAndNamePerId[val[0]]?.sequence||-1;}
return-1;});}}
async _loadDataPoints(metaData){metaData.measures.__count.string=_t("# of Tasks");return super._loadDataPoints(metaData);}}
return __exports;});;

/* /project/static/src/views/burndown_chart/burndown_chart_search_model.js */
odoo.define('@project/views/burndown_chart/burndown_chart_search_model',['@web/core/l10n/translation','@web/core/utils/hooks','@web/search/search_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{useService}=require("@web/core/utils/hooks");const{SearchModel}=require("@web/search/search_model");const BurndownChartSearchModel=__exports.BurndownChartSearchModel=class BurndownChartSearchModel extends SearchModel{setup(services){this.notificationService=useService("notification");super.setup(...arguments);}
async load(config){await super.load(...arguments);for(const searchItem of Object.values(this.searchItems)){if(['dateGroupBy','groupBy'].includes(searchItem.type)){if(this.stageIdSearchItemId&&this.dateSearchItemId&&this.isClosedSearchItemId){return;}
switch(searchItem.fieldName){case'date':this.dateSearchItemId=searchItem.id;break;case'stage_id':this.stageIdSearchItemId=searchItem.id;break;case'is_closed':this.isClosedSearchItemId=searchItem.id;break;}}}}
deactivateGroup(groupId){if(this.searchItems[this.dateSearchItemId].groupId==groupId){if(this.query.some(queryElem=>[this.stageIdSearchItemId,this.isClosedSearchItemId].includes(queryElem.searchItemId))){this._addGroupByNotification(_t("The report should be grouped either by \"Stage\" to represent a Burndown Chart or by \"Is Closed\" to represent a Burn-up chart. Without one of these groupings applied, the report will not provide relevant information."));}
return;}
super.deactivateGroup(groupId);}
toggleDateGroupBy(searchItemId,intervalId){if(searchItemId===this.dateSearchItemId){let filtered_query=[];let triggerNotification=false;for(const queryElem of this.query){if(queryElem.searchItemId!==searchItemId){filtered_query.push(queryElem);}else if(queryElem.intervalId===intervalId){triggerNotification=true;}}
if(filtered_query.length!==this.query.length){this.query=filtered_query;if(triggerNotification){this._addGroupByNotification(_t("The Burndown Chart must be grouped by Date"));}}}
super.toggleDateGroupBy(...arguments);}
toggleSearchItem(searchItemId){if(searchItemId===this.isClosedSearchItemId){super.toggleSearchItem(this.stageIdSearchItemId);}else if(searchItemId===this.stageIdSearchItemId){super.toggleSearchItem(this.isClosedSearchItemId);}
super.toggleSearchItem(...arguments);}
_addGroupByNotification(body){this.notificationService.add(body,{type:"danger"});}
async _notify(){let stageIdIndex=-1;let dateIndex=-1;let isClosedIndex=-1;for(const[index,queryElem]of this.query.entries()){if(dateIndex!==-1&&(stageIdIndex!==-1||isClosedIndex!==-1)){break;}
switch(queryElem.searchItemId){case this.dateSearchItemId:dateIndex=index;break;case this.stageIdSearchItemId:stageIdIndex=index;break;case this.isClosedSearchItemId:isClosedIndex=index;break;}}
if(isClosedIndex>0){if(isClosedIndex>dateIndex){dateIndex+=1;}
this.query.splice(0,0,this.query.splice(stageIdIndex,1)[0]);}else if(stageIdIndex>0){if(stageIdIndex>dateIndex){dateIndex+=1;}
this.query.splice(0,0,this.query.splice(stageIdIndex,1)[0]);}
if(dateIndex>0){this.query.splice(0,0,this.query.splice(dateIndex,1)[0]);}
await super._notify(...arguments);}}
return __exports;});;

/* /project/static/src/views/burndown_chart/burndown_chart_view.js */
odoo.define('@project/views/burndown_chart/burndown_chart_view',['@project/views/burndown_chart/burndown_chart_model','@web/views/graph/graph_view','@web/core/registry','@project/views/burndown_chart/burndown_chart_search_model'],function(require){'use strict';let __exports={};const{BurndownChartModel}=require("@project/views/burndown_chart/burndown_chart_model");const{graphView}=require("@web/views/graph/graph_view");const{registry}=require("@web/core/registry");const{BurndownChartSearchModel}=require("@project/views/burndown_chart/burndown_chart_search_model");const viewRegistry=registry.category("views");const burndownChartGraphView={...graphView,buttonTemplate:"project.BurndownChartView.Buttons",hideCustomGroupBy:true,Model:BurndownChartModel,searchMenuTypes:graphView.searchMenuTypes.filter(menuType=>menuType!=="comparison"),SearchModel:BurndownChartSearchModel,};viewRegistry.add("burndown_chart",burndownChartGraphView);return __exports;});;

/* /web_gantt/static/src/gantt_arch_parser.js */
odoo.define('@web_gantt/gantt_arch_parser',['@web/core/l10n/dates','@web/core/l10n/translation','@web/core/py_js/py','@web/core/utils/strings','@web/core/utils/xml','@web/views/utils'],function(require){'use strict';let __exports={};const{getLocalWeekNumber}=require("@web/core/l10n/dates");const{_t}=require("@web/core/l10n/translation");const{evaluateExpr}=require("@web/core/py_js/py");const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const{getActiveActions}=require("@web/views/utils");const DECORATIONS=["decoration-danger","decoration-info","decoration-secondary","decoration-success","decoration-warning",];const PARTS={full:1,half:2,quarter:4};const SCALES={day:{cellPrecisions:{full:60,half:30,quarter:15},defaultPrecision:"full",time:"minute",unitDescription:_t("minutes"),interval:"hour",minimalColumnWidth:40,unit:"day",groupHeaderFormatter:(date)=>date.toFormat("dd MMMM yyyy"),defaultRange:{unit:"day",count:3},},week:{cellPrecisions:{full:24,half:12},defaultPrecision:"half",time:"hour",unitDescription:_t("hours"),interval:"day",minimalColumnWidth:192,colHeaderFormatter:(date)=>date.toFormat("dd"),unit:"week",groupHeaderFormatter:(date)=>date.toFormat(`'W${getLocalWeekNumber(date)}' yyyy`),defaultRange:{unit:"week",count:3},},week_2:{cellPrecisions:{full:24,half:12},defaultPrecision:"half",time:"hour",unitDescription:_t("hours"),interval:"day",minimalColumnWidth:96,colHeaderFormatter:(date)=>date.toFormat("dd"),unit:"week",groupHeaderFormatter:(date)=>date.toFormat(`'W${getLocalWeekNumber(date)}' yyyy`),defaultRange:{unit:"week",count:6},},month:{cellPrecisions:{full:24,half:12},defaultPrecision:"half",time:"hour",unitDescription:_t("hours"),interval:"day",minimalColumnWidth:50,colHeaderFormatter:(date)=>date.toFormat("dd"),unit:"month",groupHeaderFormatter:(date,env)=>date.toFormat(env.isSmall?"MMM yyyy":"MMMM yyyy"),defaultRange:{unit:"month",count:3},},month_3:{cellPrecisions:{full:24,half:12},defaultPrecision:"half",time:"hour",unitDescription:_t("hours"),interval:"day",minimalColumnWidth:18,colHeaderFormatter:(date)=>date.toFormat("dd"),unit:"month",groupHeaderFormatter:(date,env)=>date.toFormat(env.isSmall?"MMM yyyy":"MMMM yyyy"),defaultRange:{unit:"month",count:6},},year:{cellPrecisions:{full:1},defaultPrecision:"full",time:"month",unitDescription:_t("months"),interval:"month",minimalColumnWidth:60,colHeaderFormatter:(date,env)=>date.toFormat(env.isSmall?"MMM":"MMMM"),unit:"year",groupHeaderFormatter:(date)=>date.toFormat("yyyy"),defaultRange:{unit:"year",count:1},},};function getPreferedScaleId(scaleId,scales){if(scaleId in scales){return scaleId;}
const scaleIds=Object.keys(SCALES);const index=scaleIds.findIndex((id)=>id===scaleId);for(let j=index-1;j>=0;j--){const id=scaleIds[j];if(id in scales){return id;}}
for(let j=index+1;j<scaleIds.length;j++){const id=scaleIds[j];if(id in scales){return id;}}}
const RANGES={day:{scaleId:"day",description:_t("Today")},week:{scaleId:"week",description:_t("This week")},month:{scaleId:"month",description:_t("This month")},quarter:{scaleId:"month_3",description:_t("This quarter")},year:{scaleId:"year",description:_t("This year")},};const GanttArchParser=__exports.GanttArchParser=class GanttArchParser{parse(arch){let infoFromRootNode;const decorationFields=[];const popoverArchParams={displayGenericButtons:true,bodyTemplate:null,footerTemplate:null,};visitXML(arch,(node)=>{switch(node.tagName){case"gantt":{infoFromRootNode=getInfoFromRootNode(node);break;}
case"field":{const fieldName=node.getAttribute("name");decorationFields.push(fieldName);break;}
case"templates":{const body=node.querySelector("[t-name=gantt-popover]")||null;if(body){popoverArchParams.bodyTemplate=body.cloneNode(true);popoverArchParams.bodyTemplate.removeAttribute("t-name");const footer=popoverArchParams.bodyTemplate.querySelector("footer");if(footer){popoverArchParams.displayGenericButtons=false;footer.remove();const footerTemplate=new Document().createElement("t");footerTemplate.append(...footer.children);popoverArchParams.footerTemplate=footerTemplate;const replace=footer.getAttribute("replace");if(replace&&!exprToBoolean(replace)){popoverArchParams.displayGenericButtons=true;}}}}}});return{...infoFromRootNode,decorationFields,popoverArchParams,};}}
function getInfoFromRootNode(rootNode){const attrs={};for(const{name,value}of rootNode.attributes){attrs[name]=value;}
const{create:canCreate,delete:canDelete,edit:canEdit}=getActiveActions(rootNode);const canCellCreate=exprToBoolean(attrs.cell_create,true)&&canCreate;const canPlan=exprToBoolean(attrs.plan,true)&&canEdit;let consolidationMaxField;let consolidationMaxValue;const consolidationMax=attrs.consolidation_max?evaluateExpr(attrs.consolidation_max):{};if(Object.keys(consolidationMax).length>0){consolidationMaxField=Object.keys(consolidationMax)[0];consolidationMaxValue=consolidationMax[consolidationMaxField];}
const consolidationParams={excludeField:attrs.consolidation_exclude,field:attrs.consolidation,maxField:consolidationMaxField,maxValue:consolidationMaxValue,};const dependencyField=attrs.dependency_field||null;const dependencyEnabled=!!dependencyField;const dependencyInvertedField=attrs.dependency_inverted_field||null;const allowedScales=[];if(attrs.scales){for(const key of attrs.scales.split(",")){if(SCALES[key]){allowedScales.push(key);}}}
if(allowedScales.length===0){allowedScales.push(...Object.keys(SCALES));}
const cellPrecisions={};const precisionAttrs=attrs.precision?evaluateExpr(attrs.precision):{};for(const scaleId in SCALES){if(precisionAttrs[scaleId]){const precision=precisionAttrs[scaleId].split(":");if(precision[1]&&Object.keys(SCALES[scaleId].cellPrecisions).includes(precision[1])){cellPrecisions[scaleId]=precision[1];}}
cellPrecisions[scaleId]||=SCALES[scaleId].defaultPrecision;}
const scales={};for(const scaleId of allowedScales){const precision=cellPrecisions[scaleId];const referenceScale=SCALES[scaleId];scales[scaleId]={...referenceScale,cellPart:PARTS[precision],cellTime:referenceScale.cellPrecisions[precision],id:scaleId,unitDescription:referenceScale.unitDescription.toString(),};delete scales[scaleId].cellPrecisions;}
const ranges={};for(const rangeId in RANGES){const referenceRange=RANGES[rangeId];ranges[rangeId]={...referenceRange,id:rangeId,scaleId:getPreferedScaleId(referenceRange.scaleId,scales),description:referenceRange.description.toString(),};}
let pillDecorations=null;for(const decoration of DECORATIONS){if(decoration in attrs){if(!pillDecorations){pillDecorations={};}
pillDecorations[decoration]=attrs[decoration];}}
return{canCellCreate,canCreate,canDelete,canEdit,canPlan,colorField:attrs.color,computePillDisplayName:!!attrs.pill_label,consolidationParams,createAction:attrs.on_create||null,dateStartField:attrs.date_start,dateStopField:attrs.date_stop,defaultGroupBy:attrs.default_group_by?attrs.default_group_by.split(","):[],defaultRange:attrs.default_range,defaultScale:attrs.default_scale||"month",dependencyEnabled,dependencyField,dependencyInvertedField,disableDrag:exprToBoolean(attrs.disable_drag_drop),displayMode:attrs.display_mode||"dense",displayTotalRow:exprToBoolean(attrs.total_row),displayUnavailability:exprToBoolean(attrs.display_unavailability),formViewId:attrs.form_view_id?parseInt(attrs.form_view_id,10):false,offset:attrs.offset,pagerLimit:attrs.groups_limit?parseInt(attrs.groups_limit,10):null,pillDecorations,progressBarFields:attrs.progress_bar?attrs.progress_bar.split(","):null,progressField:attrs.progress||null,ranges,scales,string:attrs.string||_t("Gantt View").toString(),thumbnails:attrs.thumbnails?evaluateExpr(attrs.thumbnails):{},};}
return __exports;});;

/* /web_gantt/static/src/gantt_compiler.js */
odoo.define('@web_gantt/gantt_compiler',['@web/views/view_compiler'],function(require){'use strict';let __exports={};const{ViewCompiler}=require("@web/views/view_compiler");const GanttCompiler=__exports.GanttCompiler=class GanttCompiler extends ViewCompiler{}
GanttCompiler.OWL_DIRECTIVE_WHITELIST=[...ViewCompiler.OWL_DIRECTIVE_WHITELIST,"t-name","t-esc","t-out","t-set","t-value","t-if","t-else","t-elif","t-foreach","t-as","t-key","t-att.*","t-call","t-translation",];return __exports;});;

/* /web_gantt/static/src/gantt_connector.js */
odoo.define('@web_gantt/gantt_connector',['@odoo/owl'],function(require){'use strict';let __exports={};const{Component,onWillRender,useEffect,useRef}=require("@odoo/owl");__exports.getStrokeAndHoveredStrokeColor=getStrokeAndHoveredStrokeColor;function getStrokeAndHoveredStrokeColor(r,g,b){return{color:`rgba(${r},${g},${b},0.5)`,highlightedColor:`rgba(${r},${g},${b},1)`,};}
const COLORS=__exports.COLORS={default:getStrokeAndHoveredStrokeColor(143,143,143),error:getStrokeAndHoveredStrokeColor(211,65,59),warning:getStrokeAndHoveredStrokeColor(236,151,31),outline:getStrokeAndHoveredStrokeColor(255,255,255),};const GanttConnector=__exports.GanttConnector=class GanttConnector extends Component{static props={reactive:{type:Object,shape:{id:String,alert:{type:[{value:"error"},{value:"warning"},{value:null}],optional:true,},highlighted:{type:Boolean,optional:true},displayButtons:{type:Boolean,optional:true},sourcePoint:[{value:null},Function,{type:Object,shape:{left:Number,top:Number}},],targetPoint:[{value:null},Function,{type:Object,shape:{left:Number,top:Number}},],},},onLeftButtonClick:{type:Function,optional:true},onRemoveButtonClick:{type:Function,optional:true},onRightButtonClick:{type:Function,optional:true},};static defaultProps={highlighted:false,displayButtons:false,};static template="web_gantt.GanttConnector";rootRef=useRef("root");style={hoverEaseWidth:10,slackness:0.9,stroke:{width:2},outlineStroke:{width:1},};get alert(){return this.props.reactive.alert;}
get displayButtons(){return this.props.reactive.displayButtons;}
get highlighted(){return this.props.reactive.highlighted;}
get id(){return this.props.reactive.id;}
get isNew(){return this.id.endsWith("new");}
get sourcePoint(){return this.props.reactive.sourcePoint;}
get targetPoint(){return this.props.reactive.targetPoint;}
setup(){onWillRender(this.onWillRender);useEffect((el,sourceLeft,sourceTop,targetLeft,targetTop)=>{if(!el){return;}
const{sourceControlPoint,targetControlPoint,removeButtonPosition}=this.getPathInfo({left:sourceLeft,top:sourceTop},{left:targetLeft,top:targetTop},this.style.slackness);const drawingCommands=[`M`,`${sourceLeft},${sourceTop}`,`C`,`${sourceControlPoint.left},${sourceControlPoint.top}`,`${targetControlPoint.left},${targetControlPoint.top}`,`${targetLeft},${targetTop}`,].join(" ");const paths=el.querySelectorAll(".o_connector_stroke, .o_connector_stroke_hover_ease");for(const path of paths){path.setAttribute("d",drawingCommands);}
const svgButtons=el.querySelector(".o_connector_stroke_buttons");if(svgButtons){svgButtons.setAttribute("x",removeButtonPosition.left-24);svgButtons.setAttribute("y",removeButtonPosition.top-8);}},()=>this.getEffectDependencies());}
computeStyle({alert,highlighted}){const key=highlighted?"highlightedColor":"color";const strokeType=alert||"default";this.style={hoverEaseWidth:10,slackness:0.9,stroke:{color:COLORS[strokeType][key],width:2,},outlineStroke:{color:COLORS.outline[key],width:1,},};}
getEffectDependencies(){let sourcePoint=this.sourcePoint||{left:0,top:0};if(typeof sourcePoint==="function"){sourcePoint=sourcePoint();}
let targetPoint=this.targetPoint||{left:0,top:0};if(typeof targetPoint==="function"){targetPoint=targetPoint();}
const{x,y}=this.rootRef.el?.getBoundingClientRect()||{x:0,y:0};return[this.rootRef.el,sourcePoint.left-x,sourcePoint.top-y,targetPoint.left-x,targetPoint.top-y,this.displayButtons,];}
getLinearInterpolation(startingPoint,endingPoint,lambda=0.5){return{left:lambda*startingPoint.left+(1-lambda)*endingPoint.left,top:lambda*startingPoint.top+(1-lambda)*endingPoint.top,};}
getPathInfo(sourcePoint,targetPoint,slackness){const xDelta=targetPoint.left-sourcePoint.left;const yDelta=targetPoint.top-sourcePoint.top;const directionFactor=Math.sign(xDelta);const xInc=100+(Math.abs(xDelta)*slackness)/10;const yInc=Math.abs(yDelta)<16&&directionFactor===-1?15-0.001*xDelta*slackness:0;const b={left:sourcePoint.left+xInc,top:sourcePoint.top+yInc,};const c={left:targetPoint.left+(this.isNew&&directionFactor===-1?xInc:-xInc),top:targetPoint.top+yInc,};const e=this.getLinearInterpolation(sourcePoint,b);const f=this.getLinearInterpolation(b,c);const g=this.getLinearInterpolation(c,targetPoint);const h=this.getLinearInterpolation(e,f);const i=this.getLinearInterpolation(f,g);const j=this.getLinearInterpolation(h,i);return{sourceControlPoint:b,targetControlPoint:c,removeButtonPosition:j,};}
onLeftButtonClick(){if(this.props.onLeftButtonClick){this.props.onLeftButtonClick();}}
onRemoveButtonClick(){if(this.props.onRemoveButtonClick){this.props.onRemoveButtonClick();}}
onRightButtonClick(){if(this.props.onRightButtonClick){this.props.onRightButtonClick();}}
onWillRender(){const key=this.highlighted?"highlightedColor":"color";this.style.stroke.color=COLORS[this.alert||"default"][key];this.style.outlineStroke.color=COLORS.outline[key];}}
return __exports;});;

/* /web_gantt/static/src/gantt_controller.js */
odoo.define('@web_gantt/gantt_controller',['@web/core/l10n/translation','@odoo/owl','@web/core/confirmation_dialog/confirmation_dialog','@web/views/view_dialogs/form_view_dialog','@web/search/layout','@web/views/standard_view_props','@web/model/model','@web/search/pager_hook','@web/core/utils/hooks','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/search/cog_menu/cog_menu','@web/search/action_hook'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Component,onWillUnmount,useEffect,useRef,useSubEnv}=require("@odoo/owl");const{ConfirmationDialog}=require("@web/core/confirmation_dialog/confirmation_dialog");const{FormViewDialog}=require("@web/views/view_dialogs/form_view_dialog");const{Layout}=require("@web/search/layout");const{standardViewProps}=require("@web/views/standard_view_props");const{useModelWithSampleData}=require("@web/model/model");const{usePager}=require("@web/search/pager_hook");const{useService}=require("@web/core/utils/hooks");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{CallbackRecorder,useSetupAction}=require("@web/search/action_hook");const GanttController=__exports.GanttController=class GanttController extends Component{static components={CogMenu,Layout,SearchBar,};static props={...standardViewProps,Model:Function,Renderer:Function,buttonTemplate:String,modelParams:Object,scrollPosition:{type:Object,optional:true},};static template="web_gantt.GanttController";setup(){this.actionService=useService("action");this.dialogService=useService("dialog");this.orm=useService("orm");useSubEnv({getCurrentFocusDateCallBackRecorder:new CallbackRecorder(),});const rootRef=useRef("root");this.model=useModelWithSampleData(this.props.Model,this.props.modelParams);useSetupAction({rootRef,getLocalState:()=>{return{metaData:this.model.metaData,displayParams:this.model.displayParams};},});onWillUnmount(()=>this.closeDialog?.());usePager(()=>{const{groupedBy,pagerLimit,pagerOffset}=this.model.metaData;const{count}=this.model.data;if(pagerLimit!==null&&groupedBy.length){return{offset:pagerOffset,limit:pagerLimit,total:count,onUpdate:async({offset,limit})=>{await this.model.updatePagerParams({offset,limit});},};}});useEffect((showNoContentHelp)=>{if(showNoContentHelp){const realRows=[...rootRef.el.querySelectorAll(".o_gantt_row_header:not(.o_sample_data_disabled)"),];const headerContainerWidth=rootRef.el.querySelector(".o_gantt_header_groups").clientHeight+
rootRef.el.querySelector(".o_gantt_header_columns").clientHeight;const offset=realRows.reduce((current,el)=>current+el.clientHeight,headerContainerWidth);const noContentHelperEl=rootRef.el.querySelector(".o_view_nocontent");noContentHelperEl.style.top=`${offset}px`;}},()=>[this.showNoContentHelp]);this.searchBarToggler=useSearchBarToggler();}
get className(){if(this.env.isSmall){const classList=(this.props.className||"").split(" ");classList.push("o_action_delegate_scroll");return classList.join(" ");}
return this.props.className;}
get showNoContentHelp(){return this.model.useSampleModel;}
create(context){const{createAction}=this.model.metaData;if(createAction){this.actionService.doAction(createAction,{additionalContext:context,onClose:()=>{this.model.fetchData();},});}else{this.openDialog({context});}}
openDialog(props,options={}){const{canDelete,canEdit,resModel,formViewId:viewId}=this.model.metaData;const title=props.title||(props.resId?_t("Open"):_t("Create"));let removeRecord;if(canDelete&&props.resId){removeRecord=()=>{return new Promise((resolve)=>{this.dialogService.add(ConfirmationDialog,{body:_t("Are you sure to delete this record?"),confirm:async()=>{await this.orm.unlink(resModel,[props.resId]);resolve();},cancel:()=>{},});});};}
this.closeDialog=this.dialogService.add(FormViewDialog,{title,resModel,viewId,resId:props.resId,size:props.size,mode:canEdit?"edit":"readonly",context:props.context,removeRecord,},{...options,onClose:()=>{this.closeDialog=null;this.model.fetchData();},});}
onAddClicked(){const{scale}=this.model.metaData;const focusDate=this.getCurrentFocusDate();const start=focusDate.startOf(scale.unit);const stop=focusDate.endOf(scale.unit).plus({millisecond:1});const context=this.model.getDialogContext({start,stop,withDefault:true});this.create(context);}
getCurrentFocusDate(){const{callbacks}=this.env.getCurrentFocusDateCallBackRecorder;if(callbacks.length){return callbacks[0]();}
return this.model.metaData.focusDate;}}
return __exports;});;

/* /web_gantt/static/src/gantt_helpers.js */
odoo.define('@web_gantt/gantt_helpers',['@odoo/owl','@web/core/l10n/dates','@web/core/popover/popover_hook','@web/core/utils/draggable_hook_builder_owl','@web/core/utils/hooks','@web/core/utils/numbers','@web/core/utils/objects','@web_gantt/gantt_popover_in_dialog'],function(require){'use strict';let __exports={};const{onWillUnmount,status,useComponent,useEffect,useEnv}=require("@odoo/owl");const{getEndOfLocalWeek,getStartOfLocalWeek}=require("@web/core/l10n/dates");const{makePopover,usePopover}=require("@web/core/popover/popover_hook");const{makeDraggableHook}=require("@web/core/utils/draggable_hook_builder_owl");const{useService}=require("@web/core/utils/hooks");const{clamp}=require("@web/core/utils/numbers");const{pick}=require("@web/core/utils/objects");const{GanttPopoverInDialog}=require("@web_gantt/gantt_popover_in_dialog");function closest(target,values){return values.reduce((prev,val)=>(Math.abs(val-target)<Math.abs(prev-target)?val:prev),Infinity);}
__exports.dateAddFixedOffset=dateAddFixedOffset;function dateAddFixedOffset(date,plusParams){const shouldApplyOffset=Object.keys(plusParams).some((key)=>/^(hour|minute|second)s?$/i.test(key));const result=date.plus(plusParams);if(shouldApplyOffset){const initialOffset=date.offset;const diff=initialOffset-result.offset;if(diff){const adjusted=result.plus({minute:diff});return adjusted.offset===initialOffset?result:adjusted;}}
return result;}
__exports.diffColumn=diffColumn;function diffColumn(col1,col2,unit){return col2.diff(col1,unit).values[`${unit}s`];}
__exports.getRangeFromDate=getRangeFromDate;function getRangeFromDate(rangeId,date){const startDate=localStartOf(date,rangeId);const stopDate=startDate.plus({[rangeId]:1}).minus({day:1});return{focusDate:date,startDate,stopDate,rangeId};}
__exports.localStartOf=localStartOf;function localStartOf(date,unit){return unit==="week"?getStartOfLocalWeek(date):date.startOf(unit);}
__exports.localEndOf=localEndOf;function localEndOf(date,unit){return unit==="week"?getEndOfLocalWeek(date):date.endOf(unit);}
__exports.getCellColor=getCellColor;function getCellColor(cellPart,subSlotUnavailabilities,isToday){const sum=subSlotUnavailabilities.reduce((acc,d)=>acc+d);if(!sum){return null;}
switch(cellPart){case sum:{return`background-color:${getCellPartColor(sum, isToday)}`;}
case 2:{const[c0,c1]=subSlotUnavailabilities.map((d)=>getCellPartColor(d,isToday));return`background:linear-gradient(90deg,${c0}49%,${c1}50%)`;}
case 4:{const[c0,c1,c2,c3]=subSlotUnavailabilities.map((d)=>getCellPartColor(d,isToday));return`background:linear-gradient(90deg,${c0}24%,${c1}25%,${c1}49%,${c2}50%,${c2}74%,${c3}75%)`;}}}
__exports.getCellPartColor=getCellPartColor;function getCellPartColor(availability,isToday){if(availability){return"var(--Gantt__DayOff-background-color)";}else if(isToday){return"var(--Gantt__DayOffToday-background-color)";}else{return"var(--Gantt__Day-background-color)";}}
__exports.getColorIndex=getColorIndex;function getColorIndex(value){if(typeof value==="number"){return Math.round(value)%NB_GANTT_RECORD_COLORS;}else if(Array.isArray(value)){return value[0]%NB_GANTT_RECORD_COLORS;}
return 0;}
__exports.getIntersection=getIntersection;function getIntersection(interval,otherInterval){const[start,end]=interval;const[otherStart,otherEnd]=otherInterval;return[start>=otherStart?start:otherStart,end<=otherEnd?end:otherEnd];}
__exports.getUnionOfIntersections=getUnionOfIntersections;function getUnionOfIntersections(interval,intervals){const[start,end]=interval;const intersecting=intervals.filter((otherInterval)=>{const[otheStart,otherEnd]=otherInterval;return otherEnd>start&&end>otheStart;});const len=intersecting.length;if(len===0){return[];}
const union=[];const first=getIntersection(interval,intersecting[0]);union.push(first);if(len>=2){const last=getIntersection(interval,intersecting[len-1]);union.push(...intersecting.slice(1,len-1),last);}
return union;}
__exports.useMultiHover=useMultiHover;function useMultiHover({ref,selector,related,className}){const findSiblings=(el)=>ref.el.querySelectorAll(related.map((attr)=>`[${attr}='${el.getAttribute(attr).replace(/'/g, "\\'")}']`).join(""));const onPointerEnter=(ev)=>{for(const sibling of findSiblings(ev.target)){sibling.classList.add(...classList);classedEls.add(sibling);}};const onPointerLeave=(ev)=>{for(const sibling of findSiblings(ev.target)){sibling.classList.remove(...classList);classedEls.delete(sibling);}};const classList=className.split(/\s+/g);const classedEls=new Set();useEffect((...targets)=>{if(targets.length){for(const target of targets){target.addEventListener("pointerenter",onPointerEnter);target.addEventListener("pointerleave",onPointerLeave);}
return()=>{for(const el of classedEls){el.classList.remove(...classList);}
classedEls.clear();for(const target of targets){target.removeEventListener("pointerenter",onPointerEnter);target.removeEventListener("pointerleave",onPointerLeave);}};}},()=>[...ref.el.querySelectorAll(selector)]);}
const NB_GANTT_RECORD_COLORS=12;function getElementCenter(el){const{x,y,width,height}=el.getBoundingClientRect();return{x:x+width/2,y:y+height/2,};}
const HANDLE_CLASS_START="o_handle_start";const HANDLE_CLASS_END="o_handle_end";const handles={start:document.createElement("div"),end:document.createElement("div"),};const useGanttConnectorDraggable=__exports.useGanttConnectorDraggable=makeDraggableHook({name:"useGanttConnectorDraggable",acceptedParams:{parentWrapper:[String],},onComputeParams({ctx,params}){ctx.parentWrapper=params.parentWrapper;ctx.followCursor=false;},onDragStart:({ctx,addStyle})=>{const{current}=ctx;const parent=current.element.closest(ctx.parentWrapper);if(!parent){return;}
for(const otherParent of ctx.ref.el.querySelectorAll(ctx.parentWrapper)){if(otherParent!==parent){addStyle(otherParent,{pointerEvents:"auto"});}}
return{sourcePill:parent,...current.connectorCenter};},onDrag:({ctx})=>{ctx.current.connectorCenter=getElementCenter(ctx.current.element);return pick(ctx.current,"connectorCenter");},onDragEnd:({ctx})=>pick(ctx.current,"element"),onDrop:({ctx,target})=>{const{current}=ctx;const parent=current.element.closest(ctx.parentWrapper);const targetParent=target.closest(ctx.parentWrapper);if(!targetParent||targetParent===parent){return;}
return{target:targetParent};},onWillStartDrag:({ctx})=>{ctx.current.connectorCenter=getElementCenter(ctx.current.element);},});function getCoordinate(style,name){return+style.getPropertyValue(name).slice(1);}
function getColumnStart(style){return getCoordinate(style,"grid-column-start");}
function getColumnEnd(style){return getCoordinate(style,"grid-column-end");}
const useGanttDraggable=__exports.useGanttDraggable=makeDraggableHook({name:"useGanttDraggable",acceptedParams:{cells:[String,Function],cellDragClassName:[String,Function],ghostClassName:[String,Function],hoveredCell:[Object],addStickyCoordinates:[Function],},onComputeParams({ctx,params}){ctx.cellSelector=params.cells;ctx.ghostClassName=params.ghostClassName;ctx.cellDragClassName=params.cellDragClassName;ctx.hoveredCell=params.hoveredCell;ctx.addStickyCoordinates=params.addStickyCoordinates;},onDragStart({ctx}){const{current,ghostClassName}=ctx;current.element.before(current.placeHolder);if(ghostClassName){current.placeHolder.classList.add(ghostClassName);}
return{pill:current.element};},onDrag({ctx,addStyle}){const{cellSelector,current,hoveredCell}=ctx;let{el:cell,part}=hoveredCell;const isDifferentCell=cell!==current.cell.el;const isDifferentPart=part!==current.cell.part;if(cell&&!cell.matches(cellSelector)){cell=null;}
current.cell.el=cell;current.cell.part=part;if(cell){if(isDifferentCell){const style=getComputedStyle(cell);current.cell.gridRow=style.getPropertyValue("grid-row");current.cell.gridColumnStart=getColumnStart(style)+current.gridColumnOffset;}
if(isDifferentCell||isDifferentPart){const{pillSpan}=current;const{gridRow,gridColumnStart:start}=current.cell;const gridColumnStart=clamp(start+part,1,current.maxGridColumnStart);const gridColumnEnd=gridColumnStart+pillSpan;addStyle(current.cellGhost,{gridRow,gridColumn:`c${gridColumnStart} / c${gridColumnEnd}`,});const[gridRowStart,gridRowEnd]=/r(\d+) \/ r(\d+)/g.exec(gridRow).slice(1);ctx.addStickyCoordinates([gridRowStart,gridRowEnd],[gridColumnStart,gridColumnEnd]);current.cell.col=gridColumnStart;}}else{current.cell.col=null;}
if(isDifferentCell){if(cell){cell.after(current.cellGhost);}else{current.cellGhost.remove();}}
return{pill:current.element};},onDragEnd({ctx}){return{pill:ctx.current.element};},onDrop({ctx}){const{cell,element,initialCol}=ctx.current;if(cell.col!==null){return{pill:element,cell:cell.el,diff:cell.col-initialCol,};}},onWillStartDrag({ctx,addCleanup,addClass}){const{current}=ctx;const{el:cell,part}=ctx.hoveredCell;current.placeHolder=current.element.cloneNode(true);current.cellGhost=document.createElement("div");current.cellGhost.className=ctx.cellDragClassName;current.cell={el:null,index:null,part:0};const gridStyle=getComputedStyle(cell.parentElement);const pillStyle=getComputedStyle(current.element);const cellStyle=getComputedStyle(cell);const gridTemplateColumns=gridStyle.getPropertyValue("grid-template-columns");const pGridColumnStart=getColumnStart(pillStyle);const pGridColumnEnd=getColumnEnd(pillStyle);const cGridColumnStart=getColumnStart(cellStyle)+part;let highestGridCol;for(const e of gridTemplateColumns.split(/\s+/).reverse()){const res=/\[c(\d+)\]/g.exec(e);if(res){highestGridCol=+res[1];break;}}
const pillSpan=pGridColumnEnd-pGridColumnStart;current.initialCol=pGridColumnStart;current.maxGridColumnStart=highestGridCol-pillSpan;current.gridColumnOffset=pGridColumnStart-cGridColumnStart;current.pillSpan=pillSpan;addClass(ctx.ref.el,"pe-auto");addCleanup(()=>{current.placeHolder.remove();current.cellGhost.remove();});},});const useGanttUndraggable=__exports.useGanttUndraggable=makeDraggableHook({name:"useGanttUndraggable",onDragStart({ctx}){return{pill:ctx.current.element};},onDragEnd({ctx}){return{pill:ctx.current.element};},onWillStartDrag({ctx,addCleanup,addClass,addStyle,getRect}){const{x,y,width,height}=getRect(ctx.current.element);ctx.current.container=document.createElement("div");addClass(ctx.ref.el,"pe-auto");addStyle(ctx.current.container,{position:"fixed",left:`${x}px`,top:`${y}px`,width:`${width}px`,height:`${height}px`,});ctx.current.element.after(ctx.current.container);addCleanup(()=>ctx.current.container.remove());},});const useGanttResizable=__exports.useGanttResizable=makeDraggableHook({name:"useGanttResizable",requiredParams:["handles"],acceptedParams:{innerPills:[String,Function],handles:[String,Function],hoveredCell:[Object],rtl:[Boolean,Function],cells:[String,Function],precision:[Number,Function],showHandles:[Function],},onComputeParams({ctx,params,addCleanup,addEffectCleanup,getRect}){const onElementPointerEnter=(ev)=>{if(ctx.dragging||ctx.willDrag){return;}
const pill=ev.target;const innerPill=pill.querySelector(params.innerPills);const pillRect=getRect(innerPill);for(const el of Object.values(handles)){el.style.height=`${pillRect.height}px`;}
const showHandles=params.showHandles?params.showHandles(pill):{};if("start"in showHandles&&!showHandles.start){handles.start.remove();}else{innerPill.appendChild(handles.start);}
if("end"in showHandles&&!showHandles.end){handles.end.remove();}else{innerPill.appendChild(handles.end);}};const onElementPointerLeave=()=>{const remove=()=>Object.values(handles).forEach((h)=>h.remove());if(ctx.dragging||ctx.current.element){addCleanup(remove);}else{remove();}};ctx.cellSelector=params.cells;ctx.hoveredCell=params.hoveredCell;ctx.precision=params.precision;ctx.rtl=params.rtl;for(const el of ctx.ref.el.querySelectorAll(params.elements)){el.addEventListener("pointerenter",onElementPointerEnter);el.addEventListener("pointerleave",onElementPointerLeave);addEffectCleanup(()=>{el.removeEventListener("pointerenter",onElementPointerEnter);el.removeEventListener("pointerleave",onElementPointerLeave);});}
handles.start.className=`${params.handles} ${HANDLE_CLASS_START}`;handles.start.style.cursor=`${params.rtl ? "e" : "w"}-resize`;handles.end.className=`${params.handles} ${HANDLE_CLASS_END}`;handles.end.style.cursor=`${params.rtl ? "w" : "e"}-resize`;ctx.pillSelector=ctx.elementSelector;ctx.fullSelector=ctx.elementSelector=`.${params.handles}`;ctx.followCursor=false;},onDragStart({ctx,addStyle}){addStyle(ctx.current.pill,{zIndex:15});return{pill:ctx.current.pill};},onDrag({ctx,addStyle,getRect}){const{cellSelector,current,hoveredCell,pointer,precision,rtl,ref}=ctx;let{el:cell,part}=hoveredCell;const point=[pointer.x,current.initialPosition.y];if(!cell){let rect;cell=document.elementsFromPoint(...point).find((el)=>el.matches(cellSelector));if(!cell){const cells=Array.from(ref.el.querySelectorAll(".o_gantt_cells .o_gantt_cell"));if(pointer.x<current.initialPosition.x){cell=rtl?cells.at(-1):cells[0];}else{cell=rtl?cells[0]:cells.at(-1);}
rect=getRect(cell);point[0]=rtl?rect.right-1:rect.left+1;}else{rect=getRect(cell);}
const x=Math.floor(rect.x);const width=Math.floor(rect.width);part=Math.floor((point[0]-x)/(width/precision));}
const cellStyle=getComputedStyle(cell);const cGridColStart=getColumnStart(cellStyle);const{x,width}=getRect(cell);const coef=((rtl?-1:1)*width)/precision;const startBorder=(rtl?x+width:x)+part*coef;const endBorder=startBorder+coef;const theClosest=closest(point[0],[startBorder,endBorder]);let diff=cGridColStart+
part+
(theClosest===startBorder?0:1)-
(current.isStart?current.firstCol:current.lastCol);if(diff===current.lastDiff){return;}
if(current.isStart){diff=Math.min(diff,current.initialDiff-1);addStyle(current.pill,{"grid-column-start":`c${current.firstCol + diff}`});}else{diff=Math.max(diff,1-current.initialDiff);addStyle(current.pill,{"grid-column-end":`c${current.lastCol + diff}`});}
current.lastDiff=diff;const isLeftHandle=rtl?!current.isStart:current.isStart;const grabbedHandle=isLeftHandle?"left":"right";diff=current.isStart?-diff:diff;return{pill:current.pill,grabbedHandle,diff};},onDragEnd({ctx}){const{current,pillSelector}=ctx;const pill=current.element.closest(pillSelector);return{pill};},onDrop({ctx}){const{current}=ctx;if(!current.lastDiff){return;}
const direction=current.isStart?"start":"end";return{pill:current.pill,diff:current.lastDiff,direction};},onWillStartDrag({ctx,addClass}){const{current,pillSelector}=ctx;const pill=ctx.current.element.closest(pillSelector);current.pill=pill;const pillStyle=getComputedStyle(pill);current.firstCol=getColumnStart(pillStyle);current.lastCol=getColumnEnd(pillStyle);current.initialDiff=current.lastCol-current.firstCol;ctx.cursor=getComputedStyle(current.element).cursor;current.isStart=current.element.classList.contains(HANDLE_CLASS_START);addClass(ctx.ref.el,"pe-auto");},});function getCellsOnRow(refEl,rowId){return refEl.querySelectorAll(`.o_gantt_cell:not(.o_gantt_group)[data-row-id='${CSS.escape(rowId)}']`);}
function getMinMax(a,b){return a<=b?[a,b]:[b,a];}
const useGanttSelectable=__exports.useGanttSelectable=makeDraggableHook({name:"useGanttSelectable",acceptedParams:{hoveredCell:[Object],rtl:[Boolean,Function],},onComputeParams({ctx,params}){ctx.followCursor=false;ctx.hoveredCell=params.hoveredCell;ctx.rtl=params.rtl;},onDrag({ctx,addClass,getRect,removeClass}){const{current,hoveredCell,pointer,ref,rtl}=ctx;let{el:cell}=hoveredCell;if(!cell){const point=[pointer.x,current.initialPosition.y];cell=document.elementsFromPoint(...point).find((el)=>el.matches(".o_gantt_cell"));if(!cell){const cells=Array.from(ref.el.querySelectorAll(".o_gantt_cells .o_gantt_cell"));if(pointer.x<current.initialPosition.x){cell=rtl?cells.at(-1):cells[0];}else{cell=rtl?cells[0]:cells.at(-1);}}}
const col=+cell.dataset.col;const lastSelectedCol=current.lastSelectedCol;current.lastSelectedCol=col;if(lastSelectedCol===col){return;}
const[startCol,stopCol]=getMinMax(current.initialCol,col);for(const cell of getCellsOnRow(ref.el,current.rowId)){const cellCol=+cell.dataset.col;if(cellCol<startCol||cellCol>stopCol){removeClass(cell,"o_drag_hover");}else{addClass(cell,"o_drag_hover");}}},onDrop({ctx}){const{current}=ctx;const{rowId,initialCol,lastSelectedCol}=current;const[startCol,stopCol]=getMinMax(initialCol,lastSelectedCol);return{rowId,startCol,stopCol};},onWillStartDrag({ctx,addClass}){const{current,hoveredCell,ref}=ctx;const{el:cell}=hoveredCell;current.rowId=cell.dataset.rowId;current.initialCol=+cell.dataset.col;addClass(ref.el,"pe-auto");addClass(cell,"pe-auto");},});__exports.useGanttResponsivePopover=useGanttResponsivePopover;function useGanttResponsivePopover(dialogTitle,component,options={}){const dialogService=useService("dialog");const env=useEnv();const owner=useComponent();const popover=usePopover(component,options);const onClose=()=>{if(status(owner)!=="destroyed"){options.onClose?.();}};const dialogAddFn=(_,comp,props,options)=>dialogService.add(comp,props,options);const popoverInDialog=makePopover(dialogAddFn,GanttPopoverInDialog,{onClose});const ganttReponsivePopover={open:(target,props)=>{if(env.isSmall){popoverInDialog.open(target,{component:component,componentProps:props,dialogTitle,});}else{popover.open(target,props);}},close:()=>{popover.close();popoverInDialog.close();},get isOpen(){return popover.isOpen||popoverInDialog.isOpen;},};onWillUnmount(ganttReponsivePopover.close);return ganttReponsivePopover;}
return __exports;});;

/* /web_gantt/static/src/gantt_mock_server.js */
odoo.define('@web_gantt/gantt_mock_server',['@web/core/registry'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");function _mockGetGanttData(_,{model,kwargs}){const lazy=!kwargs.limit&&!kwargs.offset&&kwargs.groupby.length===1;const{groups,length}=this.mockWebReadGroup(model,{...kwargs,lazy,fields:["__record_ids:array_agg(id)"],});const recordIds=[];for(const group of groups){recordIds.push(...(group.__record_ids||[]));}
const{records}=this.mockWebSearchReadUnity(model,[],{domain:[["id","in",recordIds]],context:kwargs.context,specification:kwargs.read_specification,});const unavailabilities={};for(const fieldName of kwargs.unavailability_fields||[]){unavailabilities[fieldName]={};}
const progress_bars={};for(const fieldName of kwargs.progress_bar_fields||[]){progress_bars[fieldName]={};}
return{groups,length,records,unavailabilities,progress_bars};}
registry.category("mock_server").add("get_gantt_data",_mockGetGanttData);return __exports;});;

/* /web_gantt/static/src/gantt_model.js */
odoo.define('@web_gantt/gantt_model',['@web/core/browser/browser','@web/core/domain','@web/core/l10n/translation','@web/core/l10n/dates','@web/core/orm_service','@web/core/registry','@web/core/utils/arrays','@web/core/utils/concurrency','@web/core/utils/objects','@web/core/utils/strings','@web/model/model','@web/views/fields/formatters','@web_gantt/gantt_helpers'],function(require){'use strict';let __exports={};const{browser}=require("@web/core/browser/browser");const{Domain}=require("@web/core/domain");const{_t}=require("@web/core/l10n/translation");const{deserializeDate,deserializeDateTime,serializeDate,serializeDateTime,}=require("@web/core/l10n/dates");const{x2ManyCommands}=require("@web/core/orm_service");const{registry}=require("@web/core/registry");const{groupBy,unique}=require("@web/core/utils/arrays");const{KeepLast,Mutex}=require("@web/core/utils/concurrency");const{pick}=require("@web/core/utils/objects");const{sprintf}=require("@web/core/utils/strings");const{Model}=require("@web/model/model");const{formatFloatTime,formatPercentage}=require("@web/views/fields/formatters");const{getRangeFromDate,localStartOf}=require("@web_gantt/gantt_helpers");const{DateTime}=luxon;function firstColumnBefore(date,unit){return localStartOf(date,unit);}
function firstColumnAfter(date,unit){const start=localStartOf(date,unit);if(date.equals(start)){return date;}
return start.plus({[unit]:1});}
__exports.parseServerValues=parseServerValues;function parseServerValues(fields,values){const parsedValues={};if(!values){return parsedValues;}
for(const fieldName in values){const field=fields[fieldName];const value=values[fieldName];switch(field.type){case"date":{parsedValues[fieldName]=value?deserializeDate(value):false;break;}
case"datetime":{parsedValues[fieldName]=value?deserializeDateTime(value):false;break;}
case"selection":{if(value===false){const hasKey0=field.selection.some((option)=>option[0]===0);parsedValues[fieldName]=hasKey0?0:value;}else{parsedValues[fieldName]=value;}
break;}
case"many2one":{parsedValues[fieldName]=value?[value.id,value.display_name]:false;break;}
default:{parsedValues[fieldName]=value;}}}
return parsedValues;}
const GanttModel=__exports.GanttModel=class GanttModel extends Model{static services=["notification"];setup(params,services){this.notification=services.notification;this.data={};this.metaData=params.metaData;this.displayParams=params.displayParams;this.searchParams=null;this.closedRows=new Set();this.keepLast=new KeepLast();this.mutex=new Mutex();this._nextMetaData=null;}
async load(searchParams){this.searchParams=searchParams;const metaData=this._buildMetaData();const params={groupedBy:this._getGroupedBy(metaData,searchParams),pagerOffset:0,};if(!metaData.scale||!metaData.startDate||!metaData.stopDate){Object.assign(params,this._getInitialRangeParams(this._buildMetaData(params),searchParams));}
await this._fetchData(this._buildMetaData(params));}
collapseRows(){const collapse=(rows)=>{for(const row of rows){this.closedRows.add(row.id);if(row.rows){collapse(row.rows);}}};collapse(this.data.rows);this.notify();}
copy(id,schedule,callback){const{resModel}=this.metaData;const{context}=this.searchParams;const data=this._scheduleToData(schedule);return this.mutex.exec(async()=>{const result=await this.orm.call(resModel,"copy",[[id]],{context,default:data,});if(callback){callback(result[0]);}
this.fetchData();});}
async createDependency(masterId,slaveId){const{dependencyField,resModel}=this.metaData;const writeCommand={[dependencyField]:[x2ManyCommands.link(masterId)],};await this.mutex.exec(()=>this.orm.write(resModel,[slaveId],writeCommand));await this.fetchData();}
dateStartFieldIsDate(metaData=this.metaData){return metaData?.fields[metaData.dateStartField].type==="date";}
dateStopFieldIsDate(metaData=this.metaData){return metaData?.fields[metaData.dateStopField].type==="date";}
expandRows(){this.closedRows.clear();this.notify();}
async fetchData(params){await this._fetchData(this._buildMetaData(params));this.useSampleModel=false;this.notify();}
getDialogContext(params){const context={...this.getSchedule(params)};if(params.withDefault){for(const k in context){context[sprintf("default_%s",k)]=context[k];}}
return Object.assign({},this.searchParams.context,context);}
getSchedule({rowId,start,stop}={}){const{dateStartField,dateStopField,fields,groupedBy}=this.metaData;const schedule={};if(start){schedule[dateStartField]=this.dateStartFieldIsDate()?serializeDate(start):serializeDateTime(start);}
if(stop&&dateStartField!==dateStopField){schedule[dateStopField]=this.dateStopFieldIsDate()?serializeDate(stop):serializeDateTime(stop);}
if(rowId){const group=Object.assign({},...JSON.parse(rowId));for(const fieldName of groupedBy){if(fieldName in group){const value=group[fieldName];if(Array.isArray(value)){const{type}=fields[fieldName];schedule[fieldName]=type==="many2many"?[value[0]]:value[0];}else{schedule[fieldName]=value;}}}}
return schedule;}
hasData(){return Boolean(this.data.records.length);}
isClosed(rowId){return this.closedRows.has(rowId);}
async removeDependency(masterId,slaveId){const{dependencyField,resModel}=this.metaData;const writeCommand={[dependencyField]:[x2ManyCommands.unlink(masterId)],};await this.mutex.exec(()=>this.orm.write(resModel,[slaveId],writeCommand));await this.fetchData();}
removeRedundantData(data,ids){const records=this.data.records.filter((rec)=>ids.includes(rec.id));if(!records.length){return data;}
const isSameValue=(record,{name,type})=>{const recordValue=record[name];let newValue=data[name];if(Array.isArray(newValue)){[newValue]=newValue;}
if(Array.isArray(recordValue)){if(type==="many2many"){return recordValue.includes(newValue);}else{return recordValue[0]===newValue;}}else if(type==="date"){return serializeDate(recordValue)===newValue;}else if(type==="datetime"){return serializeDateTime(recordValue)===newValue;}else{return recordValue===newValue;}};const trimmed={...data};for(const fieldName in data){const field=this.metaData.fields[fieldName];if(records.every((rec)=>isSameValue(rec,field))){delete trimmed[fieldName];}}
return trimmed;}
async reschedule(ids,schedule,callback){if(!Array.isArray(ids)){ids=[ids];}
const allData=this._scheduleToData(schedule);const data=this.removeRedundantData(allData,ids);const context=this._getRescheduleContext();return this.mutex.exec(async()=>{try{const result=await this._reschedule(ids,data,context);if(callback){await callback(result);}}finally{this.fetchData();}});}
async _reschedule(ids,data,context){return this.orm.write(this.metaData.resModel,ids,data,{context,});}
toggleHighlightPlannedFilter(ids){}
async rescheduleAccordingToDependency(direction,masterId,slaveId,rescheduleAccordingToDependencyCallback){const{dateStartField,dateStopField,dependencyField,dependencyInvertedField,resModel,}=this.metaData;return await this.mutex.exec(async()=>{try{const result=await this.orm.call(resModel,"web_gantt_reschedule",[direction,masterId,slaveId,dependencyField,dependencyInvertedField,dateStartField,dateStopField,]);if(rescheduleAccordingToDependencyCallback){await rescheduleAccordingToDependencyCallback(result);}}finally{this.fetchData();}});}
toggleRow(rowId){if(this.isClosed(rowId)){this.closedRows.delete(rowId);}else{this.closedRows.add(rowId);}
this.notify();}
async toggleDisplayMode(){this.displayParams.displayMode=this.displayParams.displayMode==="dense"?"sparse":"dense";this.notify();}
async updatePagerParams({limit,offset}){await this.fetchData({pagerLimit:limit,pagerOffset:offset});}
_buildMetaData(params={}){this._nextMetaData={...(this._nextMetaData||this.metaData)};if(params.groupedBy){this._nextMetaData.groupedBy=params.groupedBy;}
if(params.scaleId){browser.localStorage.setItem(this._getLocalStorageKey(),params.scaleId);this._nextMetaData.scale={...this._nextMetaData.scales[params.scaleId]};}
if(params.focusDate){this._nextMetaData.focusDate=params.focusDate;}
if(params.startDate){this._nextMetaData.startDate=params.startDate;}
if(params.stopDate){this._nextMetaData.stopDate=params.stopDate;}
if(params.rangeId){this._nextMetaData.rangeId=params.rangeId;}
if("pagerLimit"in params){this._nextMetaData.pagerLimit=params.pagerLimit;}
if("pagerOffset"in params){this._nextMetaData.pagerOffset=params.pagerOffset;}
if("scaleId"in params||"startDate"in params||"stopDate"in params){let exchange=false;if(this._nextMetaData.startDate>this._nextMetaData.stopDate){exchange=true;const temp=this._nextMetaData.startDate;this._nextMetaData.startDate=this._nextMetaData.stopDate;this._nextMetaData.stopDate=temp;}
const{interval}=this._nextMetaData.scale;const rightLimit=this._nextMetaData.startDate.plus({year:10,day:-1});if(this._nextMetaData.stopDate>rightLimit){if(exchange){this._nextMetaData.startDate=this._nextMetaData.stopDate.minus({year:10,day:-1,});}else{this._nextMetaData.stopDate=this._nextMetaData.startDate.plus({year:10,day:-1,});}}
this._nextMetaData.globalStart=firstColumnBefore(this._nextMetaData.startDate,interval);this._nextMetaData.globalStop=firstColumnAfter(this._nextMetaData.stopDate.plus({day:1}),interval);if(params.currentFocusDate){this._nextMetaData.focusDate=params.currentFocusDate;if(this._nextMetaData.focusDate<this._nextMetaData.startDate){this._nextMetaData.focusDate=this._nextMetaData.startDate;}else if(this._nextMetaData.stopDate<this._nextMetaData.focusDate){this._nextMetaData.focusDate=this._nextMetaData.stopDate;}}}
return this._nextMetaData;}
async _fetchData(metaData,additionalContext){const{globalStart,globalStop,groupedBy,pagerLimit,pagerOffset,resModel,scale}=metaData;const context={...this.searchParams.context,group_by:groupedBy,...additionalContext,};const domain=this._getDomain(metaData);const fields=this._getFields(metaData);const specification={};for(const fieldName of fields){specification[fieldName]={};if(metaData.fields[fieldName].type==="many2one"){specification[fieldName].fields={display_name:{}};}}
const{length,groups,records,progress_bars,unavailabilities}=await this.keepLast.add(this.orm.call(resModel,"get_gantt_data",[],{domain,groupby:groupedBy,read_specification:specification,scale:scale.unit,start_date:serializeDateTime(globalStart),stop_date:serializeDateTime(globalStop),unavailability_fields:this._getUnavailabilityFields(metaData),progress_bar_fields:this._getProgressBarFields(metaData),context,limit:pagerLimit,offset:pagerOffset,}));groups.forEach((g)=>(g.fromServer=true));const data={count:length};data.records=this._parseServerData(metaData,records);data.rows=this._generateRows(metaData,{groupedBy,groups,parentGroup:[],});data.unavailabilities=this._processUnavailabilities(unavailabilities);data.progressBars=this._processProgressBars(progress_bars);await this.keepLast.add(this._fetchDataPostProcess(metaData,data));this.data=data;this.metaData=metaData;this._nextMetaData=null;}
async _fetchDataPostProcess(metaData,data){}
_filterDateIngroupedBy(metaData,groupedBy){return groupedBy.filter((gb)=>{const[fieldName]=gb.split(":");const{type}=metaData.fields[fieldName];return!["date","datetime"].includes(type);});}
_formatTime(floatVal){const timeStr=formatFloatTime(floatVal,{noLeadingZeroHour:true});const[hourStr,minuteStr]=timeStr.split(":");const hour=parseInt(hourStr,10);const minute=parseInt(minuteStr,10);return minute?_t("%(hour)sh%(minute)s",{hour,minute}):_t("%sh",hour);}
_generateRows(metaData,params){const groupedBy=params.groupedBy;const groups=params.groups;const groupLevel=metaData.groupedBy.length-groupedBy.length;const parentGroup=params.parentGroup;if(!groupedBy.length||!groups.length){const recordIds=[];for(const g of groups){recordIds.push(...(g.__record_ids||[]));}
const part=parentGroup.at(-1);const[[parentGroupedField,value]]=part?Object.entries(part):[[]];return[{groupLevel,id:JSON.stringify([...parentGroup,{}]),name:"",recordIds:unique(recordIds),parentGroupedField,parentResId:Array.isArray(value)?value[0]:value,__extra__:true,},];}
const rows=[];const groupedByField=groupedBy[0];const currentLevelGroups=groupBy(groups,(g)=>{if(g[groupedByField]===undefined){g[groupedByField]=false;}
return g[groupedByField];});const{maxField}=metaData.consolidationParams;const consolidate=groupLevel===0&&groupedByField===maxField;const generateSubRow=maxField?true:groupedBy.length>1;for(const key in currentLevelGroups){const subGroups=currentLevelGroups[key];const value=subGroups[0][groupedByField];const part={};part[groupedByField]=value;const fakeGroup=[...parentGroup,part];const id=JSON.stringify(fakeGroup);const resId=Array.isArray(value)?value[0]:value;const fromServer=subGroups.some((g)=>g.fromServer);const recordIds=[];for(const g of subGroups){recordIds.push(...(g.__record_ids||[]));}
const row={consolidate,fromServer,groupedBy,groupedByField,groupLevel,id,name:this._getRowName(metaData,groupedByField,value),resId,recordIds:unique(recordIds),};if(generateSubRow){row.rows=this._generateRows(metaData,{...params,groupedBy:groupedBy.slice(1),groups:subGroups,parentGroup:fakeGroup,});}
if(resId===false){rows.unshift(row);}else{rows.push(row);}}
return rows;}
_getDomain(metaData){const{dateStartField,dateStopField,globalStart,globalStop}=metaData;const domain=Domain.and([this.searchParams.domain,["&",[dateStartField,"<",this.dateStopFieldIsDate(metaData)?serializeDate(globalStop):serializeDateTime(globalStop),],[dateStopField,this.dateStartFieldIsDate(metaData)?">=":">",this.dateStartFieldIsDate(metaData)?serializeDate(globalStart):serializeDateTime(globalStart),],],]);return domain.toList();}
_getFieldFormattedValue(value,field){if(field.type==="boolean"){return value?"True":"False";}else if(!value){return _t("Undefined %s",field.string);}else if(field.type==="many2many"){return value[1];}
const formatter=registry.category("formatters").get(field.type);return formatter(value,field);}
_getFields(metaData){const fields=new Set(["display_name",metaData.dateStartField,metaData.dateStopField,...metaData.groupedBy,...metaData.decorationFields,]);if(metaData.colorField){fields.add(metaData.colorField);}
if(metaData.consolidationParams.field){fields.add(metaData.consolidationParams.field);}
if(metaData.consolidationParams.excludeField){fields.add(metaData.consolidationParams.excludeField);}
if(metaData.dependencyField){fields.add(metaData.dependencyField);}
if(metaData.progressField){fields.add(metaData.progressField);}
return[...fields];}
_getGroupedBy(metaData,searchParams){let groupedBy=[...searchParams.groupBy];groupedBy=groupedBy.filter((gb)=>{const[fieldName]=gb.split(".");const field=metaData.fields[fieldName];return field?.type!=="properties";});groupedBy=this._filterDateIngroupedBy(metaData,groupedBy);if(!groupedBy.length){groupedBy=metaData.defaultGroupBy;}
return groupedBy;}
_getDefaultFocusDate(metaData,searchParams,scaleId){const{context}=searchParams;let focusDate="initialDate"in context?deserializeDateTime(context.initialDate):DateTime.local();focusDate=focusDate.startOf("day");if(metaData.offset){const{unit}=metaData.scales[scaleId];focusDate=focusDate.plus({[unit]:metaData.offset});}
return focusDate;}
_getInitialRangeParams(metaData,searchParams){const{context}=searchParams;const localScaleId=this._getScaleIdFromLocalStorage(metaData);const scaleId=localScaleId||context.default_scale||metaData.defaultScale;const{defaultRange}=metaData.scales[scaleId];const rangeId=context.default_range in metaData.ranges?context.range_type:metaData.defaultRange||"custom";let focusDate;if(rangeId in metaData.ranges){focusDate=this._getDefaultFocusDate(metaData,searchParams,scaleId);return{scaleId,...getRangeFromDate(rangeId,focusDate)};}
let startDate=context.default_start_date&&deserializeDate(context.default_start_date);let stopDate=context.default_stop_date&&deserializeDate(context.default_stop_date);if(!startDate&&!stopDate){focusDate=this._getDefaultFocusDate(metaData,searchParams,scaleId);startDate=firstColumnBefore(focusDate,defaultRange.unit);stopDate=startDate.plus({[defaultRange.unit]:defaultRange.count}).minus({day:1});}else if(startDate&&!stopDate){const column=firstColumnBefore(startDate,defaultRange.unit);focusDate=startDate;stopDate=column.plus({[defaultRange.unit]:defaultRange.count}).minus({day:1});}else if(!startDate&&stopDate){const column=firstColumnAfter(stopDate,defaultRange.unit);focusDate=stopDate;startDate=column.minus({[defaultRange.unit]:defaultRange.count});}else{focusDate=DateTime.local();if(focusDate<startDate){focusDate=startDate;}else if(focusDate>stopDate){focusDate=stopDate;}}
return{focusDate,scaleId,startDate,stopDate,rangeId};}
_getLocalStorageKey(){return`scaleOf-viewId-${this.env.config.viewId}`;}
_getProgressBarFields(metaData){if(metaData.progressBarFields&&!this.orm.isSample){return metaData.progressBarFields.filter((fieldName)=>metaData.groupedBy.includes(fieldName)&&["many2many","many2one"].includes(metaData.fields[fieldName]?.type));}
return[];}
_getRescheduleContext(){return{...this.searchParams.context};}
_getRowName(metaData,groupedByField,value){const field=metaData.fields[groupedByField];return this._getFieldFormattedValue(value,field);}
_getScaleIdFromLocalStorage(metaData){const{scales}=metaData;const localScaleId=browser.localStorage.getItem(this._getLocalStorageKey());return localScaleId in scales?localScaleId:null;}
_getUnavailabilityFields(metaData){if(metaData.displayUnavailability&&!this.orm.isSample&&metaData.groupedBy.length){const lastGroupBy=metaData.groupedBy.at(-1);const{type}=metaData.fields[lastGroupBy]||{};if(["many2many","many2one"].includes(type)){return[lastGroupBy];}}
return[];}
_parseServerData(metaData,records){const{dateStartField,dateStopField,fields,globalStart,globalStop}=metaData;const parsedRecords=[];for(const record of records){const parsedRecord=parseServerValues(fields,record);const dateStart=parsedRecord[dateStartField];const dateStop=parsedRecord[dateStopField];if(this.orm.isSample){if(dateStart>dateStop){parsedRecord[dateStartField]=dateStop;parsedRecord[dateStopField]=dateStart;}
if(parsedRecord[dateStopField]<globalStart){parsedRecord[dateStopField]=globalStart;}
if(parsedRecord[dateStartField]>globalStop){parsedRecord[dateStartField]=globalStop;}
parsedRecords.push(parsedRecord);}else if(dateStart<=dateStop){parsedRecords.push(parsedRecord);}}
return parsedRecords;}
_processProgressBar(progressBar,warning){const processedProgressBar={...progressBar,value_formatted:this._formatTime(progressBar.value),max_value_formatted:this._formatTime(progressBar.max_value),ratio:progressBar.max_value?(progressBar.value/progressBar.max_value)*100:0,warning,};if(processedProgressBar?.max_value){processedProgressBar.ratio_formatted=formatPercentage(processedProgressBar.ratio/100);}
return processedProgressBar;}
_processProgressBars(progressBars){const processedProgressBars={};for(const fieldName in progressBars){processedProgressBars[fieldName]={};const progressBarInfo=progressBars[fieldName];for(const[resId,progressBar]of Object.entries(progressBarInfo)){processedProgressBars[fieldName][resId]=this._processProgressBar(progressBar,progressBarInfo.warning);}}
return processedProgressBars;}
_processUnavailabilities(unavailabilities){const processedUnavailabilities={};for(const fieldName in unavailabilities){processedUnavailabilities[fieldName]={};for(const[resId,resUnavailabilities]of Object.entries(unavailabilities[fieldName])){processedUnavailabilities[fieldName][resId]=resUnavailabilities.map((u)=>({start:deserializeDateTime(u.start),stop:deserializeDateTime(u.stop),}));}}
return processedUnavailabilities;}
_scheduleToData(schedule){const allowedFields=[this.metaData.dateStartField,this.metaData.dateStopField,...this.metaData.groupedBy,];return pick(schedule,...allowedFields);}}
return __exports;});;

/* /web_gantt/static/src/gantt_popover.js */
odoo.define('@web_gantt/gantt_popover',['@odoo/owl','@web/views/view_button/view_button','@web/views/view_button/view_button_hook','@web/views/view_compiler','@web_gantt/gantt_compiler'],function(require){'use strict';let __exports={};const{Component,useRef}=require("@odoo/owl");const{ViewButton}=require("@web/views/view_button/view_button");const{useViewButtons}=require("@web/views/view_button/view_button_hook");const{useViewCompiler}=require("@web/views/view_compiler");const{GanttCompiler}=require("@web_gantt/gantt_compiler");const GanttPopover=__exports.GanttPopover=class GanttPopover extends Component{static template="web_gantt.GanttPopover";static components={ViewButton};static props=["title","displayGenericButtons","bodyTemplate?","footerTemplate?","resModel","resId","context","close","reload","buttons",];setup(){this.rootRef=useRef("root");this.templates={body:"web_gantt.GanttPopover.default"};const toCompile={};const{bodyTemplate,footerTemplate}=this.props;if(bodyTemplate){toCompile.body=bodyTemplate;if(footerTemplate){toCompile.footer=footerTemplate;}}
Object.assign(this.templates,useViewCompiler(GanttCompiler,toCompile,{recordExpr:"__record__"}));useViewButtons(this.rootRef,{reload:async()=>{await this.props.reload();this.props.close();},});}
get renderingContext(){return Object.assign({},this.props.context,{__comp__:this,__record__:{resModel:this.props.resModel,resId:this.props.resId},});}
async onClick(button){await button.onClick();this.props.close();}}
return __exports;});;

/* /web_gantt/static/src/gantt_popover_in_dialog.js */
odoo.define('@web_gantt/gantt_popover_in_dialog',['@odoo/owl','@web/core/dialog/dialog'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{Dialog}=require("@web/core/dialog/dialog");const GanttPopoverInDialog=__exports.GanttPopoverInDialog=class GanttPopoverInDialog extends Component{static components={Dialog};static props=["close","component","componentProps","dialogTitle"];static template="web_gantt.GanttPopoverInDialog";get componentProps(){return{...this.props.componentProps,close:this.props.close};}}
return __exports;});;

/* /web_gantt/static/src/gantt_renderer.js */
odoo.define('@web_gantt/gantt_renderer',['@odoo/owl','@web/core/browser/feature_detection','@web/core/domain','@web/core/l10n/dates','@web/core/l10n/localization','@web/core/l10n/translation','@web/core/popover/popover_hook','@web/core/py_js/py','@web/core/user','@web/core/utils/hooks','@web/core/utils/objects','@web/core/utils/timing','@web/core/utils/urls','@web/core/utils/strings','@web/core/virtual_grid_hook','@web/views/fields/formatters','@web/views/view_dialogs/select_create_dialog','@web_gantt/gantt_connector','@web_gantt/gantt_helpers','@web_gantt/gantt_popover','@web_gantt/gantt_renderer_controls','@web_gantt/gantt_resize_badge','@web_gantt/gantt_row_progress_bar','@web/core/utils/numbers'],function(require){'use strict';let __exports={};const{Component,onWillRender,onWillStart,onWillUpdateProps,reactive,useEffect,useExternalListener,useRef,markup,}=require("@odoo/owl");const{hasTouch,isMobileOS}=require("@web/core/browser/feature_detection");const{Domain}=require("@web/core/domain");const{getStartOfLocalWeek,is24HourFormat,serializeDate,serializeDateTime,}=require("@web/core/l10n/dates");const{localization}=require("@web/core/l10n/localization");const{_t}=require("@web/core/l10n/translation");const{usePopover}=require("@web/core/popover/popover_hook");const{evaluateBooleanExpr}=require("@web/core/py_js/py");const{user}=require("@web/core/user");const{useService}=require("@web/core/utils/hooks");const{omit,pick}=require("@web/core/utils/objects");const{debounce,throttleForAnimation}=require("@web/core/utils/timing");const{url}=require("@web/core/utils/urls");const{escape}=require("@web/core/utils/strings");const{useVirtualGrid}=require("@web/core/virtual_grid_hook");const{formatFloatTime}=require("@web/views/fields/formatters");const{SelectCreateDialog}=require("@web/views/view_dialogs/select_create_dialog");const{GanttConnector}=require("@web_gantt/gantt_connector");const{dateAddFixedOffset,diffColumn,getCellColor,getColorIndex,localEndOf,localStartOf,useGanttConnectorDraggable,useGanttDraggable,useGanttResizable,useGanttSelectable,useGanttUndraggable,useMultiHover,}=require("@web_gantt/gantt_helpers");const{GanttPopover}=require("@web_gantt/gantt_popover");const{GanttRendererControls}=require("@web_gantt/gantt_renderer_controls");const{GanttResizeBadge}=require("@web_gantt/gantt_resize_badge");const{GanttRowProgressBar}=require("@web_gantt/gantt_row_progress_bar");const{clamp}=require("@web/core/utils/numbers");const{DateTime}=luxon;const INTERACTION_CLASSNAMES=[["connect","o_connect"],["copy","o_copying"],["locked","o_grabbing_locked"],["reschedule","o_grabbing"],["resize","o_resizing"],];const NEW_CONNECTOR_ID="__connector__new";const GanttRenderer=__exports.GanttRenderer=class GanttRenderer extends Component{static components={GanttConnector,GanttRendererControls,GanttResizeBadge,GanttRowProgressBar,Popover:GanttPopover,};static props=["model","arch","class","create","openDialog","scrollPosition?","contentRef?",];static template="web_gantt.GanttRenderer";static connectorCreatorTemplate="web_gantt.GanttRenderer.ConnectorCreator";static headerTemplate="web_gantt.GanttRenderer.Header";static pillTemplate="web_gantt.GanttRenderer.Pill";static groupPillTemplate="web_gantt.GanttRenderer.GroupPill";static rowContentTemplate="web_gantt.GanttRenderer.RowContent";static rowHeaderTemplate="web_gantt.GanttRenderer.RowHeader";static totalRowTemplate="web_gantt.GanttRenderer.TotalRow";static getRowHeaderWidth=(width)=>100/(width>768?6:3);setup(){this.model=this.props.model;this.gridRef=useRef("grid");this.cellContainerRef=useRef("cellContainer");this.actionService=useService("action");this.dialogService=useService("dialog");this.notificationService=useService("notification");this.is24HourFormat=is24HourFormat();this.hovered={connector:null,hoverable:null,pill:null,};this.interaction=reactive({mode:null,dragAction:"reschedule",},()=>this.onInteractionChange());this.onInteractionChange();this.connectors=reactive({});this.progressBarsReactive=reactive({hoveredRowId:null});this.resizeBadgeReactive=reactive({});this.columnsGroups=[];this.columns=[];this.extraPills=[];this.pills={};this.rows=[];this.subColumns=[];this.rowPills={};this.mappingColToColumn=new Map();this.mappingColToSubColumn=new Map();this.cursorPosition={x:0,y:0,};const position="bottom";this.popover=usePopover(this.constructor.components.Popover,{position,onPositioned:(el,{direction})=>{if(direction!==position){return;}
const{left,right}=el.getBoundingClientRect();if((0<=left&&right<=window.innerWidth)||window.innerWidth<right-left){return;}
const{left:pillLeft,right:pillRight}=this.popover.target.getBoundingClientRect();const middle=(clamp(pillLeft,0,window.innerWidth)+
clamp(pillRight,0,window.innerWidth))/2;el.style.left=`0px`;const{width}=el.getBoundingClientRect();el.style.left=`${middle - width / 2}px`;},onClose:()=>{delete this.popover.target;},});this.throttledComputeHoverParams=throttleForAnimation((ev)=>this.computeHoverParams(ev));useExternalListener(window,"keydown",(ev)=>this.onWindowKeyDown(ev));useExternalListener(window,"keyup",(ev)=>this.onWindowKeyUp(ev));useExternalListener(window,"resize",debounce(()=>{this.shouldComputeSomeWidths=true;this.render();},100));useMultiHover({ref:this.gridRef,selector:".o_gantt_group",related:["data-row-id"],className:"o_gantt_group_hovered",});this.cellForDrag={el:null,part:0};const dragState=useGanttDraggable({enable:()=>Boolean(this.cellForDrag.el),ref:this.gridRef,hoveredCell:this.cellForDrag,elements:".o_draggable",ignore:".o_resize_handle,.o_connector_creator_bullet",cells:".o_gantt_cell",cellDragClassName:"o_gantt_cell o_drag_hover",ghostClassName:"o_dragged_pill_ghost",addStickyCoordinates:(rows,columns)=>{this.stickyGridRows=Object.assign({},...rows.map((row)=>({[row]:true})));this.stickyGridColumns=Object.assign({},...columns.map((column)=>({[column]:true})));this.setSomeGridStyleProperties();},onDragStart:({pill})=>{this.popover.close();this.setStickyPill(pill);this.interaction.mode="drag";},onDragEnd:()=>{this.setStickyPill();this.interaction.mode=null;},onDrop:(params)=>this.dragPillDrop(params),});const unDragState=useGanttUndraggable({ref:this.gridRef,elements:".o_undraggable",ignore:".o_resize_handle,.o_connector_creator_bullet",edgeScrolling:{enabled:false},onDragStart:()=>{this.interaction.mode="locked";},onDragEnd:()=>{this.interaction.mode=null;},});const selectState=useGanttSelectable({enable:()=>{const{canCellCreate,canPlan}=this.model.metaData;return Boolean(this.cellForDrag.el)&&(canCellCreate||canPlan);},ref:this.gridRef,hoveredCell:this.cellForDrag,elements:".o_gantt_cell:not(.o_gantt_group)",edgeScrolling:{speed:40,threshold:150,direction:"horizontal"},rtl:()=>localization.direction==="rtl",onDrop:({rowId,startCol,stopCol})=>{const{canPlan}=this.model.metaData;if(canPlan){this.onPlan(rowId,startCol,stopCol);}else{this.onCreate(rowId,startCol,stopCol);}},});const resizeState=useGanttResizable({ref:this.gridRef,hoveredCell:this.cellForDrag,elements:".o_resizable",innerPills:".o_gantt_pill",cells:".o_gantt_cell",handles:"o_resize_handle",edgeScrolling:{speed:40,threshold:150,direction:"horizontal"},showHandles:(pillEl)=>{const pill=this.pills[pillEl.dataset.pillId];const hideHandles=this.connectorDragState.dragging;return{start:!pill.disableStartResize&&!hideHandles,end:!pill.disableStopResize&&!hideHandles,};},rtl:()=>localization.direction==="rtl",precision:()=>this.model.metaData.scale.cellPart,onDragStart:({pill,addClass})=>{this.popover.close();this.setStickyPill(pill);addClass(pill,"o_resized");this.interaction.mode="resize";},onDrag:({pill,grabbedHandle,diff})=>{const rect=pill.getBoundingClientRect();const position={top:rect.y+rect.height};if(grabbedHandle==="left"){position.left=rect.x;}else{position.right=document.body.offsetWidth-rect.x-rect.width;}
const{cellTime,unitDescription}=this.model.metaData.scale;Object.assign(this.resizeBadgeReactive,{position,diff:diff*cellTime,scale:unitDescription,});},onDragEnd:({pill,removeClass})=>{delete this.resizeBadgeReactive.position;delete this.resizeBadgeReactive.diff;delete this.resizeBadgeReactive.scale;this.setStickyPill();removeClass(pill,"o_resized");this.interaction.mode=null;},onDrop:(params)=>this.resizePillDrop(params),});let initialPillId;this.connectorDragState=useGanttConnectorDraggable({ref:this.gridRef,elements:".o_connector_creator_bullet",parentWrapper:".o_gantt_cells .o_gantt_pill_wrapper",onDragStart:({sourcePill,x,y,addClass})=>{this.popover.close();initialPillId=sourcePill.dataset.pillId;addClass(sourcePill,"o_connector_creator_lock");this.setConnector({id:NEW_CONNECTOR_ID,highlighted:true,sourcePoint:{left:x,top:y},targetPoint:{left:x,top:y},});this.setStickyPill(sourcePill);this.interaction.mode="connect";},onDrag:({connectorCenter,x,y})=>{this.setConnector({id:NEW_CONNECTOR_ID,sourcePoint:{left:connectorCenter.x,top:connectorCenter.y},targetPoint:{left:x,top:y},});},onDragEnd:()=>{this.setConnector({id:NEW_CONNECTOR_ID,sourcePoint:null,targetPoint:null});this.setStickyPill();this.interaction.mode=null;},onDrop:({target})=>{if(initialPillId===target.dataset.pillId){return;}
const{id:masterId}=this.pills[initialPillId].record;const{id:slaveId}=this.pills[target.dataset.pillId].record;this.model.createDependency(masterId,slaveId);},});this.dragStates=[dragState,unDragState,resizeState,selectState];onWillStart(this.computeDerivedParams);onWillUpdateProps(this.computeDerivedParams);this.virtualGrid=useVirtualGrid({scrollableRef:this.props.contentRef,initialScroll:this.props.scrollPosition,bufferCoef:0.1,onChange:(changed)=>{if("columnsIndexes"in changed){this.shouldComputeGridColumns=true;}
if("rowsIndexes"in changed){this.shouldComputeGridRows=true;}
this.render();},});onWillRender(this.onWillRender);useEffect((content)=>{content.addEventListener("scroll",this.throttledComputeHoverParams);return()=>{content.removeEventListener("scroll",this.throttledComputeHoverParams);};},()=>[this.gridRef.el?.parentElement]);useEffect(()=>{if(this.useFocusDate){this.useFocusDate=false;this.focusDate(this.model.metaData.focusDate);}});this.env.getCurrentFocusDateCallBackRecorder.add(this,this.getCurrentFocusDate.bind(this));}
get controlsProps(){return{displayExpandCollapseButtons:this.rows[0]?.isGroup,model:this.model,focusToday:()=>this.focusToday(),getCurrentFocusDate:()=>this.getCurrentFocusDate(),};}
get hasRowHeaders(){const{groupedBy}=this.model.metaData;const{displayMode}=this.model.displayParams;return groupedBy.length||displayMode==="sparse";}
get isDragging(){return this.dragStates.some((s)=>s.dragging);}
get isTouchDevice(){return isMobileOS()||hasTouch();}
addCoordinatesToCoarseGrid({grid}){if(grid.row){this.coarseGridRows[this.getFirstGridRow({grid})]=true;this.coarseGridRows[this.getLastGridRow({grid})]=true;}
if(grid.column){this.coarseGridCols[this.getFirstGridCol({grid})]=true;this.coarseGridCols[this.getLastGridCol({grid})]=true;}}
addTo(pill,group){group.pills.push(pill);group.aggregateValue++;return true;}
shouldAggregate(row,group){return Boolean(group.pills.length);}
aggregatePills(pills,row){const groups={};function getGroup(col){if(!(col in groups)){groups[col]={break:false,col,pills:[],aggregateValue:0,grid:{column:[col,col+1]},};}
return groups[col];}
for(const pill of pills){let addedInPreviousCol=false;let col;for(col=this.getFirstGridCol(pill);col<this.getLastGridCol(pill);col++){const group=getGroup(col);const added=this.addTo(pill,group);if(addedInPreviousCol!==added){group.break=true;}
addedInPreviousCol=added;}
if(addedInPreviousCol&&col<=this.columnCount){const group=getGroup(col);group.break=true;}}
const filteredGroups=Object.values(groups).filter((g)=>this.shouldAggregate(row,g));if(this.shouldMergeGroups()){return this.mergeGroups(filteredGroups);}
return filteredGroups;}
calculatePillsLevel(pills){const firstPill=pills[0];firstPill.level=0;const levels=[{pills:[firstPill],maxCol:this.getLastGridCol(firstPill)-1,},];for(const currentPill of pills.slice(1)){const lastCol=this.getLastGridCol(currentPill)-1;for(let l=0;l<levels.length;l++){const level=levels[l];if(this.getFirstGridCol(currentPill)>level.maxCol){currentPill.level=l;level.pills.push(currentPill);level.maxCol=lastCol;break;}}
if(isNaN(currentPill.level)){currentPill.level=levels.length;levels.push({pills:[currentPill],maxCol:lastCol,});}}
return levels.length;}
makeSubColumn(start,delta,cellTime,time){const subCellStart=dateAddFixedOffset(start,{[time]:delta*cellTime});const subCellStop=dateAddFixedOffset(start,{[time]:(delta+1)*cellTime,seconds:-1,});return{start:subCellStart,stop:subCellStop};}
computeVisibleColumns(){const[firstIndex,lastIndex]=this.virtualGrid.columnsIndexes;this.columnsGroups=[];this.columns=[];this.subColumns=[];this.coarseGridCols={1:true,[this.columnCount*this.model.metaData.scale.cellPart+1]:true,};const{globalStart,globalStop,scale}=this.model.metaData;const{cellPart,interval,unit}=scale;const now=DateTime.local();const nowStart=now.startOf(interval);const nowEnd=now.endOf(interval);const groupsLeftBound=DateTime.max(globalStart,localStartOf(globalStart.plus({[interval]:firstIndex}),unit));const groupsRightBound=DateTime.min(localEndOf(globalStart.plus({[interval]:lastIndex}),unit),globalStop);let currentGroup=null;for(let j=firstIndex;j<=lastIndex;j++){const columnId=`__column__${j + 1}`;const col=j*cellPart+1;const{start,stop}=this.getColumnFromColNumber(col);const column={id:columnId,grid:{column:[col,col+cellPart]},start,stop,};const isToday=nowStart<=start&&start<=nowEnd;if(isToday){column.isToday=true;}
this.columns.push(column);for(let i=0;i<cellPart;i++){const subColumn=this.getSubColumnFromColNumber(col+i);this.subColumns.push({...subColumn,isToday,columnId});this.coarseGridCols[col+i]=true;}
const groupStart=localStartOf(start,unit);if(!currentGroup||!groupStart.equals(currentGroup.start)){const groupId=`__group__${this.columnsGroups.length + 1}`;const startingBound=DateTime.max(groupsLeftBound,groupStart);const endingBound=DateTime.min(groupsRightBound,localEndOf(groupStart,unit));const[groupFirstCol,groupLastCol]=this.getGridColumnFromDates(startingBound,endingBound);currentGroup={id:groupId,grid:{column:[groupFirstCol,groupLastCol]},start:groupStart,};this.columnsGroups.push(currentGroup);this.coarseGridCols[groupFirstCol]=true;this.coarseGridCols[groupLastCol]=true;}}}
computeVisibleRows(){this.coarseGridRows={1:true,[this.getLastGridRow(this.rows[this.rows.length-1])]:true,};const[rowStart,rowEnd]=this.virtualGrid.rowsIndexes;this.rowsToRender=new Set();for(const row of this.rows){const[first,last]=row.grid.row;if(last<=rowStart+1||first>rowEnd+1){continue;}
this.addToRowsToRender(row);}}
getFirstGridCol({grid}){const[first]=grid.column;return first;}
getLastGridCol({grid}){const[,last]=grid.column;return last;}
getFirstGridRow({grid}){const[first]=grid.row;return first;}
getLastGridRow({grid}){const[,last]=grid.row;return last;}
addToPillsToRender(pill){this.pillsToRender.add(pill);this.addCoordinatesToCoarseGrid(pill);}
addToRowsToRender(row){this.rowsToRender.add(row);const[first,last]=row.grid.row;for(let i=first;i<=last;i++){this.coarseGridRows[i]=true;}}
getVisibleCols(){const[columnStart,columnEnd]=this.virtualGrid.columnsIndexes;const{cellPart}=this.model.metaData.scale;const firstVisibleCol=1+cellPart*columnStart;const lastVisibleCol=1+cellPart*(columnEnd+1);return[firstVisibleCol,lastVisibleCol];}
getVisibleRows(){const[rowStart,rowEnd]=this.virtualGrid.rowsIndexes;const firstVisibleRow=rowStart+1;const lastVisibleRow=rowEnd+1;return[firstVisibleRow,lastVisibleRow];}
computeVisiblePills(){this.pillsToRender=new Set();const[firstVisibleCol,lastVisibleCol]=this.getVisibleCols();const[firstVisibleRow,lastVisibleRow]=this.getVisibleRows();const isOut=(pill,filterOnRow=true)=>this.getFirstGridCol(pill)>lastVisibleCol||this.getLastGridCol(pill)<firstVisibleCol||(filterOnRow&&(this.getFirstGridRow(pill)>lastVisibleRow||this.getLastGridRow(pill)-1<firstVisibleRow));const getRowPills=(row,filterOnRow)=>(this.rowPills[row.id]||[]).filter((pill)=>!isOut(pill,filterOnRow));for(const row of this.rowsToRender){for(const rowPill of getRowPills(row)){this.addToPillsToRender(rowPill);}
if(!row.isGroup&&row.unavailabilities?.length){row.cellColors=this.getRowCellColors(row);}}
if(this.stickyPillId){this.addToPillsToRender(this.pills[this.stickyPillId]);}
if(this.totalRow){this.totalRow.pills=getRowPills(this.totalRow,false);for(const pill of this.totalRow.pills){this.addCoordinatesToCoarseGrid({grid:omit(pill.grid,"row")});}}}
computeVisibleConnectors(){const visibleConnectorIds=new Set([NEW_CONNECTOR_ID]);for(const pill of this.pillsToRender){const row=this.getRowFromPill(pill);if(row.isGroup){continue;}
for(const connectorId of this.mappingPillToConnectors[pill.id]||[]){visibleConnectorIds.add(connectorId);}}
this.connectorsToRender=[];for(const connectorId in this.connectors){if(!visibleConnectorIds.has(connectorId)){continue;}
this.connectorsToRender.push(this.connectors[connectorId]);const{sourcePillId,targetPillId}=this.mappingConnectorToPills[connectorId];if(sourcePillId){this.addToPillsToRender(this.pills[sourcePillId]);}
if(targetPillId){this.addToPillsToRender(this.pills[targetPillId]);}}}
getRowFromPill(pill){return this.rowByIds[pill.rowId];}
getColInCoarseGridKeys(){return Object.keys({...this.coarseGridCols,...this.stickyGridColumns});}
getRowInCoarseGridKeys(){return Object.keys({...this.coarseGridRows,...this.stickyGridRows});}
computeColsTemplate(){const colsTemplate=[];const colInCoarseGridKeys=this.getColInCoarseGridKeys();for(let i=0;i<colInCoarseGridKeys.length-1;i++){const x=+colInCoarseGridKeys[i];const y=+colInCoarseGridKeys[i+1];const colName=`c${x}`;const width=(y-x)*this.cellPartWidth;colsTemplate.push(`[${colName}]minmax(${width}px,1fr)`);}
colsTemplate.push(`[c${colInCoarseGridKeys.at(-1)}]`);return colsTemplate.join("");}
computeRowsTemplate(){const rowsTemplate=[];const rowInCoarseGridKeys=this.getRowInCoarseGridKeys();for(let i=0;i<rowInCoarseGridKeys.length-1;i++){const x=+rowInCoarseGridKeys[i];const y=+rowInCoarseGridKeys[i+1];const rowName=`r${x}`;const height=this.gridRows.slice(x-1,y-1).reduce((a,b)=>a+b,0);rowsTemplate.push(`[${rowName}]${height}px`);}
rowsTemplate.push(`[r${rowInCoarseGridKeys.at(-1)}]`);return rowsTemplate.join("");}
computeSomeWidths(){const{cellPart,minimalColumnWidth}=this.model.metaData.scale;this.contentRefWidth=this.props.contentRef.el?.clientWidth??document.body.clientWidth;const rowHeaderWidthPercentage=this.hasRowHeaders?this.constructor.getRowHeaderWidth(this.contentRefWidth):0;this.rowHeaderWidth=this.hasRowHeaders?Math.round((rowHeaderWidthPercentage*this.contentRefWidth)/100):0;const cellContainerWidth=this.contentRefWidth-this.rowHeaderWidth;const columnWidth=Math.floor(cellContainerWidth/this.columnCount);const rectifiedColumnWidth=Math.max(columnWidth,minimalColumnWidth);this.cellPartWidth=Math.floor(rectifiedColumnWidth/cellPart);this.columnWidth=this.cellPartWidth*cellPart;if(columnWidth<=minimalColumnWidth){this.totalWidth=this.rowHeaderWidth+this.columnWidth*this.columnCount;}else{this.totalWidth=null;}}
computeDerivedParams(){const{rows:modelRows}=this.model.data;if(this.shouldRenderConnectors()){this.mappingRecordToPillsByRow={};this.mappingRowToPillsByRecord={};this.mappingConnectorToPills={};this.mappingPillToConnectors={};}
const{globalStart,globalStop,scale,startDate,stopDate}=this.model.metaData;this.columnCount=diffColumn(globalStart,globalStop,scale.interval);if(!this.currentStartDate||diffColumn(this.currentStartDate,startDate,"day")||diffColumn(this.currentStopDate,stopDate,"day")||this.currentScaleId!==scale.id){this.useFocusDate=true;this.mappingColToColumn=new Map();this.mappingColToSubColumn=new Map();}
this.currentStartDate=startDate;this.currentStopDate=stopDate;this.currentScaleId=scale.id;this.currentGridRow=1;this.gridRows=[];this.nextPillId=1;this.pills={};this.rows=[];this.rowPills={};this.rowByIds={};const prePills=this.getPills();let pillsToProcess=[...prePills];for(const row of modelRows){const result=this.processRow(row,pillsToProcess);this.rows.push(...result.rows);pillsToProcess=result.pillsToProcess;}
const{displayTotalRow}=this.model.metaData;if(displayTotalRow){this.totalRow=this.getTotalRow(prePills);}
if(this.shouldRenderConnectors()){this.initializeConnectors();this.generateConnectors();}
this.shouldComputeSomeWidths=true;this.shouldComputeGridColumns=true;this.shouldComputeGridRows=true;}
computeDerivedParamsFromHover(){const{scale}=this.model.metaData;const{connector,hoverable,pill}=this.hovered;const isCellHovered=hoverable?.matches(".o_gantt_cell");this.cellForDrag.el=isCellHovered?hoverable:null;this.cellForDrag.part=0;if(isCellHovered&&scale.cellPart>1){const rect=hoverable.getBoundingClientRect();const x=Math.floor(rect.x);const width=Math.floor(rect.width);this.cellForDrag.part=Math.floor((this.cursorPosition.x-x)/(width/scale.cellPart));if(localization.direction==="rtl"){this.cellForDrag.part=scale.cellPart-1-this.cellForDrag.part;}}
if(this.isDragging){this.progressBarsReactive.hoveredRowId=null;return;}
if(!this.connectorDragState.dragging){const hoveredConnectorId=connector?.dataset.connectorId;for(const connectorId in this.connectors){if(connectorId!==hoveredConnectorId){this.toggleConnectorHighlighting(connectorId,false);}}
if(hoveredConnectorId){this.progressBarsReactive.hoveredRowId=null;return this.toggleConnectorHighlighting(hoveredConnectorId,true);}}
const hoveredPillId=pill?.dataset.pillId;for(const pillId in this.pills){if(pillId!==hoveredPillId){this.togglePillHighlighting(pillId,false);}}
this.togglePillHighlighting(hoveredPillId,true);this.progressBarsReactive.hoveredRowId=hoverable?hoverable.dataset.rowId:null;}
deleteConnector(connectorId){delete this.connectors[connectorId];delete this.mappingConnectorToPills[connectorId];}
async dragPillDrop({pill,cell,diff}){const{rowId}=cell.dataset;const{dateStartField,dateStopField,scale}=this.model.metaData;const{cellTime,time}=scale;const{record}=this.pills[pill.dataset.pillId];const params=this.getScheduleParams(pill);params.start=diff&&dateAddFixedOffset(record[dateStartField],{[time]:cellTime*diff});params.stop=diff&&dateAddFixedOffset(record[dateStopField],{[time]:cellTime*diff});params.rowId=rowId;const schedule=this.model.getSchedule(params);if(this.interaction.dragAction==="copy"){await this.model.copy(record.id,schedule,this.openPlanDialogCallback);}else{await this.model.reschedule(record.id,schedule,this.openPlanDialogCallback);}
if(cell.classList.contains("o_gantt_group")&&this.model.isClosed(rowId)){this.model.toggleRow(rowId);}}
enrichPill(pill){const{colorField,fields,pillDecorations,progressField}=this.model.metaData;pill.displayName=this.getDisplayName(pill);const classes=[];if(pillDecorations){const pillContext=Object.assign({},user.context);for(const[fieldName,value]of Object.entries(pill.record)){const field=fields[fieldName];switch(field.type){case"date":{pillContext[fieldName]=value?serializeDate(value):false;break;}
case"datetime":{pillContext[fieldName]=value?serializeDateTime(value):false;break;}
default:{pillContext[fieldName]=value;}}}
for(const decoration in pillDecorations){const expr=pillDecorations[decoration];if(evaluateBooleanExpr(expr,pillContext)){classes.push(decoration);}}}
if(colorField){pill._color=getColorIndex(pill.record[colorField]);classes.push(`o_gantt_color_${pill._color}`);}
if(progressField){pill._progress=pill.record[progressField]||0;}
pill.className=classes.join(" ");return pill;}
focusDate(date,ifInBounds){const{globalStart,globalStop}=this.model.metaData;const diff=date.diff(globalStart);const totalDiff=globalStop.diff(globalStart);const factor=diff/totalDiff;if(ifInBounds&&(factor<0||1<factor)){return false;}
const rtlFactor=localization.direction==="rtl"?-1:1;const scrollLeft=factor*this.cellContainerRef.el.clientWidth+
this.rowHeaderWidth-
(this.contentRefWidth+this.rowHeaderWidth)/2;this.props.contentRef.el.scrollLeft=rtlFactor*scrollLeft;return true;}
focusFirstPill(rowId){const pill=this.rowPills[rowId][0];if(pill){const col=this.getFirstGridCol(pill);const{start:date}=this.getColumnFromColNumber(col);this.focusDate(date);}}
focusToday(){return this.focusDate(DateTime.local().startOf("day"),true);}
generateConnectors(){this.nextConnectorId=1;this.setConnector({id:NEW_CONNECTOR_ID,highlighted:true,sourcePoint:null,targetPoint:null,});for(const slaveId in this.mappingRecordToPillsByRow){const{masterIds,pills:slavePills}=this.mappingRecordToPillsByRow[slaveId];for(const masterId of masterIds){if(!(masterId in this.mappingRecordToPillsByRow)){continue;}
const{pills:masterPills}=this.mappingRecordToPillsByRow[masterId];for(const[slaveRowId,targetPill]of Object.entries(slavePills)){for(const[masterRowId,sourcePill]of Object.entries(masterPills)){if(masterRowId===slaveRowId||!(slaveId in this.mappingRowToPillsByRecord[masterRowId]||masterId in this.mappingRowToPillsByRecord[slaveRowId])||Object.keys(this.mappingRecordToPillsByRow[slaveId].pills).every((rowId)=>rowId!==masterRowId&&masterId in this.mappingRowToPillsByRecord[rowId])||Object.keys(this.mappingRecordToPillsByRow[masterId].pills).every((rowId)=>rowId!==slaveRowId&&slaveId in this.mappingRowToPillsByRecord[rowId])){const masterRecord=sourcePill.record;const slaveRecord=targetPill.record;this.setConnector({alert:this.getConnectorAlert(masterRecord,slaveRecord)},sourcePill.id,targetPill.id);}}}}}}
getAggregateValue(group,previousGroup){return group.aggregateValue;}
getColumnStartStop(startCol,stopCol,roundUpStop=true){const{start}=this.getColumnFromColNumber(startCol);let{stop}=this.getColumnFromColNumber(stopCol);if(roundUpStop){stop=stop.plus({millisecond:1});}
return{start,stop};}
getConnectorAlert(masterRecord,slaveRecord){const{dateStartField,dateStopField}=this.model.metaData;if(slaveRecord[dateStartField]<masterRecord[dateStopField]){if(slaveRecord[dateStartField]<masterRecord[dateStartField]){return"error";}else{return"warning";}}
return null;}
ganttCellAttClass(row,column){return{o_sample_data_disabled:this.isDisabled(row),o_gantt_today:column.isToday,o_gantt_group:row.isGroup,o_gantt_hoverable:this.isHoverable(row),o_group_open:!this.model.isClosed(row.id),};}
getCurrentFocusDate(){const{globalStart,globalStop}=this.model.metaData;const rtlFactor=localization.direction==="rtl"?-1:1;const cellGridMiddleX=rtlFactor*this.props.contentRef.el.scrollLeft+
(this.contentRefWidth+this.rowHeaderWidth)/2;const factor=(cellGridMiddleX-this.rowHeaderWidth)/this.cellContainerRef.el.clientWidth;const totalDiff=globalStop.diff(globalStart);const diff=factor*totalDiff;const focusDate=globalStart.plus(diff);return focusDate;}
getConnectorCreatorAlignment(vertical){const alignment={vertical};if(localization.direction==="rtl"){alignment.horizontal=vertical==="top"?"right":"left";}else{alignment.horizontal=vertical==="top"?"left":"right";}
return alignment;}
getScheduleParams(pill){return{};}
getDisplayName(pill){const{computePillDisplayName,dateStartField,dateStopField,scale}=this.model.metaData;const{id:scaleId}=scale;const{record}=pill;if(!computePillDisplayName){return record.display_name;}
const startDate=record[dateStartField];const stopDate=record[dateStopField];const yearlessDateFormat=omit(DateTime.DATE_SHORT,"year");const spanAccrossDays=stopDate.startOf("day")>startDate.startOf("day")&&startDate.endOf("day").diff(startDate,"hours").toObject().hours>=3&&stopDate.diff(stopDate.startOf("day"),"hours").toObject().hours>=3;const spanAccrossWeeks=getStartOfLocalWeek(stopDate)>getStartOfLocalWeek(startDate);const spanAccrossMonths=stopDate.startOf("month")>startDate.startOf("month");const labelElements=[];if(scaleId==="year"&&!spanAccrossDays){labelElements.push(startDate.toLocaleString(yearlessDateFormat));}else if((scaleId==="day"&&spanAccrossDays)||(scaleId==="week"&&spanAccrossWeeks)||(scaleId==="month"&&spanAccrossMonths)||(scaleId==="year"&&spanAccrossDays)){labelElements.push(startDate.toLocaleString(yearlessDateFormat));labelElements.push(stopDate.toLocaleString(yearlessDateFormat));}
if(record.allocated_hours&&!spanAccrossDays&&["week","month"].includes(scaleId)){const durationStr=this.getDurationStr(record);labelElements.push(startDate.toFormat("t"),`${stopDate.toFormat("t")}${durationStr}`);}
if(scaleId!=="month"||!record.allocated_hours||spanAccrossDays){labelElements.push(record.display_name);}
return labelElements.filter((el)=>!!el).join(" - ");}
getDurationStr(record){const durationStr=formatFloatTime(record.allocated_hours,{noLeadingZeroHour:true,}).replace(/(:00|:)/g,"h");return` (${durationStr})`;}
getGroupPillDisplayName(pill){return pill.aggregateValue;}
getGridPosition(position){const style=[];const keys=Object.keys(pick(position,"column","row"));for(const key of keys){const prefix=key.slice(0,1);const[first,last]=position[key];style.push(`grid-${key}:${prefix}${first}/${prefix}${last}`);}
return style.join(";");}
setSomeGridStyleProperties(){const rowsTemplate=this.computeRowsTemplate();const colsTemplate=this.computeColsTemplate();this.gridRef.el.style.setProperty("--Gantt__GridRows-grid-template-rows",rowsTemplate);this.gridRef.el.style.setProperty("--Gantt__GridColumns-grid-template-columns",colsTemplate);}
getGridStyle(){const rowsTemplate=this.computeRowsTemplate();const colsTemplate=this.computeColsTemplate();const style={"--Gantt__RowHeader-width":`${this.rowHeaderWidth}px`,"--Gantt__Pill-height":"35px","--Gantt__Thumbnail-max-height":"16px","--Gantt__GridRows-grid-template-rows":rowsTemplate,"--Gantt__GridColumns-grid-template-columns":colsTemplate,};if(this.totalWidth!==null){style.width=`${this.totalWidth}px`;}
return Object.entries(style).map((entry)=>entry.join(":")).join(";");}
getPill(record){const{canEdit,dateStartField,dateStopField,disableDrag,globalStart,globalStop}=this.model.metaData;const startOutside=record[dateStartField]<globalStart;let recordDateStopField=record[dateStopField];if(this.model.dateStopFieldIsDate()){recordDateStopField=recordDateStopField.plus({day:1});}
const stopOutside=recordDateStopField>globalStop;const pillStartDate=startOutside?globalStart:record[dateStartField];const pillStopDate=stopOutside?globalStop:recordDateStopField;const disableStartResize=!canEdit||startOutside;const disableStopResize=!canEdit||stopOutside;const pill={disableDrag:disableDrag||disableStartResize||disableStopResize,disableStartResize,disableStopResize,grid:{column:this.getGridColumnFromDates(pillStartDate,pillStopDate)},record,};return pill;}
getGridColumnFromDates(startDate,stopDate){const{globalStart,scale}=this.model.metaData;const{cellPart,interval}=scale;const{column:column1,delta:delta1}=this.getSubColumnFromDate(startDate);const{column:column2,delta:delta2}=this.getSubColumnFromDate(stopDate,false);const firstCol=1+diffColumn(globalStart,column1,interval)*cellPart+delta1;const span=diffColumn(column1,column2,interval)*cellPart+delta2-delta1;return[firstCol,firstCol+span];}
getSubColumnFromDate(date,onLeft=true){const{interval,cellPart,cellTime,time}=this.model.metaData.scale;const column=date.startOf(interval);let delta;if(onLeft){delta=0;for(let i=1;i<cellPart;i++){const subCellStart=dateAddFixedOffset(column,{[time]:i*cellTime});if(subCellStart<=date){delta+=1;}else{break;}}}else{delta=cellPart;for(let i=cellPart-1;i>=0;i--){const subCellStart=dateAddFixedOffset(column,{[time]:i*cellTime});if(subCellStart>=date){delta-=1;}else{break;}}}
return{column,delta};}
getSubColumnFromColNumber(col){let subColumn=this.mappingColToSubColumn.get(col);if(!subColumn){const{globalStart,scale}=this.model.metaData;const{interval,cellPart,cellTime,time}=scale;const delta=(col-1)%cellPart;const columnIndex=(col-1-delta)/cellPart;const start=globalStart.plus({[interval]:columnIndex});subColumn=this.makeSubColumn(start,delta,cellTime,time);this.mappingColToSubColumn.set(col,subColumn);}
return subColumn;}
getColumnFromColNumber(col){let column=this.mappingColToColumn.get(col);if(!column){const{globalStart,scale}=this.model.metaData;const{interval,cellPart}=scale;const delta=(col-1)%cellPart;const columnIndex=(col-1-delta)/cellPart;const start=globalStart.plus({[interval]:columnIndex});const stop=start.endOf(interval);column={start,stop};this.mappingColToColumn.set(col,column);}
return column;}
getPillEl(pillId){return this.getPillWrapperEl(pillId).querySelector(".o_gantt_pill");}
getPillFromGroup(group,maxAggregateValue,consolidate){const{excludeField,field,maxValue}=this.model.metaData.consolidationParams;const minColor=215;const maxColor=100;const newPill={id:`__pill__${this.nextPillId++}`,level:0,aggregateValue:group.aggregateValue,grid:group.grid,};if(consolidate&&field){newPill.consolidationValue=0;for(const pill of group.pills){if(!pill.record[excludeField]){newPill.consolidationValue+=pill.record[field];}}
newPill.consolidationMaxValue=maxValue;newPill.consolidationExceeded=newPill.consolidationValue>newPill.consolidationMaxValue;}
if(consolidate&&maxValue){const status=newPill.consolidationExceeded?"danger":"success";newPill.className=`bg-${status} border-${status}`;newPill.displayName=newPill.consolidationValue;}else{const color=minColor-
Math.round((newPill.aggregateValue-1)/maxAggregateValue)*(minColor-maxColor);newPill.style=`background-color:rgba(${color},${color},${color},0.6)`;newPill.displayName=this.getGroupPillDisplayName(newPill);}
return newPill;}
getPills(){const{records}=this.model.data;const{dateStartField}=this.model.metaData;const pills=[];for(const record of records){const pill=this.getPill(record);pills.push(this.enrichPill(pill));}
return pills.sort((p1,p2)=>p1.grid.column[0]-p2.grid.column[0]||p1.record[dateStartField]-p2.record[dateStartField]);}
getPillWrapperEl(pillId){const pillSelector=`:scope > [data-pill-id="${pillId}"]`;return this.cellContainerRef.el?.querySelector(pillSelector);}
getPlanDialogDomain(){const{dateStartField,dateStopField}=this.model.metaData;const newDomain=Domain.removeDomainLeaves(this.env.searchModel.globalDomain,[dateStartField,dateStopField,]);return Domain.and([newDomain,["|",[dateStartField,"=",false],[dateStopField,"=",false]],]).toList({});}
getPoint(pillId,onRight){if(localization.direction==="rtl"){onRight=!onRight;}
const pillEl=this.getPillEl(pillId);const pillRect=pillEl.getBoundingClientRect();return{left:pillRect.left+(onRight?pillRect.width:0),top:pillRect.top+pillRect.height/2,};}
getPopoverProps(pill){const{record}=pill;const{id:resId,display_name:displayName}=record;const{canEdit,dateStartField,dateStopField,popoverArchParams,resModel}=this.model.metaData;const context=popoverArchParams.bodyTemplate?{...record}:{name:displayName,start:record[dateStartField].toFormat("f"),stop:record[dateStopField].toFormat("f"),};return{...popoverArchParams,title:displayName,context,resId,resModel,reload:()=>this.model.fetchData(),buttons:[{id:"open_view_edit_dialog",text:canEdit?_t("Edit"):_t("View"),class:"btn btn-sm btn-primary",onClick:()=>this.model.mutex.exec(()=>this.props.openDialog({resId})),},],};}
getProgressBarProps(row){return{progressBar:row.progressBar,reactive:this.progressBarsReactive,rowId:row.id,};}
getRowCellColors(row){const{unavailabilities}=row;const{cellPart}=this.model.metaData.scale;let index=0;let j=0;const cellColors={};const subSlotUnavailabilities=[];for(const subColumn of this.subColumns){const{isToday,start,stop,columnId}=subColumn;if(index<unavailabilities.length){let subSlotUnavailable=0;for(let i=index;i<unavailabilities.length;i++){const u=unavailabilities[i];if(stop>u.stop){index++;continue;}else if(u.start<=start){subSlotUnavailable=1;}
break;}
subSlotUnavailabilities.push(subSlotUnavailable);if((j+1)%cellPart===0){const style=getCellColor(cellPart,subSlotUnavailabilities,isToday);subSlotUnavailabilities.splice(0,cellPart);if(style){cellColors[columnId]=style;}}
j++;}}
return cellColors;}
getFromData(groupedByField,resId,key,defaultVal){const values=this.model.data[key];if(groupedByField){return values[groupedByField]?.[resId??false]||defaultVal;}
return values.__default?.false||defaultVal;}
getRowProgressBar(groupedByField,resId){return this.getFromData(groupedByField,resId,"progressBars",null);}
getRowUnavailabilities(groupedByField,resId){return this.getFromData(groupedByField,resId,"unavailabilities",[]);}
getRowTypeHeight(type){return{t0:24,t1:36,t2:16,}[type];}
getRowTitleStyle(row){return`grid-column: ${row.groupLevel + 2} / -1`;}
openPlanDialogCallback(){}
getSelectCreateDialogProps(params){const domain=this.getPlanDialogDomain();const schedule=this.model.getDialogContext(params);return{title:_t("Plan"),resModel:this.model.metaData.resModel,context:schedule,domain,noCreate:!this.model.metaData.canCellCreate,onSelected:(resIds)=>{if(resIds.length){this.model.reschedule(resIds,schedule,this.openPlanDialogCallback.bind(this));}},};}
getTotalRow(pills){const preRow={groupLevel:0,id:"[]",rows:[],name:_t("Total"),recordIds:pills.map(({record})=>record.id),};this.currentGridRow=1;const result=this.processRow(preRow,pills);const[totalRow]=result.rows;const allPills=this.rowPills[totalRow.id]||[];const maxAggregateValue=Math.max(...allPills.map((p)=>p.aggregateValue));totalRow.factor=maxAggregateValue?90/maxAggregateValue:0;return totalRow;}
highlightPill(pillId,highlighted){const pill=this.pills[pillId];if(!pill){return;}
pill.highlighted=highlighted;const pillWrapper=this.getPillWrapperEl(pillId);pillWrapper?.classList.toggle("highlight",highlighted);pillWrapper?.classList.toggle("o_connector_creator_highlight",highlighted&&this.connectorDragState.dragging);}
initializeConnectors(){for(const connectorId in this.connectors){this.deleteConnector(connectorId);}}
isPillSmall(pill){return this.cellPartWidth*pill.grid.column[1]<pill.displayName.length*10;}
isDisabled(row=null){return this.model.useSampleModel;}
isHoverable(row){return!this.model.useSampleModel;}
mergeGroups(groups){if(groups.length<=1){return groups;}
const index=Math.floor(groups.length/2);const left=this.mergeGroups(groups.slice(0,index));const right=this.mergeGroups(groups.slice(index));const group=right[0];if(!group.break){const previousGroup=left.pop();group.break=previousGroup.break;group.grid.column[0]=previousGroup.grid.column[0];group.aggregateValue=this.getAggregateValue(group,previousGroup);}
return[...left,...right];}
onWillRender(){if(this.noDisplayedConnectors&&this.shouldRenderConnectors()){delete this.noDisplayedConnectors;this.computeDerivedParams();}
if(this.shouldComputeSomeWidths){this.computeSomeWidths();}
if(this.shouldComputeSomeWidths||this.shouldComputeGridColumns){this.virtualGrid.setColumnsWidths(new Array(this.columnCount).fill(this.columnWidth));this.computeVisibleColumns();}
if(this.shouldComputeGridRows){this.virtualGrid.setRowsHeights(this.gridRows);this.computeVisibleRows();}
if(this.shouldComputeSomeWidths||this.shouldComputeGridColumns||this.shouldComputeGridRows){delete this.shouldComputeSomeWidths;delete this.shouldComputeGridColumns;delete this.shouldComputeGridRows;this.computeVisiblePills();if(this.shouldRenderConnectors()){this.computeVisibleConnectors();}else{this.noDisplayedConnectors=true;}}
delete this.shouldComputeSomeWidths;delete this.shouldComputeGridColumns;delete this.shouldComputeGridRows;}
pushGridRows(gridRows){for(const key of["t0","t1","t2"]){if(key in gridRows){const types=new Array(gridRows[key]).fill(this.getRowTypeHeight(key));this.gridRows.push(...types);}}}
processPillsAsRows(row,pills){const rows=[];const parsedId=JSON.parse(row.id);if(pills.length){for(const pill of pills){const{id:resId,display_name:name}=pill.record;const subRow={id:JSON.stringify([...parsedId,{id:resId}]),resId,name,groupLevel:row.groupLevel+1,recordIds:[resId],fromServer:row.fromServer,parentResId:row.resId??row.parentResId,parentGroupedField:row.groupedByField||row.parentGroupedField,};const res=this.processRow(subRow,[pill],false);rows.push(...res.rows);}}else{const subRow={id:JSON.stringify([...parsedId,{}]),resId:false,name:"",groupLevel:row.groupLevel+1,recordIds:[],fromServer:row.fromServer,parentResId:row.resId??row.parentResId,parentGroupedField:row.groupedByField||row.parentGroupedField,};const res=this.processRow(subRow,[],false);rows.push(...res.rows);}
return rows;}
processRow(row,pills,processAsGroup=true){const{dependencyField,displayUnavailability,fields}=this.model.metaData;const{displayMode}=this.model.displayParams;const{consolidate,fromServer,groupedByField,groupLevel,id,name,parentResId,parentGroupedField,resId,rows,recordIds,__extra__,}=row;const remainingPills=[];let rowPills=[];const groupPills=[];const isMany2many=groupedByField&&fields[groupedByField].type==="many2many";for(const pill of pills){const{record}=pill;const pushPill=recordIds.includes(record.id);let keepPill=false;if(pushPill&&isMany2many){const value=record[groupedByField];if(Array.isArray(value)&&value.length>1){keepPill=true;}}
if(pushPill){const rowPill={...pill};rowPills.push(rowPill);groupPills.push(pill);}
if(!pushPill||keepPill){remainingPills.push(pill);}}
if(displayMode==="sparse"&&__extra__){const rows=this.processPillsAsRows(row,groupPills);return{rows,pillsToProcess:remainingPills};}
const isGroup=displayMode==="sparse"?processAsGroup:Boolean(rows);const gridRowTypes=isGroup?{t0:1}:{t1:1};if(rowPills.length){if(isGroup){if(this.shouldComputeAggregateValues(row)){const groups=this.aggregatePills(rowPills,row);const maxAggregateValue=Math.max(...groups.map((group)=>group.aggregateValue));rowPills=groups.map((group)=>this.getPillFromGroup(group,maxAggregateValue,consolidate));}else{rowPills=[];}}else{const level=this.calculatePillsLevel(rowPills);gridRowTypes.t1=level;if(!this.isTouchDevice){gridRowTypes.t2=1;}}}
const progressBar=this.getRowProgressBar(groupedByField,resId);if(progressBar&&this.isTouchDevice&&(!gridRowTypes.t1||gridRowTypes.t1===1)){gridRowTypes.t1=(gridRowTypes.t1||0)+1;}
if(row.id!=="[]"){this.pushGridRows(gridRowTypes);}
for(const rowPill of rowPills){rowPill.id=`__pill__${this.nextPillId++}`;const pillFirstRow=this.currentGridRow+rowPill.level;rowPill.grid={...rowPill.grid,row:[pillFirstRow,pillFirstRow+1],};if(!isGroup){const{record}=rowPill;if(this.shouldRenderRecordConnectors(record)){if(!this.mappingRecordToPillsByRow[record.id]){this.mappingRecordToPillsByRow[record.id]={masterIds:record[dependencyField],pills:{},};}
this.mappingRecordToPillsByRow[record.id].pills[id]=rowPill;if(!this.mappingRowToPillsByRecord[id]){this.mappingRowToPillsByRecord[id]={};}
this.mappingRowToPillsByRecord[id][record.id]=rowPill;}}
rowPill.rowId=id;this.pills[rowPill.id]=rowPill;}
this.rowPills[id]=rowPills;const subRowsCount=Object.values(gridRowTypes).reduce((acc,val)=>acc+val,0);const processedRow={cellColors:{},fromServer,groupedByField,groupLevel,id,isGroup,name,progressBar,resId,grid:{row:[this.currentGridRow,this.currentGridRow+subRowsCount],},};if(displayUnavailability&&!isGroup){processedRow.unavailabilities=this.getRowUnavailabilities(parentGroupedField||groupedByField,parentResId??resId);}
this.rowByIds[id]=processedRow;this.currentGridRow+=subRowsCount;const field=this.model.metaData.thumbnails[groupedByField];if(field){const model=this.model.metaData.fields[groupedByField].relation;processedRow.thumbnailUrl=url("/web/image",{model,id:resId,field,});}
const result={rows:[processedRow],pillsToProcess:remainingPills};if(!this.model.isClosed(id)){if(rows){let pillsToProcess=groupPills;for(const subRow of rows){const res=this.processRow(subRow,pillsToProcess);result.rows.push(...res.rows);pillsToProcess=res.pillsToProcess;}}else if(displayMode==="sparse"&&processAsGroup){const rows=this.processPillsAsRows(row,groupPills);result.rows.push(...rows);}}
return result;}
_getRowUnavailabilities(groupedByField,resId){const{unavailabilities}=this.model.data;if(groupedByField){return unavailabilities[groupedByField]?.[resId??false]||[];}
return unavailabilities.__default?.false||[];}
async resizePillDrop({pill,diff,direction}){const{dateStartField,dateStopField,scale}=this.model.metaData;const{cellTime,time}=scale;const{record}=this.pills[pill.dataset.pillId];const params=this.getScheduleParams(pill);if(direction==="start"){params.start=dateAddFixedOffset(record[dateStartField],{[time]:cellTime*diff});}else{params.stop=dateAddFixedOffset(record[dateStopField],{[time]:cellTime*diff});}
const schedule=this.model.getSchedule(params);await this.model.reschedule(record.id,schedule,this.openPlanDialogCallback);}
setConnector(params,sourceId=null,targetId=null){const connectorParams={...params};const connectorId=params.id||`__connector__${this.nextConnectorId++}`;if(sourceId){connectorParams.sourcePoint=()=>this.getPoint(sourceId,true);}
if(targetId){connectorParams.targetPoint=()=>this.getPoint(targetId,false);}
if(this.connectors[connectorId]){Object.assign(this.connectors[connectorId],connectorParams);}else{this.connectors[connectorId]={id:connectorId,highlighted:false,displayButtons:false,...connectorParams,};this.mappingConnectorToPills[connectorId]={sourcePillId:sourceId,targetPillId:targetId,};}
if(sourceId){if(!this.mappingPillToConnectors[sourceId]){this.mappingPillToConnectors[sourceId]=[];}
this.mappingPillToConnectors[sourceId].push(connectorId);}
if(targetId){if(!this.mappingPillToConnectors[targetId]){this.mappingPillToConnectors[targetId]=[];}
this.mappingPillToConnectors[targetId].push(connectorId);}}
setStickyPill(pillEl){this.stickyPillId=pillEl?pillEl.dataset.pillId:null;}
shouldComputeAggregateValues(row){return true;}
shouldMergeGroups(){return true;}
shouldRenderConnectors(){return(this.model.metaData.dependencyField&&!this.model.useSampleModel&&!this.env.isSmall);}
shouldRenderRecordConnectors(record){return this.shouldRenderConnectors();}
toggleConnectorHighlighting(connectorId,highlighted){const connector=this.connectors[connectorId];if(!connector||(!connector.highlighted&&!highlighted)){return;}
connector.highlighted=highlighted;connector.displayButtons=highlighted;const{sourcePillId,targetPillId}=this.mappingConnectorToPills[connectorId];this.highlightPill(sourcePillId,highlighted);this.highlightPill(targetPillId,highlighted);}
togglePillHighlighting(pillId,highlighted){const pill=this.pills[pillId];if(!pill||pill.highlighted===highlighted){return;}
const{record}=pill;const pillIdsToHighlight=new Set([pillId]);if(record&&this.shouldRenderRecordConnectors(record)){const{pills:relatedPills}=this.mappingRecordToPillsByRow[record.id];for(const pill of Object.values(relatedPills)){pillIdsToHighlight.add(pill.id);}
for(const[connectorId,connector]of Object.entries(this.connectors)){const ids=Object.values(this.getRecordIds(connectorId));if(ids.includes(record.id)){connector.highlighted=highlighted;connector.displayButtons=false;}}}
for(const id of pillIdsToHighlight){this.highlightPill(id,highlighted);}}
onCellClicked(rowId,col){if(!this.preventClick){this.preventClick=true;setTimeout(()=>(this.preventClick=false),1000);const{canCellCreate,canPlan}=this.model.metaData;if(canPlan){this.onPlan(rowId,col,col);}else if(canCellCreate){this.onCreate(rowId,col,col);}}}
onCreate(rowId,startCol,stopCol){const{start,stop}=this.getColumnStartStop(startCol,stopCol);const context=this.model.getDialogContext({rowId,start,stop,withDefault:true,});this.props.create(context);}
onInteractionChange(){let{dragAction,mode}=this.interaction;if(mode==="drag"){mode=dragAction;}
if(this.gridRef.el){for(const[action,className]of INTERACTION_CLASSNAMES){this.gridRef.el.classList.toggle(className,mode===action);}}}
onPointerLeave(){this.throttledComputeHoverParams.cancel();if(!this.isDragging){const hoveredConnectorId=this.hovered.connector?.dataset.connectorId;this.toggleConnectorHighlighting(hoveredConnectorId,false);const hoveredPillId=this.hovered.pill?.dataset.pillId;this.togglePillHighlighting(hoveredPillId,false);}
this.hovered.connector=null;this.hovered.pill=null;this.hovered.hoverable=null;this.computeDerivedParamsFromHover();}
computeHoverParams(ev){let els=null;let position={};if(ev.type==="scroll"){position=this.cursorPosition;}else{position.x=ev.clientX;position.y=ev.clientY;this.cursorPosition=position;}
const pointedEls=()=>els||(els=document.elementsFromPoint(position.x,position.y));const find=(selector)=>ev.target.closest?.(selector)||pointedEls().find((el)=>el.matches(selector))||null;this.hovered.connector=find(".o_gantt_connector");this.hovered.hoverable=find(".o_gantt_hoverable");this.hovered.pill=find(".o_gantt_pill_wrapper");this.computeDerivedParamsFromHover();}
onPillClicked(ev,pill){if(this.popover.isOpen){return;}
this.popover.target=ev.target.closest(".o_gantt_pill_wrapper");this.popover.open(this.popover.target,this.getPopoverProps(pill));}
onPlan(rowId,startCol,stopCol){const{start,stop}=this.getColumnStartStop(startCol,stopCol);this.dialogService.add(SelectCreateDialog,this.getSelectCreateDialogProps({rowId,start,stop,withDefault:true}));}
getRecordIds(connectorId){const{sourcePillId,targetPillId}=this.mappingConnectorToPills[connectorId];return{masterId:this.pills[sourcePillId]?.record.id,slaveId:this.pills[targetPillId]?.record.id,};}
onRemoveButtonClick(connectorId){const{masterId,slaveId}=this.getRecordIds(connectorId);this.model.removeDependency(masterId,slaveId);}
rescheduleAccordingToDependencyCallback(result){if(result["type"]!=="warning"&&"old_vals_per_pill_id"in result){this.model.toggleHighlightPlannedFilter(Object.keys(result["old_vals_per_pill_id"]).map(Number));}
this.notificationFn?.();this.notificationFn=this.notificationService.add(markup(`<i class="fa btn-link fa-check"></i><span class="ms-1">${escape(
                    result["message"]
                )}</span>`),{type:result["type"],sticky:true,buttons:result["type"]==="warning"?[]:[{name:"Undo",icon:"fa-undo",onClick:async()=>{const ids=Object.keys(result["old_vals_per_pill_id"]).map(Number);await this.orm.call(this.model.metaData.resModel,"action_rollback_scheduling",[ids,result["old_vals_per_pill_id"]]);this.notificationFn();await this.model.fetchData();},},],});}
async onRescheduleButtonClick(direction,connectorId){const{masterId,slaveId}=this.getRecordIds(connectorId);await this.model.rescheduleAccordingToDependency(direction,masterId,slaveId,this.rescheduleAccordingToDependencyCallback.bind(this));}
onWindowKeyDown(ev){if(ev.key==="Control"){this.prevDragAction=this.interaction.dragAction==="copy"?"reschedule":this.interaction.dragAction;this.interaction.dragAction="copy";}}
onWindowKeyUp(ev){if(ev.key==="Control"){this.interaction.dragAction=this.prevDragAction||"reschedule";}}}
return __exports;});;

/* /web_gantt/static/src/gantt_renderer_controls.js */
odoo.define('@web_gantt/gantt_renderer_controls',['@odoo/owl','@web/core/datetime/datetime_hook','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_hooks','@web/core/dropdown/dropdown_item','@web/core/l10n/dates','@web/core/l10n/translation','@web/core/utils/objects','@web/core/utils/timing','@web_gantt/gantt_helpers'],function(require){'use strict';let __exports={};const{Component,useState}=require("@odoo/owl");const{useDateTimePicker}=require("@web/core/datetime/datetime_hook");const{Dropdown}=require("@web/core/dropdown/dropdown");const{useDropdownState}=require("@web/core/dropdown/dropdown_hooks");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{formatDate}=require("@web/core/l10n/dates");const{_t}=require("@web/core/l10n/translation");const{pick}=require("@web/core/utils/objects");const{debounce}=require("@web/core/utils/timing");const{diffColumn,getRangeFromDate,localStartOf,useGanttResponsivePopover,}=require("@web_gantt/gantt_helpers");const{DateTime}=luxon;const KEYS=["startDate","stopDate","rangeId","focusDate"];const GanttRendererControls=__exports.GanttRendererControls=class GanttRendererControls extends Component{static template="web_gantt.GanttRendererControls";static components={Dropdown,DropdownItem,};static props=["model","displayExpandCollapseButtons","focusToday","getCurrentFocusDate"];static toolbarContentTemplate="web_gantt.GanttRendererControls.ToolbarContent";static rangeMenuTemplate="web_gantt.GanttRendererControls.RangeMenu";setup(){this.model=this.props.model;this.updateMetaData=debounce(()=>this.model.fetchData(this.makeParams()),500);const{metaData}=this.model;this.state=useState({scaleIndex:this.getScaleIndex(metaData.scale.id),...pick(metaData,...KEYS),});this.pickerValues=useState({startDate:metaData.startDate,stopDate:metaData.stopDate,});this.scalesRange={min:0,max:Object.keys(metaData.scales).length-1};const getPickerProps=(key)=>({type:"date",value:this.pickerValues[key]});this.startPicker=useDateTimePicker({target:"start-picker",onApply:(date)=>{this.pickerValues.startDate=date;if(this.pickerValues.stopDate<date){this.pickerValues.stopDate=date;}else if(date.plus({year:10,day:-1})<this.pickerValues.stopDate){this.pickerValues.stopDate=date.plus({year:10,day:-1});}},get pickerProps(){return getPickerProps("startDate");},createPopover:(...args)=>useGanttResponsivePopover(_t("Gantt start date"),...args),ensureVisibility:()=>false,});this.stopPicker=useDateTimePicker({target:"stop-picker",onApply:(date)=>{this.pickerValues.stopDate=date;if(date<this.pickerValues.startDate){this.pickerValues.startDate=date;}else if(this.pickerValues.startDate.plus({year:10,day:-1})<date){this.pickerValues.startDate=date.minus({year:10,day:-1});}},get pickerProps(){return getPickerProps("stopDate");},createPopover:(...args)=>useGanttResponsivePopover(_t("Gantt stop date"),...args),ensureVisibility:()=>false,});this.dropdownState=useDropdownState();}
get dateDescription(){const{focusDate,rangeId}=this.state;switch(rangeId){case"quarter":return focusDate.toFormat(`Qq yyyy`);case"day":return formatDate(focusDate);default:return this.model.metaData.scales[rangeId].groupHeaderFormatter(focusDate,this.env);}}
getFormattedDate(date){return formatDate(date);}
getScaleIdFromIndex(index){const keys=Object.keys(this.model.metaData.scales);return keys[keys.length-1-index];}
getScaleIndex(scaleId){const keys=Object.keys(this.model.metaData.scales);return keys.length-1-keys.findIndex((id)=>id===scaleId);}
getScaleIndexFromRangeId(rangeId){const{ranges}=this.model.metaData;const scaleId=ranges[rangeId].scaleId;return this.getScaleIndex(scaleId);}
incrementScale(inc){if(inc===1?this.state.scaleIndex<this.scalesRange.max:this.scalesRange.min<this.state.scaleIndex){this.state.scaleIndex+=inc;this.updateMetaData();}}
isSelected(rangeId){if(rangeId==="custom"){return(this.state.rangeId===rangeId||!localStartOf(this.state.focusDate,this.state.rangeId).equals(localStartOf(DateTime.now(),this.state.rangeId)));}
return(this.state.rangeId===rangeId&&localStartOf(this.state.focusDate,rangeId).equals(localStartOf(DateTime.now(),rangeId)));}
makeParams(){return{currentFocusDate:this.props.getCurrentFocusDate(),scaleId:this.getScaleIdFromIndex(this.state.scaleIndex),...pick(this.state,...KEYS),};}
onApply(){this.state.startDate=this.pickerValues.startDate;this.state.stopDate=this.pickerValues.stopDate;this.state.rangeId="custom";this.updateMetaData();this.dropdownState.close();}
onTodayClicked(){const success=this.props.focusToday();if(success){return;}
this.state.focusDate=DateTime.local().startOf("day");if(this.state.rangeId==="custom"){const diff=diffColumn(this.state.startDate,this.state.stopDate,"day");const n=Math.floor(diff/2);const m=diff-n;this.state.startDate=this.state.focusDate.minus({day:n});this.state.stopDate=this.state.focusDate.plus({day:m-1});}else{this.state.startDate=this.state.focusDate.startOf(this.state.rangeId);this.state.stopDate=this.state.focusDate.endOf(this.state.rangeId).startOf("day");}
this.updatePickerValues();this.updateMetaData();}
selectRange(direction){const sign=direction==="next"?1:-1;const{focusDate,rangeId,startDate,stopDate}=this.state;if(rangeId==="custom"){const diff=diffColumn(startDate,stopDate,"day")+1;this.state.focusDate=focusDate.plus({day:sign*diff});this.state.startDate=startDate.plus({day:sign*diff});this.state.stopDate=stopDate.plus({day:sign*diff});}else{Object.assign(this.state,getRangeFromDate(rangeId,focusDate.plus({[rangeId]:sign})));}
this.updatePickerValues();this.updateMetaData();}
selectRangeId(rangeId){Object.assign(this.state,getRangeFromDate(rangeId,DateTime.now().startOf("day")));this.state.scaleIndex=this.getScaleIndexFromRangeId(rangeId);this.updatePickerValues();this.updateMetaData();}
selectScale(index){this.state.scaleIndex=Number(index);this.updateMetaData();}
updatePickerValues(){this.pickerValues.startDate=this.state.startDate;this.pickerValues.stopDate=this.state.stopDate;}}
return __exports;});;

/* /web_gantt/static/src/gantt_resize_badge.js */
odoo.define('@web_gantt/gantt_resize_badge',['@odoo/owl'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const GanttResizeBadge=__exports.GanttResizeBadge=class GanttResizeBadge extends Component{static props={reactive:{type:Object,shape:{position:{type:Object,shape:{top:Number,right:{type:Number,optional:true},left:{type:Number,optional:true},},optional:true,},diff:{type:Number,optional:true},scale:{type:String,optional:true},},},};static template="web_gantt.GanttResizeBadge";get diff(){return this.props.reactive.diff||0;}
get diffText(){const{diff,props}=this;const prefix=this.diff>0?"+":"";return`${prefix}${diff} ${props.reactive.scale}`;}
get positionStyle(){const{position}=this.props.reactive;const style=[`top:${position.top}px`];if("left"in position){style.push(`left:${position.left}px`);}else{style.push(`right:${position.right}px`);}
return style.join(";");}}
return __exports;});;

/* /web_gantt/static/src/gantt_row_progress_bar.js */
odoo.define('@web_gantt/gantt_row_progress_bar',['@odoo/owl','@web/core/browser/feature_detection'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{hasTouch,isMobileOS}=require("@web/core/browser/feature_detection");const GanttRowProgressBar=__exports.GanttRowProgressBar=class GanttRowProgressBar extends Component{static props={reactive:{type:Object,shape:{hoveredRowId:[String,{value:null}],},},rowId:String,progressBar:{type:Object,shape:{max_value:Number,max_value_formatted:String,ratio:Number,value_formatted:String,warning:{type:String,optional:true},"*":true,},},};static template="web_gantt.GanttRowProgressBar";get show(){const{reactive,rowId}=this.props;return reactive.hoveredRowId===rowId||isMobileOS()||hasTouch();}
get status(){const{ratio}=this.props.progressBar;return ratio>100?"danger":ratio>0?"success":null;}}
return __exports;});;

/* /web_gantt/static/src/gantt_sample_server.js */
odoo.define('@web_gantt/gantt_sample_server',['@web/core/registry'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");function _mockGetGanttData(params){const lazy=!params.limit&&!params.offset&&params.groupby.length===1;let{groups,length}=this._mockWebReadGroup({...params,lazy,fields:["__record_ids:array_agg(id)"],});if(params.limit){groups=groups.slice(0,params.limit);length=groups.length;}
groups.forEach((g)=>(g.__record_ids=g.id));const recordIds=[];for(const group of groups){recordIds.push(...(group.__record_ids||[]));}
const{records}=this._mockWebSearchReadUnity({model:params.model,domain:[["id","in",recordIds]],context:params.context,specification:params.read_specification,});const unavailabilities={};for(const fieldName of params.unavailability_fields||[]){unavailabilities[fieldName]={};}
const progress_bars={};for(const fieldName of params.progress_bar_fields||[]){progress_bars[fieldName]={};}
return{groups,length,records,unavailabilities,progress_bars};}
registry.category("sample_server").add("get_gantt_data",_mockGetGanttData);return __exports;});;

/* /web_gantt/static/src/gantt_view.js */
odoo.define('@web_gantt/gantt_view',['@web/core/registry','@web/search/action_hook','@web_gantt/gantt_arch_parser','@web_gantt/gantt_controller','@web_gantt/gantt_model','@web_gantt/gantt_renderer','@web/core/utils/objects'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{scrollSymbol}=require("@web/search/action_hook");const{GanttArchParser}=require("@web_gantt/gantt_arch_parser");const{GanttController}=require("@web_gantt/gantt_controller");const{GanttModel}=require("@web_gantt/gantt_model");const{GanttRenderer}=require("@web_gantt/gantt_renderer");const{omit}=require("@web/core/utils/objects");const viewRegistry=registry.category("views");const ganttView=__exports.ganttView={type:"gantt",Controller:GanttController,Renderer:GanttRenderer,Model:GanttModel,ArchParser:GanttArchParser,searchMenuTypes:["filter","groupBy","favorite"],buttonTemplate:"web_gantt.GanttView.Buttons",props:(genericProps,view,config)=>{const modelParams={};let scrollPosition;if(genericProps.state){scrollPosition=genericProps.state[scrollSymbol];modelParams.metaData=genericProps.state.metaData;modelParams.displayParams=genericProps.state.displayParams;}else{const{arch,fields,resModel}=genericProps;const parser=new view.ArchParser();const archInfo=parser.parse(arch);let formViewId=archInfo.formViewId;if(!formViewId){const formView=config.views.find((v)=>v[1]==="form");if(formView){formViewId=formView[0];}}
modelParams.metaData={...omit(archInfo,"displayMode"),fields,resModel,formViewId,};modelParams.displayParams={displayMode:archInfo.displayMode,};}
return{...genericProps,modelParams,Model:view.Model,Renderer:view.Renderer,buttonTemplate:view.buttonTemplate,scrollPosition,};},};viewRegistry.add("gantt",ganttView);return __exports;});;

/* /planning/static/src/views/planning_graph/planning_graph.js */
odoo.define('@planning/views/planning_graph/planning_graph',['@web/core/registry','@web/views/graph/graph_view','@planning/views/planning_search_model','@planning/views/planning_graph/planning_graph_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{graphView}=require("@web/views/graph/graph_view");const{PlanningSearchModel}=require("@planning/views/planning_search_model");const{PlanningGraphModel}=require("@planning/views/planning_graph/planning_graph_model");registry.category("views").add("planning_graph",{...graphView,SearchModel:PlanningSearchModel,Model:PlanningGraphModel,});return __exports;});;

/* /planning/static/src/views/planning_graph/planning_graph_model.js */
odoo.define('@planning/views/planning_graph/planning_graph_model',['@web/core/domain','@web/views/graph/graph_model','@planning/views/planning_hooks'],function(require){'use strict';let __exports={};const{Domain}=require("@web/core/domain");const{GraphModel}=require("@web/views/graph/graph_model");const{usePlanningModelActions}=require("@planning/views/planning_hooks");const PlanningGraphModel=__exports.PlanningGraphModel=class PlanningGraphModel extends GraphModel{setup(){super.setup(...arguments);this.getHighlightIds=usePlanningModelActions({getHighlightPlannedIds:()=>this.env.searchModel.highlightPlannedIds,getContext:()=>this.env.searchModel._context,}).getHighlightIds;}
async load(searchParams){const highlightIds=await this.getHighlightIds();if(highlightIds){searchParams.domain=Domain.and([searchParams.domain,[["id","in",highlightIds]]]).toList();}
return await super.load(searchParams);}}
return __exports;});;

/* /planning/static/src/views/planning_pivot/planning_pivot.js */
odoo.define('@planning/views/planning_pivot/planning_pivot',['@web/core/registry','@web/views/pivot/pivot_view','@planning/views/planning_search_model','@planning/views/planning_pivot/planning_pivot_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{pivotView}=require("@web/views/pivot/pivot_view");const{PlanningSearchModel}=require("@planning/views/planning_search_model");const{PlanningPivotModel}=require("@planning/views/planning_pivot/planning_pivot_model");registry.category("views").add("planning_pivot",{...pivotView,SearchModel:PlanningSearchModel,Model:PlanningPivotModel,});return __exports;});;

/* /planning/static/src/views/planning_pivot/planning_pivot_model.js */
odoo.define('@planning/views/planning_pivot/planning_pivot_model',['@web/core/domain','@web/views/pivot/pivot_model','@planning/views/planning_hooks'],function(require){'use strict';let __exports={};const{Domain}=require("@web/core/domain");const{PivotModel}=require("@web/views/pivot/pivot_model");const{usePlanningModelActions}=require("@planning/views/planning_hooks");const PlanningPivotModel=__exports.PlanningPivotModel=class PlanningPivotModel extends PivotModel{setup(){super.setup(...arguments);this.getHighlightIds=usePlanningModelActions({getHighlightPlannedIds:()=>this.env.searchModel.highlightPlannedIds,getContext:()=>this.env.searchModel._context,}).getHighlightIds;}
async load(searchParams){const highlightIds=await this.getHighlightIds();if(highlightIds){searchParams.domain=Domain.and([searchParams.domain,[["id","in",highlightIds]]]).toList();}
return await super.load(searchParams);}}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_employee_avatar.js */
odoo.define('@planning/views/planning_gantt/planning_employee_avatar',['@resource_mail/components/avatar_card_resource/avatar_card_resource_popover','@web/core/popover/popover_hook','@mail/views/web/fields/avatar/avatar','@odoo/owl','@planning/views/planning_hooks'],function(require){'use strict';let __exports={};const{AvatarCardResourcePopover}=require("@resource_mail/components/avatar_card_resource/avatar_card_resource_popover");const{usePopover}=require("@web/core/popover/popover_hook");const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{useRef}=require("@odoo/owl");const{setupDisplayName}=require("@planning/views/planning_hooks");const PlanningEmployeeAvatar=__exports.PlanningEmployeeAvatar=class PlanningEmployeeAvatar extends Avatar{static template="planning.PlanningEmployeeAvatar";static props={...Avatar.props,isResourceMaterial:{type:Boolean,optional:true},showPopover:{type:Boolean,optional:true},resourceColor:{type:Number,optional:true},};setup(){const displayNameRef=useRef("displayName");setupDisplayName(displayNameRef);this.avatarCard=usePopover(AvatarCardResourcePopover);}
openCard(ev){if(this.env.isSmall||!this.props.showPopover){return;}
const target=ev.currentTarget;if(!this.avatarCard.isOpen){this.avatarCard.open(target,{id:this.props.resId,});}}}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_controller.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_controller',['@web/core/l10n/translation','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web_gantt/gantt_controller','@planning/views/planning_hooks','@web/core/l10n/dates','@web/core/domain','@web_gantt/gantt_helpers'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{GanttController}=require("@web_gantt/gantt_controller");const{usePlanningControllerActions}=require("@planning/views/planning_hooks");const{serializeDateTime}=require("@web/core/l10n/dates");const{Domain}=require("@web/core/domain");const{localEndOf,localStartOf}=require("@web_gantt/gantt_helpers");const{DateTime}=luxon;const PlanningGanttController=__exports.PlanningGanttController=class PlanningGanttController extends GanttController{static components={...GanttController.components,Dropdown,DropdownItem,}
setup(){super.setup();this.planningControllerActions=usePlanningControllerActions({getAdditionalContext:()=>this.model.getAdditionalContext(),getDomain:()=>{const{dateStartField,dateStopField,scale}=this.model.metaData;const focusDate=this.getCurrentFocusDate();const start=localStartOf(focusDate,scale.unit);const stop=localEndOf(focusDate,scale.unit);const domain=Domain.and([this.model.searchParams.domain,["&",[dateStartField,"<",serializeDateTime(stop)],[dateStopField,">",serializeDateTime(start)],],]);return domain.toList();},getRecords:()=>{if(this.model.useSampleModel){return[];}
return this.model.data.records;},getResModel:()=>this.model.metaData.resModel,getStartDate:()=>{const{scale}=this.model.metaData;const focusDate=this.getCurrentFocusDate();return localStartOf(focusDate,scale.unit);},toggleHighlightPlannedFilter:(highlightPlannedIds)=>this.env.searchModel.toggleHighlightPlannedFilter(highlightPlannedIds),reload:()=>this.model.fetchData(),});}
onAddClicked(){const{scale,globalStart,globalStop}=this.model.metaData;const today=DateTime.local().startOf("day");if(scale.id!=="day"&&globalStart<=today.endOf("day")&&today<=globalStop){let start=today;let stop;if(["week","month"].includes(scale.id)){start=today.set({hours:8,minutes:0,seconds:0});stop=today.set({hours:17,minutes:0,seconds:0});}else{stop=today.endOf(scale.interval);}
const context=this.model.getDialogContext({start,stop,withDefault:true});this.create(context);return;}
super.onAddClicked(...arguments);}
openDialog(props,options){const record=this.model.data.records.find((r)=>r.id===props.resId);const title=record?record.display_name:_t("Add Shift");const context={...props.context,my_planning_action:this.props.context.my_planning_action,is_record_created:!record,view_start_date:serializeDateTime(this.model.metaData.globalStart),view_end_date:serializeDateTime(this.model.metaData.globalStop),};super.openDialog({...props,title,context},options);}}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_model.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_model',['@web/core/l10n/translation','@web/core/l10n/dates','@web_gantt/gantt_model','@planning/views/planning_hooks','@web/core/domain','@web/core/utils/objects','@web/core/browser/router'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{deserializeDateTime,getStartOfLocalWeek,serializeDateTime}=require("@web/core/l10n/dates");const{GanttModel}=require("@web_gantt/gantt_model");const{usePlanningModelActions}=require("@planning/views/planning_hooks");const{Domain}=require("@web/core/domain");const{pick}=require("@web/core/utils/objects");const{router}=require("@web/core/browser/router");const GROUPBY_COMBINATIONS=["role_id","role_id,resource_id","role_id,department_id","department_id","department_id,role_id","project_id","project_id,department_id","project_id,resource_id","project_id,role_id",];const PlanningGanttModel=__exports.PlanningGanttModel=class PlanningGanttModel extends GanttModel{setup(){super.setup(...arguments);this.getHighlightIds=usePlanningModelActions({getHighlightPlannedIds:()=>this.env.searchModel.highlightPlannedIds,getContext:()=>this.env.searchModel._context,}).getHighlightIds;}
load(searchParams){const{context,domain}=searchParams;this.hideOpenShift=Boolean(context.hide_open_shift);const displayRoleOpenShift=Boolean(context.show_role_open_shifts);let displayOpenShift=false;for(const node of domain){if(node.length===3&&node[0]==="resource_id"&&["!=","="].includes(node[1])&&node[2]===false){return super.load({...searchParams,context:{...context,show_job_title:true},});}
if(node.length===3&&["department_id","manager_id","resource_id","job_title"].includes(node[0])){displayOpenShift=true;}}
if(displayRoleOpenShift){searchParams.domain=Domain.and([domain,[["is_users_role","=",true]]]).toList();}
else if(displayOpenShift){searchParams.domain=Domain.or([domain,"[('resource_id', '=', false)]"]).toList();}
return super.load({...searchParams,context:{...context,show_job_title:true}});}
getAdditionalContext(){const{records}=this.data;const{startDate,scale,stopDate}=this.metaData;const defaultEmployeeIds=new Set();for(const record of records){const val=record.employee_id;if(val){defaultEmployeeIds.add(val[0]);}}
return{...this.searchParams.context,default_start_datetime:serializeDateTime(startDate),default_end_datetime:serializeDateTime(stopDate),default_slot_ids:records.map((record)=>record.id),scale:scale.id,active_domain:this.getDomain(),active_ids:records,default_employee_ids:[...defaultEmployeeIds],};}
getDialogContext(){const context=super.getDialogContext(...arguments);delete context.show_job_title;delete context.highlight_planned;delete context.highlight_conflicting;if(this.metaData.scale.id=='day'){context.planning_keep_default_datetime=true;}
return context;}
getDomain(){const metaData=this._buildMetaData();return this._getDomain(metaData);}
getSchedule(params={}){const result=super.getSchedule(params);if(params.recurrence_update){result.recurrence_update=params.recurrence_update;}
return result;}
removeRedundantData(data,ids){const result=super.removeRedundantData(data,ids);if(data.recurrence_update){result.recurrence_update=data.recurrence_update;}
return result;}
_allowCreateEmptyGroups(groupedBy){return groupedBy.includes("resource_id");}
_allowedEmptyGroups(groupedBy){return GROUPBY_COMBINATIONS.includes(groupedBy.join(","));}
async _fetchData(){const[highlightIds,]=await Promise.all([this.getHighlightIds(),super._fetchData(...arguments),])
const firstRow=this.data?.rows?.[0];if(firstRow.isGroup&&this.orm.isSample&&!this.isClosed(firstRow.id)){this.closedRows.add(firstRow.id);}
this.highlightIds=highlightIds;}
_fetchDataPostProcess(metaData,data){const proms=[super._fetchDataPostProcess(...arguments)];if(data.records.length&&!this.orm.isSample){proms.push(this._fetchResourceWorkInterval(metaData,data));}
return Promise.all(proms);}
async _fetchResourceWorkInterval(metaData,data){const[workIntervals,isFlexibleHours,avgWorkHours]=await this.orm.call(metaData.resModel,"gantt_resource_work_interval",[data.records.map((r)=>r.id)],{context:{...this.searchParams.context,default_start_datetime:serializeDateTime(metaData.globalStart),default_end_datetime:serializeDateTime(metaData.globalStop),current_scale:metaData.scale.id,}});data.workIntervals={};for(const resourceId in workIntervals){const resourceIntervals=[];for(const workInterval of workIntervals[resourceId]){resourceIntervals.push(workInterval.map(deserializeDateTime));}
if(resourceIntervals.length){data.workIntervals[resourceId]=resourceIntervals;}}
data.isFlexibleHours=isFlexibleHours;data.avgWorkHours=avgWorkHours;}
_generateRows(metaData,params){const{groupedBy,groups,parentGroup}=params;if(!this.hideOpenShift){if(parentGroup.length===0){if(this._allowCreateEmptyGroups(groupedBy)){groups.push({});}
if(this._allowedEmptyGroups(groupedBy)){params.addOpenShifts=true;}}
if(params.addOpenShifts&&groupedBy.length===1){const fakeGroup=Object.assign({},...parentGroup);groups.push(fakeGroup);}}
const rows=super._generateRows(...arguments);if(rows.length>1){rows.sort((a,b)=>{if(a.resId&&!b.resId){return 1;}else if(!a.resId&&b.resId){return-1;}else{return a.name.localeCompare(b.name);}});}
return rows;}
_getGroupedBy(metaData,searchParams){let groupBy=[...searchParams.groupBy];if(!this.firstLoad&&searchParams.context.planning_groupby_role&&!groupBy.length){groupBy=["role_id","resource_id"];}
return super._getGroupedBy(metaData,{...searchParams,groupBy});}
_getInitialRangeParams(){let{focusDate,scaleId,startDate,stopDate,rangeId}=super._getInitialRangeParams(...arguments);const urlState=router.current;if(urlState.date_start){focusDate=deserializeDateTime(urlState.date_start);if(urlState.date_end){const end=deserializeDateTime(urlState.date_end);const startOfWeek1=getStartOfLocalWeek(focusDate);const startOfWeek2=getStartOfLocalWeek(end);if(startOfWeek1.equals(startOfWeek2)){scaleId="week";}else{scaleId="month";}}
const{unit}=this.metaData.scales[scaleId];startDate=focusDate.startOf(unit);stopDate=startDate.plus({[unit]:1});}
return{focusDate,scaleId,startDate,stopDate,rangeId};}
_getRowName(_,groupedByField,value){if(["department_id","resource_id"].includes(groupedByField)){const resId=Array.isArray(value)?value[0]:value;if(!resId){return _t("Open Shifts");}}
return super._getRowName(...arguments);}
_scheduleToData(schedule){const allowedFields=['recurrence_update',this.metaData.dateStartField,this.metaData.dateStopField,...this.metaData.groupedBy,];return pick(schedule,...allowedFields);}}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_renderer.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_renderer',['@web/views/fields/formatters','@web/core/user','@web/core/utils/numbers','@web_gantt/gantt_renderer','@web_gantt/gantt_helpers','@planning/views/planning_gantt/planning_employee_avatar','@planning/views/planning_gantt/planning_material_role','@planning/views/planning_gantt/planning_gantt_row_progress_bar','@odoo/owl','@web/core/l10n/dates','@planning/views/planning_calendar/planning_ask_recurrence_update/planning_ask_recurrence_update_hook','@planning/views/planning_gantt/planning_gantt_renderer_controls','@web/core/utils/strings','@web/core/utils/hooks','@web/core/l10n/translation'],function(require){'use strict';let __exports={};const{formatFloatTime}=require("@web/views/fields/formatters");const{user}=require("@web/core/user");const{formatFloat}=require("@web/core/utils/numbers");const{GanttRenderer}=require("@web_gantt/gantt_renderer");const{getUnionOfIntersections}=require("@web_gantt/gantt_helpers");const{PlanningEmployeeAvatar}=require("@planning/views/planning_gantt/planning_employee_avatar");const{PlanningMaterialRole}=require("@planning/views/planning_gantt/planning_material_role");const{PlanningGanttRowProgressBar}=require("@planning/views/planning_gantt/planning_gantt_row_progress_bar");const{useEffect,onWillStart,reactive,onWillUnmount,markup}=require("@odoo/owl");const{serializeDateTime}=require("@web/core/l10n/dates");const{planningAskRecurrenceUpdate}=require("@planning/views/planning_calendar/planning_ask_recurrence_update/planning_ask_recurrence_update_hook");const{PlanningGanttRendererControls}=require("@planning/views/planning_gantt/planning_gantt_renderer_controls");const{escape}=require("@web/core/utils/strings");const{useService}=require("@web/core/utils/hooks");const{_t}=require("@web/core/l10n/translation");const{Duration,DateTime}=luxon;const PlanningGanttRenderer=__exports.PlanningGanttRenderer=class PlanningGanttRenderer extends GanttRenderer{static rowHeaderTemplate="planning.PlanningGanttRenderer.RowHeader";static pillTemplate="planning.PlanningGanttRenderer.Pill";static groupPillTemplate="planning.PlanningGanttRenderer.GroupPill";static components={...GanttRenderer.components,Avatar:PlanningEmployeeAvatar,GanttRendererControls:PlanningGanttRendererControls,GanttRowProgressBar:PlanningGanttRowProgressBar,Material:PlanningMaterialRole,};setup(){this.duplicateToolHelperReactive=reactive({shouldDisplay:false});super.setup();useEffect(()=>{this.gridRef.el.classList.add("o_planning_gantt");});this.isPlanningManager=false;this.notificationService=useService("notification");onWillStart(this.onWillStart);onWillUnmount(this.onWillUnmount);}
async onWillStart(){this.isPlanningManager=await user.hasGroup('planning.group_planning_manager');}
async onWillUnmount(){this.closePillSplitToolNotifications();}
addTo(pill,group){if(!pill.allocatedHours[group.col]){return false;}
group.pills.push(pill);group.aggregateValue+=pill.allocatedHours[group.col];return true;}
computeDerivedParams(){this.rowsWithAvatar={};this.rowsWithMaterial={};super.computeDerivedParams();}
computeVisiblePills(){super.computeVisiblePills();this.splitTools={};if(this.env.isSmall||!this.isPlanningManager||this.model.useSampleModel){return;}
const[firstVisibleCol,lastVisibleCol]=this.getVisibleCols();for(const pill of this.pillsToRender){const[first,last]=pill.grid.column;if(last===first+1){continue;}
this.splitTools[pill.id]=[];for(let col=Math.max(first+1,firstVisibleCol);col<=Math.min(last-1,lastVisibleCol);col++){const splitTool={grid:{column:[col,col+1],row:pill.grid.row}};this.splitTools[pill.id].push(splitTool);this.addCoordinatesToCoarseGrid(splitTool);}}}
getDurationStr(record){const{allocated_hours,allocated_percentage}=record;const res=super.getDurationStr(...arguments);return allocated_percentage!==100&&allocated_hours?res:"";}
getSpan({grid}){const{column}=grid;return column[1]-column[0];}
enrichPill(){const pill=super.enrichPill(...arguments);const{record}=pill;if(record.employee_id&&!this.model.metaData.groupedBy.includes("resource_id")){const[resId,displayName]=record.employee_id;pill.hasAvatar=true;pill.avatarProps={resModel:"hr.employee.public",resId,displayName,};}else{pill.hasAvatar=false;pill.avatarProps={};}
const model=this.props.model;if(model.highlightIds&&!model.highlightIds.includes(record.id)){pill.className+=" opacity-25";}
pill.allocatedHours={};let percentage=record.allocated_percentage?record.allocated_percentage/100:0;if(percentage===0){return pill;}
const resource=record.resource_id;const resourceId=resource&&resource[0];if(this.isOpenShift(record)||this.isFlexibleHours(resourceId)){for(let col=this.getFirstGridCol(pill);col<this.getLastGridCol(pill);col++){const subColumn=this.getSubColumnFromColNumber(col);if(!subColumn){continue;}
const{start,stop}=subColumn;const maxDuration=stop.diff(start);const toMillisRatio=60*60*1000;const dailyAllocHours=Math.min(record.allocated_hours*toMillisRatio/this.getSpan(pill),maxDuration);if(dailyAllocHours){let minutes=Duration.fromMillis(dailyAllocHours).as("minute");minutes=Math.round(minutes/5)*5;pill.allocatedHours[col]=Duration.fromObject({minutes}).as("hour");}}
return pill;}
let recordIntervals=this.getRecordIntervals(record);if(!recordIntervals.length){recordIntervals=[[record.start_datetime,record.end_datetime]];percentage=(record.allocated_hours*3.6e6)/record.end_datetime.diff(record.start_datetime);}
for(let col=this.getFirstGridCol(pill)-1;col<=this.getLastGridCol(pill);col++){const subColumn=this.getSubColumnFromColNumber(col);if(!subColumn){continue;}
const{start,stop}=subColumn;const interval=[start,stop.plus({seconds:1})];const union=getUnionOfIntersections(interval,recordIntervals);let duration=0;for(const[otherStart,otherEnd]of union){duration+=otherEnd.diff(otherStart);}
if(duration){let minutes=Duration.fromMillis(duration*percentage).as("minute");minutes=Math.round(minutes/5)*5;pill.allocatedHours[col]=Duration.fromObject({minutes}).as("hour");}}
return pill;}
getAvatarProps(row){return this.rowsWithAvatar[row.id];}
getMaterialProps(row){return this.rowsWithMaterial[row.id];}
getAggregateValue(group,previousGroup){return group.aggregateValue+previousGroup.aggregateValue;}
getScheduleParams(pill){const{record}=this.pills[pill.dataset.pillId];return{recurrence_update:record.recurrence_update};}
getColumnStartStop(startCol,stopCol){const{scale}=this.model.metaData;if(["week","month"].includes(scale.unit)){const{start,stop}=super.getColumnStartStop(startCol,stopCol,false);return{start:start.set({hours:8,minutes:0,seconds:0,milliseconds:0}),stop:stop.set({hours:17,minutes:0,seconds:0,milliseconds:0}),};}
return super.getColumnStartStop(...arguments);}
getGroupPillDisplayName(pill){return formatFloatTime(pill.aggregateValue);}
getPopoverProps(pill){const popoverProps=super.getPopoverProps(pill);if(popoverProps.bodyTemplate){const{record}=pill;Object.assign(popoverProps.context,{allocatedHoursFormatted:record.allocated_hours&&formatFloatTime(record.allocated_hours),allocatedPercentageFormatted:record.allocated_percentage&&formatFloat(record.allocated_percentage),});}
return popoverProps;}
getRecordIntervals(record){const val=record.resource_id;const resourceId=Array.isArray(val)?val[0]:false;const startTime=record.start_datetime;const endTime=record.end_datetime;if(!this.model.data.workIntervals){return[];}
const resourceIntervals=this.model.data.workIntervals[resourceId];if(!resourceIntervals){return[];}
const recordIntervals=getUnionOfIntersections([startTime,endTime],resourceIntervals);return recordIntervals;}
getSplitToolGrids(pill){return this.splitTools[pill.id]||[];}
isFlexibleHours(resource_id){return!!this.model.data.isFlexibleHours?.[resource_id];}
isOpenShift(record){return!record.resource_id;}
shouldAggregate(row,g){const wouldAggregate=super.shouldAggregate(...arguments);if(!wouldAggregate){return false;}
if(row.groupedBy&&row.groupedBy[0]!=='resource_id'){return wouldAggregate;}
const workIntervals=this.model.data.workIntervals?.[row.resId];if(!workIntervals){if(row.groupedByField==="resource_id"){return false;}else if(!row.groupedByField){return wouldAggregate;}}
if((row.resId&&!row.unavailabilities)||wouldAggregate){return true;}
const group=this.getSubColumnFromColNumber(g.grid.column[0]);const groupWorkOverlap=getUnionOfIntersections([group.start,group.stop],workIntervals);if(!groupWorkOverlap.length){return false;}
const unavailabilities=Object.entries(row.unavailabilities).map(([key,{start,stop}])=>([start,stop]));const dayOff=[]
for(const interval of groupWorkOverlap){const dayOffInterval=getUnionOfIntersections(interval,unavailabilities);if(dayOffInterval.length){dayOff.push(dayOffInterval);}}
if(dayOff.length===groupWorkOverlap.length){for(const[i,interval]of dayOff.entries()){if(interval[0]<=groupWorkOverlap[i][0]&&interval[1]>=groupWorkOverlap[i][1]){return false;}}}
return true;}
getPillFromGroup(group,maxAggregateValue,consolidate){const newPill=super.getPillFromGroup(...arguments);if(group.pills.length){newPill.resourceId=group.pills[0].record.resource_id;}
const{start,stop}=this.getColumnFromColNumber(newPill.grid.column[0]);newPill.date_start=start;newPill.date_end=stop;return newPill;}
_computeWorkHours(pill){let workHours=0;if(!this.row.progressBar?.employee_id||["day","year"].includes(this.model.metaData.scale.id)){return workHours;}
const resource_id=this.row.resId;if(this.isFlexibleHours(resource_id)){workHours=this.model.data.avgWorkHours[resource_id];}else{workHours=this.model.data.workIntervals[resource_id].reduce((sum,[intervalStart,intervalEnd])=>{if(intervalStart>=pill.date_start&&intervalEnd<=pill.date_end){sum+=(intervalEnd-intervalStart)/3.6e6;}
return sum;},0)}
return workHours;}
_computeDisplayName(pill,workHours){const progressBar=this.row.progressBar;if(!progressBar?.employee_id||["day","month","year"].includes(this.model.metaData.scale.id)||workHours===0){return pill.displayName;}
return`${pill.displayName} (${Math.round(pill.aggregateValue / workHours * 100)}%)`;}
_computeResourceOvertimeColors(pill,workHours){const progressBar=this.row.progressBar;if(!progressBar?.employee_id||["day","year"].includes(this.model.metaData.scale.id)){return"bg-primary border-primary";}
return workHours==pill.aggregateValue?'bg-success border-success':workHours>pill.aggregateValue?'bg-warning border-warning':'bg-danger border-danger';}
hasAvatar(row){return row.id in this.rowsWithAvatar;}
hasMaterial(row){return row.id in this.rowsWithMaterial;}
isDisabled(row=null){if(row&&!row.fromServer&&row.groupLevel===0){return false;}
return super.isDisabled(...arguments);}
isHoverable(row){if(!row.fromServer){return!row.isGroup;}
return super.isHoverable(...arguments);}
processRow(){const result=super.processRow(...arguments);const{fromServer,groupedByField,id,name,progressBar,resId}=result.rows[0];const isGroupedByResource=groupedByField==="resource_id";const employeeId=progressBar&&progressBar.employee_id;const isResourceMaterial=progressBar&&progressBar.is_material_resource;const resourceColor=progressBar&&progressBar.resource_color||0;const showPopover=!isResourceMaterial||progressBar.display_popover_material_resource;const showEmployeeAvatar=isGroupedByResource&&fromServer&&Boolean(employeeId)||Boolean(resId&&isResourceMaterial);if(showEmployeeAvatar){const{fields}=this.model.metaData;const resModel=fields.resource_id.relation;this.rowsWithAvatar[id]={resModel,resId:resId,displayName:name,isResourceMaterial,showPopover,resourceColor};}else if(isResourceMaterial){this.rowsWithMaterial[id]={displayName:name};}
return result;}
shouldMergeGroups(){return false;}
async onPillSplitToolClicked(ev,pill,splitIndex){const pillStart=pill.grid.column[0];const startColumnId=pillStart+1+splitIndex;const{start}=this.getColumnAvailabilitiesLimit(pill,startColumnId,{fixed_stop:pill.record.end_datetime,});const values={start_datetime:serializeDateTime(start)};const context={planning_split_tool:true};const[copiedShiftId]=await this.model.orm.call(this.model.metaData.resModel,'copy',[[pill.record.id]],{context,default:values},);const{stop}=this.getColumnAvailabilitiesLimit(pill,startColumnId-1,{fixed_start:pill.record.start_datetime,});const schedule={end_datetime:serializeDateTime(stop)};this.model.reschedule(pill.record.id,schedule,this.openPlanDialogCallback);this.notificationSplit?.();this.notificationSplit=this.notificationService.add(markup(`<i class="fa fa-fw fa-check"></i><span class="ms-1">${escape(_t(
                    "Shift divided into two"
                ))}</span>`),{type:"success",className:"planning_notification",buttons:[{name:'Undo',icon:'fa-undo',onClick:async()=>{const result=await this.model.orm.call(this.model.metaData.resModel,'undo_split_shift',[[pill.record.id,copiedShiftId],serializeDateTime(pill.record.start_datetime),serializeDateTime(pill.record.end_datetime),!pill.record.resource_id?false:pill.record.resource_id[0],],);this.closePillSplitToolNotifications();if(!result){this.notificationFail=this.notificationService.add(markup(`<i class="fa fa-fw fa-check"></i><span class="ms-1">${escape(_t(
                                        "Shifts could not be merged back"
                                    ))}</span>`),{type:'danger'},);}else{this.model.fetchData();this.notificationMerge=this.notificationService.add(markup(`<i class="fa fa-fw fa-check"></i><span class="ms-1">${escape(_t(
                                        "Shifts merged back"
                                    ))}</span>`),{type:'success'},);}},}],});}
closePillSplitToolNotifications(){this.notificationFail?.();this.notificationMerge?.();this.notificationSplit?.();}
getColumnAvailabilitiesLimit(pill,column,{fixed_start,fixed_stop}={}){const defaultColumnTiming=super.getColumnStartStop(column,column,false);let start=fixed_start||defaultColumnTiming.start;let stop=fixed_stop||defaultColumnTiming.stop;const currentRow=this.getRowFromPill(pill);const unavailability_at_start=currentRow?.unavailabilities?.find(unavailability=>start>=unavailability.start&&start<unavailability.stop);const unavailability_at_stop=currentRow?.unavailabilities?.find(unavailability=>stop>unavailability.start&&stop<=unavailability.stop);if(!fixed_stop&&unavailability_at_stop){stop=unavailability_at_stop.start;}
if(!fixed_start&&unavailability_at_start&&stop>start){start=unavailability_at_start.stop;}
if(stop<=start){if(!fixed_start){start=DateTime.fromMillis(stop-1000);}else{stop=DateTime.fromMillis(start+1000);}}
return{start,stop};}
get controlsProps(){return Object.assign(super.controlsProps,{duplicateToolHelperReactive:this.duplicateToolHelperReactive,});}
onInteractionChange(){super.onInteractionChange();this.duplicateToolHelperReactive.shouldDisplay=this.interaction.mode==="drag";}
async dragPillDrop({pill}){const{record}=this.pills[pill.dataset.pillId];if(record.repeat&&this.interaction.dragAction!=="copy"){const recurrenceUpdate=await planningAskRecurrenceUpdate(this.dialogService);if(recurrenceUpdate){record.recurrence_update=recurrenceUpdate;super.dragPillDrop(...arguments);}}else{super.dragPillDrop(...arguments);}}
async resizePillDrop({pill}){const{record}=this.pills[pill.dataset.pillId];if(record.repeat){const recurrenceUpdate=await planningAskRecurrenceUpdate(this.dialogService);if(recurrenceUpdate){record.recurrence_update=recurrenceUpdate;super.resizePillDrop(...arguments);}}else{super.resizePillDrop(...arguments);}}}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_renderer_controls.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_renderer_controls',['@web_gantt/gantt_renderer_controls'],function(require){'use strict';let __exports={};const{GanttRendererControls}=require("@web_gantt/gantt_renderer_controls");const PlanningGanttRendererControls=__exports.PlanningGanttRendererControls=class PlanningGanttRendererControls extends GanttRendererControls{static props=[...GanttRendererControls.props,"duplicateToolHelperReactive"];static toolbarContentTemplate="planning.PlanningGanttRendererControls.ToolbarContent";}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_row_progress_bar.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_row_progress_bar',['@web_gantt/gantt_row_progress_bar'],function(require){'use strict';let __exports={};const{GanttRowProgressBar}=require("@web_gantt/gantt_row_progress_bar");const PlanningGanttRowProgressBar=__exports.PlanningGanttRowProgressBar=class PlanningGanttRowProgressBar extends GanttRowProgressBar{static template="planning.PlanningGanttRowProgressBar";static props={...GanttRowProgressBar.props,progressBar:{...GanttRowProgressBar.props.progressBar,shape:{...GanttRowProgressBar.props.progressBar.shape,is_flexible_hours:{type:Boolean,optional:true},is_fully_flexible_hours:{type:Boolean,optional:true},},},};}
return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_gantt_view.js */
odoo.define('@planning/views/planning_gantt/planning_gantt_view',['@web/core/registry','@web_gantt/gantt_view','@planning/views/planning_gantt/planning_gantt_controller','@planning/views/planning_gantt/planning_gantt_model','@planning/views/planning_gantt/planning_gantt_renderer','@planning/views/planning_search_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{ganttView}=require("@web_gantt/gantt_view");const{PlanningGanttController}=require("@planning/views/planning_gantt/planning_gantt_controller");const{PlanningGanttModel}=require("@planning/views/planning_gantt/planning_gantt_model");const{PlanningGanttRenderer}=require("@planning/views/planning_gantt/planning_gantt_renderer");const{PlanningSearchModel}=require("@planning/views/planning_search_model");const viewRegistry=registry.category("views");const PlanningGanttView=__exports.PlanningGanttView={...ganttView,SearchModel:PlanningSearchModel,Controller:PlanningGanttController,Renderer:PlanningGanttRenderer,Model:PlanningGanttModel,buttonTemplate:"planning.PlanningGanttView.Buttons",};viewRegistry.add("planning_gantt",PlanningGanttView);return __exports;});;

/* /planning/static/src/views/planning_gantt/planning_material_role.js */
odoo.define('@planning/views/planning_gantt/planning_material_role',['@odoo/owl','@planning/views/planning_hooks'],function(require){'use strict';let __exports={};const{Component,useRef}=require("@odoo/owl");const{setupDisplayName}=require("@planning/views/planning_hooks");const PlanningMaterialRole=__exports.PlanningMaterialRole=class PlanningMaterialRole extends Component{static template="planning.PlanningMaterialRole";static props={displayName:{type:String},};setup(){const displayNameRef=useRef("displayName");setupDisplayName(displayNameRef);}}
return __exports;});;

/* /hr_skills/static/src/views/skills_graph.js */
odoo.define('@hr_skills/views/skills_graph',['@web/core/registry','@web/views/graph/graph_renderer','@web/views/graph/graph_view'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{GraphRenderer}=require("@web/views/graph/graph_renderer");const{graphView}=require("@web/views/graph/graph_view");const SkillsGraphRenderer=__exports.SkillsGraphRenderer=class SkillsGraphRenderer extends GraphRenderer{getScaleOptions(){const scaleOptions=super.getScaleOptions();if('y'in scaleOptions){scaleOptions.y.suggestedMax=100;}
return scaleOptions;}}
const skillsGraphView=__exports.skillsGraphView={...graphView,Renderer:SkillsGraphRenderer,};registry.category("views").add("skills_graph",skillsGraphView);return __exports;});;

/* /web_enterprise/static/src/views/pivot/pivot_renderer.js */
odoo.define('@web_enterprise/views/pivot/pivot_renderer',['@web/core/utils/patch','@web/views/pivot/pivot_renderer','@odoo/owl'],function(require){'use strict';let __exports={};const{patch}=require("@web/core/utils/patch");const{PivotRenderer}=require("@web/views/pivot/pivot_renderer");const{useEffect,useRef}=require("@odoo/owl");patch(PivotRenderer.prototype,{setup(){super.setup();this.root=useRef("root");if(this.env.isSmall){useEffect(()=>{if(this.root.el){const tooltipElems=this.root.el.querySelectorAll("*[data-tooltip]");for(const el of tooltipElems){el.removeAttribute("data-tooltip");el.removeAttribute("data-tooltip-position");}}});}},getPadding(cell){if(this.env.isSmall){return 5+cell.indent*5;}
return super.getPadding(...arguments);},});return __exports;});;

/* /web_grid/static/src/components/float_factor_grid_cell.js */
odoo.define('@web_grid/components/float_factor_grid_cell',['@web/core/registry','@web/views/fields/formatters','@web_grid/components/grid_cell'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{formatFloatFactor}=require("@web/views/fields/formatters");const{GridCell}=require("@web_grid/components/grid_cell");function formatter(value,options={}){return formatFloatFactor(value,options);}
const FloatFactorGridCell=__exports.FloatFactorGridCell=class FloatFactorGridCell extends GridCell{static props={...GridCell.props,factor:{type:Number,optional:true},};parse(value){const factorValue=value/this.factor;return super.parse(factorValue.toString());}
get factor(){return this.props.factor||this.props.fieldInfo.options?.factor||1;}
get value(){return super.value*this.factor;}
get formattedValue(){return formatter(this.value);}}
const floatFactorGridCell=__exports.floatFactorGridCell={component:FloatFactorGridCell,formatter,};registry.category("grid_components").add("float_factor",floatFactorGridCell);return __exports;});;

/* /web_grid/static/src/components/float_time_grid_cell.js */
odoo.define('@web_grid/components/float_time_grid_cell',['@web/core/registry','@web/views/fields/parsers','@web/views/fields/formatters','@web_grid/components/grid_cell'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{parseFloatTime}=require("@web/views/fields/parsers");const{formatFloatTime}=require("@web/views/fields/formatters");const{GridCell}=require("@web_grid/components/grid_cell");function formatter(value,options={}){return formatFloatTime(value,{...options,noLeadingZeroHour:true});}
const FloatTimeGridCell=__exports.FloatTimeGridCell=class FloatTimeGridCell extends GridCell{get formattedValue(){return formatter(this.value);}
parse(value){return parseFloatTime(value);}}
const floatTimeGridCell=__exports.floatTimeGridCell={component:FloatTimeGridCell,formatter,};registry.category("grid_components").add("float_time",floatTimeGridCell);return __exports;});;

/* /web_grid/static/src/components/float_toggle_grid_cell.js */
odoo.define('@web_grid/components/float_toggle_grid_cell',['@web/core/registry','@web/views/fields/formatters','@web_grid/hooks/grid_cell_hook','@web_grid/components/grid_cell','@odoo/owl'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{formatFloatFactor}=require("@web/views/fields/formatters");const{useGridCell,useMagnifierGlass}=require("@web_grid/hooks/grid_cell_hook");const{standardGridCellProps}=require("@web_grid/components/grid_cell");const{Component,useRef,useState,useEffect}=require("@odoo/owl");function formatter(value,options={}){return formatFloatFactor(value,options);}
const FloatToggleGridCell=__exports.FloatToggleGridCell=class FloatToggleGridCell extends Component{static props={...standardGridCellProps,factor:{type:Number,optional:true},};static template="web_grid.FloatToggleGridCell";setup(){this.rootRef=useRef("root");this.buttonRef=useRef("toggleButton");this.magnifierGlassHook=useMagnifierGlass();this.state=useState({edit:this.props.editMode,invalid:false,cell:null,});useGridCell();useEffect((buttonEl)=>{if(buttonEl){buttonEl.focus();}},()=>[this.buttonRef.el]);}
get factor(){return this.props.factor||this.props.fieldInfo.options?.factor||1;}
get range(){return this.props.fieldInfo.options?.range||[0.0,0.5,1.0];}
get value(){return(this.state.cell.value||0)*this.factor;}
get formattedValue(){return formatter(this.state.cell.value||0,{digits:this.props.fieldInfo.attrs?.digits||2,factor:this.factor,});}
isEditable(props=this.props){return(!props.readonly&&this.state.cell?.readonly===false&&!this.state.cell.row.isSection);}
onChange(){let currentIndex=this.range.indexOf(this.value);currentIndex++;if(currentIndex>this.range.length-1){currentIndex=0;}
this.update(this.range[currentIndex]/this.factor);}
update(value){this.state.cell.update(value);}
onCellClick(ev){if(this.isEditable()&&!this.state.edit&&!ev.target.closest(".o_grid_search_btn")){this.onChange();this.props.onEdit(true);}}
onKeyDown(ev){this.props.onKeyDown(ev,this.state.cell);}}
const floatToggleGridCell=__exports.floatToggleGridCell={component:FloatToggleGridCell,formatter,};registry.category("grid_components").add("float_toggle",floatToggleGridCell);return __exports;});;

/* /web_grid/static/src/components/grid_cell.js */
odoo.define('@web_grid/components/grid_cell',['@web/core/registry','@web/views/fields/numpad_decimal_hook','@web/views/fields/formatters','@web/core/utils/numbers','@web/views/fields/parsers','@web_grid/hooks/input_hook','@odoo/owl','@web_grid/hooks/grid_cell_hook'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{useNumpadDecimal}=require("@web/views/fields/numpad_decimal_hook");const{formatInteger}=require("@web/views/fields/formatters");const{formatFloat}=require("@web/core/utils/numbers");const{parseInteger,parseFloat}=require("@web/views/fields/parsers");const{useInputHook}=require("@web_grid/hooks/input_hook");const{Component,useEffect,useRef,useState}=require("@odoo/owl");const{useGridCell,useMagnifierGlass}=require("@web_grid/hooks/grid_cell_hook");const standardGridCellProps=__exports.standardGridCellProps={name:String,classNames:String,fieldInfo:Object,readonly:{type:Boolean,optional:true},editMode:{type:Boolean,optional:true},reactive:{type:Object,shape:{cell:[HTMLElement,{value:null}],},},openRecords:Function,onEdit:Function,getCell:Function,onKeyDown:{type:Function,optional:true},};const GridCell=__exports.GridCell=class GridCell extends Component{static template="web_grid.Cell";static props=standardGridCellProps;static defaultProps={readonly:true,editMode:false,};setup(){this.rootRef=useRef("root");this.state=useState({edit:this.props.editMode,invalid:false,cell:null,});this.discardChanges=false;this.magnifierGlassHook=useMagnifierGlass();this.inputRef=useInputHook({getValue:()=>this.formattedValue,refName:"numpadDecimal",parse:this.parse.bind(this),notifyChange:this.onChange.bind(this),commitChanges:this.saveEdition.bind(this),onKeyDown:(ev)=>this.props.onKeyDown(ev,this.state.cell),discard:this.discard.bind(this),setInvalid:()=>{this.state.invalid=true;},setDirty:()=>{this.state.invalid=false;},isInvalid:()=>this.state.invalid,});useNumpadDecimal();useGridCell();useEffect((edit,inputEl,cellEl)=>{if(inputEl){inputEl.value=this.formattedValue;}
if(edit&&inputEl){inputEl.focus();if(inputEl.type==="text"){if(inputEl.selectionStart===null){return;}
if(inputEl.selectionStart===inputEl.selectionEnd){inputEl.selectionStart=0;inputEl.selectionEnd=inputEl.value.length;}}}
this.discardChanges=false;},()=>[this.state.edit,this.inputRef.el,this.props.reactive.cell]);}
get value(){return this.state.cell?.value||0;}
get section(){return this.row.getSection();}
get row(){return this.state.cell?.row;}
get formattedValue(){const{type,digits}=this.props.fieldInfo;if(type==="integer"){return formatInteger(this.value);}
return formatFloat(this.value,{digits:digits||2});}
isEditable(props=this.props){return(!props.readonly&&this.state.cell?.readonly===false&&!this.state.cell.row.isSection);}
parse(value){if(this.props.fieldInfo.type==="integer"){return parseInteger(value);}
return parseFloat(value);}
onChange(value){if(!this.discardChanges){this.update(value);}}
update(value){this.state.cell.update(value);}
saveEdition(value){const changesCommitted=(value||false)!==(this.state.cell.value||false);if((value||false)!==(this.state.cell?.value||false)){this.update(value);}
this.props.onEdit(false);return changesCommitted;}
discard(){this.discardChanges=true;this.props.onEdit(false);}
onCellClick(ev){if(this.isEditable()&&!this.state.edit){this.discardChanges=false;this.props.onEdit(true);}}}
const integerGridCell=__exports.integerGridCell={component:GridCell,formatter:formatInteger,};registry.category("grid_components").add("integer",integerGridCell);const floatGridCell=__exports.floatGridCell={component:GridCell,formatter:formatFloat,};registry.category("grid_components").add("float",floatGridCell);return __exports;});;

/* /web_grid/static/src/components/grid_component/grid_component.js */
odoo.define('@web_grid/components/grid_component/grid_component',['@odoo/owl','@web/core/registry','@web_grid/components/grid_cell','@web_grid/components/grid_row/grid_row'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{registry}=require("@web/core/registry");const{GridCell}=require("@web_grid/components/grid_cell");const{GridRow}=require("@web_grid/components/grid_row/grid_row");const gridComponentRegistry=registry.category("grid_components");const GridComponent=__exports.GridComponent=class GridComponent extends Component{static props=["name","type","isMeasure?","component?","*"];static template="web_grid.GridComponent"
get gridComponent(){if(this.props.component){return this.props.component;}
if(gridComponentRegistry.contains(this.props.type)){return gridComponentRegistry.get(this.props.type).component;}
if(this.props.isMeasure){console.warn(`Missing widget: ${this.props.type} for grid component`);return GridCell;}
return GridRow;}
get gridComponentProps(){const gridComponentProps=Object.fromEntries(Object.entries(this.props).filter(([key,])=>key in this.gridComponent.props));gridComponentProps.classNames=`o_grid_component o_grid_component_${this.props.type} ${gridComponentProps.classNames || ""}`;return gridComponentProps;}}
return __exports;});;

/* /web_grid/static/src/components/grid_row/grid_row.js */
odoo.define('@web_grid/components/grid_row/grid_row',['@odoo/owl','@web/core/registry'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{registry}=require("@web/core/registry");const GridRow=__exports.GridRow=class GridRow extends Component{static template="web_grid.GridRow";static props={name:String,model:Object,row:Object,classNames:{type:String,optional:true},context:{type:Object,optional:true},style:{type:String,optional:true},value:{optional:true},};static defaultProps={classNames:"",context:{},style:"",};get value(){let value='value'in this.props?this.props.value:this.props.row.initialRecordValues[this.props.name];const fieldInfo=this.props.model.fieldsInfo[this.props.name];if(fieldInfo.type==="selection"){value=fieldInfo.selection.find(([key,])=>key===value)?.[1];}
return value;}}
const gridRow=__exports.gridRow={component:GridRow,};registry.category("grid_components").add("selection",gridRow).add("char",gridRow);return __exports;});;

/* /web_grid/static/src/components/many2one_grid_row/many2one_grid_row.js */
odoo.define('@web_grid/components/many2one_grid_row/many2one_grid_row',['@web/core/registry','@web/core/utils/hooks','@web_grid/components/grid_row/grid_row'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{useService}=require("@web/core/utils/hooks");const{GridRow,gridRow}=require("@web_grid/components/grid_row/grid_row");const Many2OneGridRow=__exports.Many2OneGridRow=class Many2OneGridRow extends GridRow{static template="web_grid.Many2OneGridRow";static props={...GridRow.props,relation:{type:String,optional:true},canOpen:{type:Boolean,optional:true},}
static defaultProps={...GridRow.defaultProps,canOpen:true,};setup(){this.orm=useService("orm");this.actionService=useService("action");}
get relation(){return this.props.relation||this.props.model.fieldsInfo[this.props.name].relation;}
get displayName(){return this.value&&this.value[1].split("\n",1)[0];}
get extraLines(){return this.value?this.value[1].split("\n").map((line)=>line.trim()).slice(1):[];}
get resId(){return this.value&&this.value[0];}
async openAction(){const action=await this.orm.call(this.relation,"get_formview_action",[[this.resId]],{context:this.props.context,});await this.actionService.doAction(action);}
onClick(ev){if(this.props.canOpen){ev.stopPropagation();this.openAction();}}}
const many2OneGridRow=__exports.many2OneGridRow={...gridRow,component:Many2OneGridRow,};registry.category("grid_components").add("many2one",many2OneGridRow);return __exports;});;

/* /web_grid/static/src/hooks/grid_cell_hook.js */
odoo.define('@web_grid/hooks/grid_cell_hook',['@odoo/owl'],function(require){'use strict';let __exports={};const{useComponent,useEffect}=require("@odoo/owl");__exports.useMagnifierGlass=useMagnifierGlass;function useMagnifierGlass(){const component=useComponent();return{onMagnifierGlassClick(){const{context,domain,title}=component.state.cell;component.props.openRecords(title,domain.toList(),context);},};}
__exports.useGridCell=useGridCell;function useGridCell(){const component=useComponent();useEffect((cellEl)=>{if(!cellEl){component.state.cell=null;return;}
component.state.cell=component.props.getCell(cellEl.dataset.row,cellEl.dataset.column);Object.assign(component.rootRef.el.style,{"grid-row":cellEl.style["grid-row"],"grid-column":cellEl.style["grid-column"],"z-index":1,});component.rootRef.el.dataset.gridRow=cellEl.dataset.gridRow;component.rootRef.el.dataset.gridColumn=cellEl.dataset.gridColumn;cellEl.querySelector(".o_grid_cell_readonly").classList.add("d-none");component.rootRef.el.classList.toggle("o_field_cursor_disabled",!component.state.cell.row.isSection&&!component.isEditable());component.rootRef.el.classList.toggle("fw-bold",Boolean(component.state.cell.row.isSection));},()=>[component.props.reactive.cell]);}
return __exports;});;

/* /web_grid/static/src/hooks/input_hook.js */
odoo.define('@web_grid/hooks/input_hook',['@web/core/hotkeys/hotkey_service','@odoo/owl'],function(require){'use strict';let __exports={};const{getActiveHotkey}=require("@web/core/hotkeys/hotkey_service");const{useEffect,useRef}=require("@odoo/owl");__exports.useInputHook=useInputHook;function useInputHook(params){const inputRef=params.ref||useRef(params.refName||"input");let isDirty=false;let lastSetValue=null;function onInput(ev){isDirty=ev.target.value!==lastSetValue;if(params.setDirty){params.setDirty(isDirty);}}
function onChange(ev){if(isDirty){isDirty=false;let isInvalid=false;let val=ev.target.value;if(params.parse){try{val=params.parse(val);}catch{if(params.setInvalid){params.setInvalid();}
isInvalid=true;}}
if(!isInvalid){params.notifyChange(val);lastSetValue=ev.target.value;}
if(params.setDirty){params.setDirty(isDirty);}}}
function onKeydown(ev){const hotkey=getActiveHotkey(ev);if(params.discard&&hotkey==="escape"){params.discard();}else if(params.commitChanges&&["enter","tab","shift+tab"].includes(hotkey)){commitChanges();}
if(params.onKeyDown){params.onKeyDown(ev);}}
useEffect((inputEl)=>{if(inputEl){inputEl.addEventListener("input",onInput);inputEl.addEventListener("change",onChange);inputEl.addEventListener("keydown",onKeydown);return()=>{inputEl.removeEventListener("input",onInput);inputEl.removeEventListener("change",onChange);inputEl.removeEventListener("keydown",onKeydown);};}},()=>[inputRef.el]);useEffect(()=>{const isInvalid=params.isInvalid?params.isInvalid():false;if(inputRef.el&&!isDirty&&!isInvalid){inputRef.el.value=params.getValue();lastSetValue=inputRef.el.value;}});function isUrgentSaved(urgent){if(params.isUrgentSaved){return params.isUrgentSaved(urgent);}
return urgent;}
async function commitChanges(urgent){if(!inputRef.el){return;}
isDirty=inputRef.el.value!==lastSetValue;if(isDirty||isUrgentSaved(urgent)){let isInvalid=false;isDirty=false;let val=inputRef.el.value;if(params.parse){try{val=params.parse(val);}catch{isInvalid=true;if(urgent){return;}else{params.setInvalid();}}}
if(isInvalid){return;}
const result=params.commitChanges(val);if(result){lastSetValue=inputRef.el.value;if(params.setDirty){params.setDirty(isDirty);}}}}
return inputRef;}
return __exports;});;

/* /web_grid/static/src/views/grid_arch_parser.js */
odoo.define('@web_grid/views/grid_arch_parser',['@web/core/l10n/translation','@web/core/utils/strings','@web/core/utils/xml','@web/views/utils'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const{getActiveActions,processButton}=require("@web/views/utils");const GridArchParser=__exports.GridArchParser=class GridArchParser{parse(xmlDoc,models,modelName){const archInfo={activeActions:getActiveActions(xmlDoc),hideLineTotal:false,hideColumnTotal:false,hasBarChartTotal:false,createInline:false,displayEmpty:false,buttons:[],activeRangeName:"",ranges:{},sectionField:null,rowFields:[],columnFieldName:"",measureField:{name:"__count",aggregator:"sum",readonly:true,string:_t("Count"),},readonlyField:null,widgetPerFieldName:{},editable:false,formViewId:false,};let buttonId=0;visitXML(xmlDoc,(node)=>{if(node.tagName==="grid"){if(node.hasAttribute("hide_line_total")){archInfo.hideLineTotal=exprToBoolean(node.getAttribute("hide_line_total"));}
if(node.hasAttribute("hide_column_total")){archInfo.hideColumnTotal=exprToBoolean(node.getAttribute("hide_column_total"));}
if(node.hasAttribute("barchart_total")){archInfo.hasBarChartTotal=exprToBoolean(node.getAttribute("barchart_total"));}
if(node.hasAttribute("create_inline")){archInfo.createInline=exprToBoolean(node.getAttribute("create_inline"));}
if(node.hasAttribute("display_empty")){archInfo.displayEmpty=exprToBoolean(node.getAttribute("display_empty"));}
if(node.hasAttribute("action")&&node.hasAttribute("type")){archInfo.openAction={name:node.getAttribute("action"),type:node.getAttribute("type"),};}
if(node.hasAttribute("editable")){archInfo.editable=exprToBoolean(node.getAttribute("editable"));}
if(node.hasAttribute("form_view_id")){archInfo.formViewId=parseInt(node.getAttribute("form_view_id"),10);}}else if(node.tagName==="field"){const fieldName=node.getAttribute("name");const fieldInfo=models[modelName].fields[fieldName];const type=node.getAttribute("type")||"row";const string=node.getAttribute("string")||fieldInfo.string;let invisible=node.getAttribute("invisible")||'False';switch(type){case"row":if(node.hasAttribute("widget")){archInfo.widgetPerFieldName[fieldName]=node.getAttribute("widget");}
if(node.hasAttribute("section")&&exprToBoolean(node.getAttribute("section"))&&!archInfo.sectionField){archInfo.sectionField={name:fieldName,invisible,};}else{archInfo.rowFields.push({name:fieldName,invisible,});}
break;case"col":archInfo.columnFieldName=fieldName;const{ranges,activeRangeName}=this._extractRanges(node);archInfo.ranges=ranges;archInfo.activeRangeName=activeRangeName;break;case"measure":if(node.hasAttribute("widget")){archInfo.widgetPerFieldName[fieldName]=node.getAttribute("widget");}
archInfo.measureField={name:fieldName,aggregator:node.getAttribute("operator")||fieldInfo.aggregator,string,readonly:exprToBoolean(node.getAttribute("readonly"))||fieldInfo.readonly,};break;case"readonly":let groupOperator=fieldInfo.aggregator;if(node.hasAttribute("operator")){groupOperator=node.getAttribute("operator");}
archInfo.readonlyField={name:fieldName,aggregator:groupOperator,string,};break;}}else if(node.tagName==="button"){archInfo.buttons.push({...processButton(node),type:"button",id:buttonId++,});}});archInfo.editable=archInfo.editable&&archInfo.measureField&&!archInfo.measureField.readonly&&archInfo.measureField.aggregator==="sum";return archInfo;}
_extractRanges(colNode){const ranges={};let activeRangeName;let firstRangeName="";for(const rangeNode of colNode.children){const rangeName=rangeNode.getAttribute("name");if(!firstRangeName.length){firstRangeName=rangeName;}
ranges[rangeName]={name:rangeName,description:rangeNode.getAttribute("string"),span:rangeNode.getAttribute("span"),step:rangeNode.getAttribute("step"),hotkey:rangeNode.getAttribute("hotkey"),default:exprToBoolean(rangeNode.getAttribute("default")),};if(ranges[rangeName].default){activeRangeName=rangeName;}}
return{ranges:ranges,activeRangeName:activeRangeName||firstRangeName};}}
return __exports;});;

/* /web_grid/static/src/views/grid_controller.js */
odoo.define('@web_grid/views/grid_controller',['@web/core/l10n/translation','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web/core/l10n/dates','@web/core/utils/hooks','@web/search/layout','@web/model/model','@web/views/standard_view_props','@web/views/view_button/view_button_hook','@web/views/view_dialogs/form_view_dialog','@web/views/view_button/view_button','@web/search/action_hook','@web/search/cog_menu/cog_menu','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/core/browser/browser','@odoo/owl'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{serializeDate,deserializeDate}=require("@web/core/l10n/dates");const{useService}=require("@web/core/utils/hooks");const{Layout}=require("@web/search/layout");const{useModelWithSampleData}=require("@web/model/model");const{standardViewProps}=require("@web/views/standard_view_props");const{useViewButtons}=require("@web/views/view_button/view_button_hook");const{FormViewDialog}=require("@web/views/view_dialogs/form_view_dialog");const{ViewButton}=require("@web/views/view_button/view_button");const{useSetupAction}=require("@web/search/action_hook");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{browser}=require("@web/core/browser/browser");const{Component,useState,onWillUnmount,useRef}=require("@odoo/owl");const{DateTime}=luxon;const GridController=__exports.GridController=class GridController extends Component{static components={Layout,Dropdown,DropdownItem,ViewButton,CogMenu,SearchBar,};static props={...standardViewProps,archInfo:Object,buttonTemplate:String,Model:Function,Renderer:Function,};static template="web_grid.GridView";setup(){const state=this.props.state||{};let activeRangeName=this.props.archInfo.activeRangeName;let defaultAnchor;if(state.activeRangeName){activeRangeName=state.activeRangeName;}else if(this.isMobile&&"day"in this.props.archInfo.ranges){activeRangeName="day";}
if(state.anchor){defaultAnchor=state.anchor;}else if(this.props.context.grid_anchor){defaultAnchor=deserializeDate(this.props.context.grid_anchor);}
this.dialogService=useService("dialog");this.model=useModelWithSampleData(this.props.Model,{resModel:this.props.resModel,sectionField:this.props.archInfo.sectionField,rowFields:this.props.archInfo.rowFields,columnFieldName:this.props.archInfo.columnFieldName,measureField:this.props.archInfo.measureField,readonlyField:this.props.archInfo.readonlyField,fieldsInfo:this.props.relatedModels[this.props.resModel].fields,activeRangeName,ranges:this.props.archInfo.ranges,defaultAnchor,});const rootRef=useRef("root");useSetupAction({rootRef:rootRef,getLocalState:()=>{const{anchor,range}=this.model.navigationInfo;return{anchor,activeRangeName:range?.name,};}})
const isWeekendVisible=browser.localStorage.getItem("grid.isWeekendVisible");this.state=useState({activeRangeName:this.model.navigationInfo.range?.name,isWeekendVisible:isWeekendVisible!==null&&isWeekendVisible!==undefined?JSON.parse(isWeekendVisible):true,});useViewButtons(rootRef,{beforeExecuteAction:this.beforeExecuteActionButton.bind(this),afterExecuteAction:this.afterExecuteActionButton.bind(this),reload:this.reload.bind(this),});onWillUnmount(()=>this.closeDialog?.());this.searchBarToggler=useSearchBarToggler();}
get isMobile(){return this.env.isSmall;}
get isEditable(){return(this.props.archInfo.activeActions.edit&&this.props.archInfo.editable);}
get displayNoContent(){return(!(this.props.archInfo.displayEmpty||this.model.hasData())||this.model.useSampleModel);}
get displayAddALine(){return this.props.archInfo.activeActions.create;}
get hasDisplayableData(){return true;}
get options(){const{hideLineTotal,hideColumnTotal,hasBarChartTotal,createInline}=this.props.archInfo;return{hideLineTotal,hideColumnTotal,hasBarChartTotal,createInline,};}
createRecord(params){const columnContext=this.model.columnFieldIsDate?{[`default_${this.model.columnFieldName}`]:serializeDate(this.model.navigationInfo.anchor),}:{};const context={...this.props.context,...columnContext,...(params?.context||{}),};this.closeDialog=this.dialogService.add(FormViewDialog,{title:_t("New Record"),resModel:this.model.resModel,viewId:this.props.archInfo.formViewId,onRecordSaved:this.onRecordSaved.bind(this),...(params||{}),context,},{onClose:()=>{this.closeDialog=null;},});}
async beforeExecuteActionButton(){}
async afterExecuteActionButton(){}
async reload(){await this.model.fetchData();}
async onRecordSaved(record){await this.reload();}
get columns(){return this.state.isWeekendVisible||this.state.activeRangeName==="day"?this.model.columnsArray:this.model.columnsArray.filter(column=>{return DateTime.fromISO(column.value).weekday<6;});}
toggleWeekendVisibility(){this.state.isWeekendVisible=!this.state.isWeekendVisible;browser.localStorage.setItem("grid.isWeekendVisible",this.state.isWeekendVisible);}}
return __exports;});;

/* /web_grid/static/src/views/grid_model.js */
odoo.define('@web_grid/views/grid_model',['@web/core/utils/concurrency','@web/core/utils/hooks','@web/core/domain','@web/core/l10n/dates','@web/core/l10n/localization','@web/core/l10n/translation','@web/model/model','@web/core/browser/browser'],function(require){'use strict';let __exports={};const{KeepLast,Mutex}=require("@web/core/utils/concurrency");const{useService}=require("@web/core/utils/hooks");const{Domain}=require("@web/core/domain");const{serializeDate}=require("@web/core/l10n/dates");const{localization}=require("@web/core/l10n/localization");const{_t}=require("@web/core/l10n/translation");const{Model}=require("@web/model/model");const{browser}=require("@web/core/browser/browser");const{DateTime,Interval}=luxon;const GridCell=__exports.GridCell=class GridCell{constructor(dataPoint,row,column,value=0,isHovered=false){this._dataPoint=dataPoint;this.row=row;this.column=column;this.model=dataPoint.model;this.value=value;this.isHovered=isHovered;this._readonly=false;this.column.addCell(this);}
get readonly(){return this._readonly||this.column.readonly;}
get domain(){const domains=[this._dataPoint.searchParams.domain,this.row.domain,this.column.domain];return Domain.and(domains);}
get context(){return{...this.row.section?.context,...this.row.context,...this.column.context,};}
get title(){const rowTitle=!this.row.section||this.row.section.isFake?this.row.title:`${this.row.section.title} / ${this.row.title}`;const columnTitle=this.column.title;return`${rowTitle} (${columnTitle})`;}
async update(value){return this.model.mutex.exec(async()=>{await this._update(value);});}
async _update(value){const oldValue=this.value;const result=await this.model.orm.call(this.model.resModel,"grid_update_cell",[this.domain.toList({}),this.model.measureFieldName,value-oldValue],{context:this.context});if(result){this.model.actionService.doAction(result);return;}
this.row.updateCell(this.column,value);this.model.notify();}}
const GridRow=__exports.GridRow=class GridRow{constructor(domain,valuePerFieldName,dataPoint,section,isAdditionalRow=false){this._domain=domain;this._dataPoint=dataPoint;this.cells={};this.valuePerFieldName=valuePerFieldName;this.id=dataPoint.rowId++;this.model=dataPoint.model;this.section=section;if(section){this.section.addRow(this);}
this.grandTotal=0;this.grandTotalWeekendHidden=0;this.isAdditionalRow=isAdditionalRow;this._generateCells();}
get initialRecordValues(){return this.valuePerFieldName;}
get title(){const labelArray=[];for(const rowField of this._dataPoint.rowFields){let title=this.valuePerFieldName[rowField.name];if(this.model.fieldsInfo[rowField.name].type==="many2one"){if(title){title=title[1];}else if(labelArray.length){title="";}else{title="None";}}
if(title){labelArray.push(title);}}
return labelArray.join(" / ");}
get domain(){if(this.section.isFake){return this._domain;}
return Domain.and([this.section.domain,this._domain]);}
get context(){const context={};const getValue=(fieldName,value)=>this.model.fieldsInfo[fieldName].type==="many2one"?value&&value[0]:value;for(const[key,value]of Object.entries(this.valuePerFieldName)){context[`default_${key}`]=getValue(key,value);}
return context;}
getSection(){return!this.section.isFake&&this.section;}
_generateCells(){for(const column of this._dataPoint.columnsArray){this.cells[column.id]=new this.model.constructor.Cell(this._dataPoint,this,column,0);}}
_ensureColumnExist(column){if(!(column.id in this._dataPoint.data.columns)){throw new Error("Unbound index: the columnId is not in the row columns");}
return true;}
updateCell(column,value){this._ensureColumnExist(column);const cell=this.cells[column.id];const oldValue=cell.value;cell.value=value;const delta=value-oldValue;this.section.updateGrandTotal(column,delta);this.grandTotal+=delta;this.grandTotalWeekendHidden+=column.isWeekDay?delta:0;column.grandTotal+=delta;if(this.isAdditionalRow&&delta>0){this.isAdditionalRow=false;}}
setReadonlyCell(column,readonly){this._ensureColumnExist(column);if(readonly instanceof Array){readonly=readonly.length>0;}else if(!(readonly instanceof Boolean)){readonly=Boolean(readonly);}
this.cells[column.id]._readonly=readonly;}
getGrandTotal(showWeekend){return showWeekend?this.grandTotal:this.grandTotalWeekendHidden;}}
const GridSection=__exports.GridSection=class GridSection extends GridRow{constructor(){super(...arguments);this.sectionId=this._dataPoint.sectionId++;this.rows={};this.isSection=true;this.lastRow=null;}
get value(){return this.valuePerFieldName&&this.valuePerFieldName[this._dataPoint.sectionField.name];}
get domain(){let value=this.value;if(this.model.fieldsInfo[this._dataPoint.sectionField.name].type==="many2one"){value=value&&value[0];}
return new Domain([[this._dataPoint.sectionField.name,"=",value]]);}
get title(){let title=this.value;if(this._dataPoint.sectionField&&this._dataPoint.fieldsInfo[this._dataPoint.sectionField.name].type==="many2one"){title=(title&&title[1])||"None";}
return title;}
get initialRecordValues(){return{[this._dataPoint.sectionField.name]:this.value};}
get isFake(){return this.value==null;}
get context(){const context={};const getValue=(fieldName,value)=>this.model.fieldsInfo[fieldName].type==="many2one"?value&&value[0]:value;if(!this.isFake){const sectionFieldName=this._dataPoint.sectionField.name;context[`default_${sectionFieldName}`]=getValue(sectionFieldName,this.value);}
return context;}
getSection(){return!this.isFake&&this;}
addRow(row){if(row.id in this.rows){throw new Error("Row already added in section");}
this.rows[row.id]=row;this.lastRow=row;}
updateGrandTotal(column,delta){this.cells[column.id].value+=delta;this.grandTotal+=delta;this.grandTotalWeekendHidden+=column.isWeekDay?delta:0;}}
const GridColumn=__exports.GridColumn=class GridColumn{constructor(dataPoint,title,value,readonly=false){this._dataPoint=dataPoint;this.model=dataPoint.model;this.title=title;this.value=value;this.cells=[];this.id=dataPoint.columnId++;this.grandTotal=0;this.readonly=readonly;}
addCell(cell){if(cell.id in this.cells){throw new Error("Cell already added in column");}
this.cells.push(cell);this.grandTotal+=cell.value;}
get domain(){return new Domain([[this._dataPoint.columnFieldName,"=",this.value]]);}
get context(){return{[`default_${this._dataPoint.columnFieldName}`]:this.value};}}
const DateGridColumn=__exports.DateGridColumn=class DateGridColumn extends GridColumn{constructor(dataPoint,title,dateStart,dateEnd,isToday,isWeekDay,readonly=false){super(dataPoint,title,dateStart,readonly);this.dateEnd=dateEnd;this.isToday=isToday;this.isWeekDay=isWeekDay;}
get domain(){return new Domain(["&",[this._dataPoint.columnFieldName,">=",this.value],[this._dataPoint.columnFieldName,"<",this.dateEnd],]);}}
const GridDataPoint=__exports.GridDataPoint=class GridDataPoint{constructor(model,params){this.model=model;const{rowFields,sectionField,searchParams}=params;this.rowFields=rowFields;this.sectionField=sectionField;this.searchParams=searchParams;this.sectionId=0;this.rowId=0;this.columnId=0;}
get orm(){return this.model.orm;}
get Section(){return this.model.constructor.Section;}
get Row(){return this.model.constructor.Row;}
get Column(){return this.model.constructor.Column;}
get DateColumn(){return this.model.constructor.DateColumn;}
get Cell(){return this.model.constructor.Cell;}
get fieldsInfo(){return this.model.fieldsInfo;}
get columnFieldName(){return this.model.columnFieldName;}
get resModel(){return this.model.resModel;}
get fields(){return this._getFields();}
get groupByFields(){return this._getFields(true);}
get navigationInfo(){return this.model.navigationInfo;}
get dateFormat(){return{day:"ccc,\nMMM\u00A0d",month:"MMMM\nyyyy"};}
get columnFieldIsDate(){return this.model.columnFieldIsDate;}
get columnGroupByFieldName(){return this.columnFieldIsDate?this.navigationInfo.range.name==='year'?`${this.columnFieldName}:month`:`${this.columnFieldName}:day`:this.columnFieldName;}
get readonlyField(){return this.model.readonlyField;}
get sectionsArray(){return Object.values(this.data.sections);}
get rowsArray(){return Object.values(this.data.rows);}
get columnsArray(){return Object.values(this.data.columns);}
_getFields(grouped=false){const fields=[];if(!grouped){fields.push(this.columnFieldName,this.model.measureGroupByFieldName,"ids:array_agg(id)");if(this.readonlyField){const aggReadonlyField=`${this.readonlyField.name}:${this.readonlyField.aggregator}`;fields.push(aggReadonlyField);}}else{fields.push(this.columnGroupByFieldName);}
fields.push(...this.rowFields.map((r)=>r.name));if(this.sectionField){fields.push(this.sectionField.name);}
return fields;}
_getDateColumnTitle(date){if(this.navigationInfo.range.step in this.dateFormat){return date.toFormat(this.dateFormat[this.navigationInfo.range.step]);}
return serializeDate(date);}
_generateDateColumns(){const generateNext=(dateStart)=>dateStart.plus({[`${this.navigationInfo.range.step}s`]:1});for(let currentDate=this.navigationInfo.periodStart;currentDate<this.navigationInfo.periodEnd;currentDate=generateNext(currentDate)){const domainStart=currentDate;const domainStop=generateNext(currentDate);const domainStartSerialized=serializeDate(domainStart);const isWeekDay=currentDate.weekday<6;const column=new this.DateColumn(this,this._getDateColumnTitle(currentDate),domainStartSerialized,serializeDate(domainStop),currentDate.startOf("day").equals(this.model.today.startOf("day")),isWeekDay,);this.data.columns[column.id]=column;this.data.columnsKeyToIdMapping[domainStartSerialized]=column.id;}}
async _searchMany2oneColumns(domain,readonlyField){const fieldsToFetch=["id","display_name"];if(readonlyField){fieldsToFetch.push(readonlyField);}
const columnField=this.fieldsInfo[this.columnFieldName];const columnRecords=await this.orm.searchRead(columnField.relation,domain||[],fieldsToFetch);return columnRecords.map((read)=>Object.values(read));}
async _initialiseData(){this.data={columnsKeyToIdMapping:{},columns:{},rows:{},rowsKeyToIdMapping:{},fieldsInfo:this.fieldsInfo,sections:{},sectionsKeyToIdMapping:{},};this.record={context:{},resModel:this.resModel,resIds:[],};let columnRecords=[];const columnField=this.fieldsInfo[this.columnFieldName];if(this.columnFieldIsDate){this._generateDateColumns();}else{if(columnField.type==="selection"){const selectionFieldValues=await this.orm.call("ir.model.fields","get_field_selection",[this.resModel,this.columnFieldName]);columnRecords=selectionFieldValues;}else if(columnField.type==="many2one"){columnRecords=await this._searchMany2oneColumns();}else{throw new Error("Unmanaged column type. Supported types are date, selection and many2one.");}
for(const record of columnRecords){let readonly=false;let key,value;if(record.length===2){[key,value]=record;}else{[key,value,readonly]=record;}
const column=new this.Column(this,value,key,Boolean(readonly));this.data.columns[column.id]=column;this.data.columnsKeyToIdMapping[key]=column.id;}}}
async fetchData(){const data=await this.orm.webReadGroup(this.resModel,Domain.and([this.searchParams.domain,this.model.generateNavigationDomain()]).toList({}),this.fields,this.groupByFields,{lazy:false,});if(this.orm.isSample){data.groups=data.groups.filter((group)=>{const date=DateTime.fromISO(group["__range"][this.columnGroupByFieldName].from);return(date>=this.navigationInfo.periodStart&&date<=this.navigationInfo.periodEnd);});}
return data;}
_fetchAdditionalData(){return[];}
_postFetchAdditionalData(){return[];}
_getAdditionalPromises(){return[this._fetchUnavailabilityDays()];}
async _fetchUnavailabilityDays(args={}){if(!this.columnFieldIsDate){return{};}
const result=await this.orm.call(this.resModel,"grid_unavailability",[serializeDate(this.navigationInfo.periodStart),serializeDate(this.navigationInfo.periodEnd),],{...args,});this._processUnavailabilityDays(result);}
_processUnavailabilityDays(result){return;}
_generateRowKey(readGroupResult){let key="";const sectionKey=(this.sectionField&&this._generateSectionKey(readGroupResult))||false;for(const rowField of this.rowFields){let value=rowField.name in readGroupResult&&readGroupResult[rowField.name];if(this.fieldsInfo[rowField.name].type==="many2one"){value=value&&value[0];}
key+=`${value}\\|/`;}
return`${sectionKey}@|@${key}`;}
_generateSectionKey(readGroupResult){let value=readGroupResult[this.sectionField.name];if(this.fieldsInfo[this.sectionField.name].type==="many2one"){value=value&&value[0];}
return`/|\\${value.toString()}`;}
_generateRowDomainAndValues(readGroupResult){let domain=new Domain();const values={};for(const rowField of this.rowFields){const result=rowField.name in readGroupResult&&readGroupResult[rowField.name];let value=result;if(this.fieldsInfo[rowField.name].type==="many2one"){value=value&&value[0];}
values[rowField.name]=result;domain=Domain.and([domain,[[rowField.name,"=",value]]]);}
return{domain,values};}
_generateFakeSection(){const section=new this.Section(null,null,this,null);this.data.sections[section.id]=section;this.data.sectionsKeyToIdMapping["false"]=section.id;this.data.rows[section.id]=section;this.data.rowsKeyToIdMapping["false"]=section.id;return section;}
async _generateData(readGroupResults){let section;for(const readGroupResult of readGroupResults.groups){if(!this.orm.isSample){this.record.resIds.push(...readGroupResult.ids);}
const rowKey=this._generateRowKey(readGroupResult);if(this.sectionField){const sectionKey=this._generateSectionKey(readGroupResult);if(!(sectionKey in this.data.sectionsKeyToIdMapping)){const newSection=new this.Section(null,{[this.sectionField.name]:readGroupResult[this.sectionField.name]},this,null);this.data.sections[newSection.id]=newSection;this.data.sectionsKeyToIdMapping[sectionKey]=newSection.id;this.data.rows[newSection.id]=newSection;this.data.rowsKeyToIdMapping[sectionKey]=newSection.id;}
section=this.data.sections[this.data.sectionsKeyToIdMapping[sectionKey]];}else if(Object.keys(this.data.sections).length===0){section=this._generateFakeSection();}
let row;if(!(rowKey in this.data.rowsKeyToIdMapping)){const{domain,values}=this._generateRowDomainAndValues(readGroupResult);row=new this.Row(domain,values,this,section);this.data.rows[row.id]=row;this.data.rowsKeyToIdMapping[rowKey]=row.id;}else{row=this.data.rows[this.data.rowsKeyToIdMapping[rowKey]];}
let columnKey;if(this.columnFieldIsDate){columnKey=readGroupResult["__range"][this.columnGroupByFieldName].from;}else{const columnField=this.fieldsInfo[this.columnFieldName];if(columnField.type==="selection"){columnKey=readGroupResult[this.columnFieldName];}else if(columnField.type==="many2one"){columnKey=readGroupResult[this.columnFieldName][0];}else{throw new Error("Unmanaged column type. Supported types are date, selection and many2one.");}}
if(this.data.columnsKeyToIdMapping[columnKey]in this.data.columns){const column=this.data.columns[this.data.columnsKeyToIdMapping[columnKey]];row.updateCell(column,readGroupResult[this.model.measureFieldName]);if(this.readonlyField&&this.readonlyField.name in readGroupResult){row.setReadonlyCell(column,readGroupResult[this.readonlyField.name]);}}}}
_itemsPostProcess(item){}
async load(){await this._initialiseData();const mergeAdditionalData=(fetchedData)=>{const additionalData={};for(const data of fetchedData){for(const[sectionKey,sectionInfo]of Object.entries(data)){if(!(sectionKey in additionalData)){additionalData[sectionKey]=sectionInfo;}else{for(const[rowKey,rowInfo]of Object.entries(sectionInfo.rows)){if(!(rowKey in additionalData[sectionKey].rows)){additionalData[sectionKey].rows[rowKey]=rowInfo;}}}}}
return additionalData;};const appendAdditionData=(additionalData)=>{for(const[sectionKey,sectionInfo]of Object.entries(additionalData)){if(!(sectionKey in this.data.sectionsKeyToIdMapping)){if(this.sectionField){const newSection=new this.Section(null,{[this.sectionField.name]:sectionInfo.value},this,null);this.data.sections[newSection.id]=newSection;this.data.sectionsKeyToIdMapping[sectionKey]=newSection.id;this.data.rows[newSection.id]=newSection;this.data.rowsKeyToIdMapping[sectionKey]=newSection.id;}else{this._generateFakeSection();}}
const section=this.data.sections[this.data.sectionsKeyToIdMapping[sectionKey]];for(const[rowKey,rowInfo]of Object.entries(sectionInfo.rows)){if(!(rowKey in this.data.rowsKeyToIdMapping)){const newRow=new this.Row(rowInfo.domain,rowInfo.values,this,section,true);this.data.rows[newRow.id]=newRow;this.data.rowsKeyToIdMapping[rowKey]=newRow.id;for(const column of Object.values(this.data.columns)){newRow.updateCell(column,0);}}}}};const[data,additionalData]=await Promise.all([this.fetchData(),Promise.all(this._fetchAdditionalData()),]);this._generateData(data);appendAdditionData(mergeAdditionalData(additionalData));if(!this.orm.isSample){const[,postFetchAdditionalData]=await Promise.all([Promise.all(this._getAdditionalPromises()),Promise.all(this._postFetchAdditionalData()),]);appendAdditionData(mergeAdditionalData(postFetchAdditionalData));}
this.data.items=[];for(const section of this.sectionsArray){this.data.items.push(section);this._itemsPostProcess(section);for(const rowId in section.rows){const row=section.rows[rowId];this._itemsPostProcess(row);this.data.items.push(row);}}}}
const GridNavigationInfo=__exports.GridNavigationInfo=class GridNavigationInfo{constructor(anchor,model){this.anchor=anchor;this.model=model;}
get _targetWeekday(){const firstDayOfWeek=localization.weekStart;return this.anchor.weekday<firstDayOfWeek?firstDayOfWeek-7:firstDayOfWeek;}
get periodStart(){if(this.range.span!=="week"){return this.anchor.startOf(this.range.span);}
return this.anchor.set({weekday:this._targetWeekday}).startOf("day");}
get periodEnd(){if(this.range.span!=="week"){return this.anchor.endOf(this.range.span);}
return this.anchor.set({weekday:this._targetWeekday}).plus({weeks:1,days:-1}).endOf("day");}
get interval(){return Interval.fromDateTimes(this.periodStart,this.periodEnd);}
contains(date){return this.interval.contains(date.startOf("day"));}}
const GridModel=__exports.GridModel=class GridModel extends Model{static DataPoint=GridDataPoint;static Cell=GridCell;static Column=GridColumn;static DateColumn=DateGridColumn;static Row=GridRow;static Section=GridSection;static NavigationInfo=GridNavigationInfo;setup(params){this.notificationService=useService("notification");this.actionService=useService("action");this.keepLast=new KeepLast();this.mutex=new Mutex();this.defaultSectionField=params.sectionField;this.defaultRowFields=params.rowFields;this.resModel=params.resModel;this.fieldsInfo=params.fieldsInfo;this.columnFieldName=params.columnFieldName;this.columnFieldIsDate=this.fieldsInfo[params.columnFieldName].type==="date";this.measureField=params.measureField;this.readonlyField=params.readonlyField;this.ranges=params.ranges;this.defaultAnchor=params.defaultAnchor||this.today;this.navigationInfo=new this.constructor.NavigationInfo(this.defaultAnchor,this);const activeRangeName=browser.localStorage.getItem(this.storageKey)||params.activeRangeName;if(Object.keys(this.ranges).length&&activeRangeName){this.navigationInfo.range=this.ranges[activeRangeName];}}
get data(){return this._dataPoint?.data||{};}
get record(){return this._dataPoint?.record||{};}
get today(){return DateTime.local().startOf("day");}
get sectionsArray(){return Object.values(this.data.sections);}
get itemsArray(){return this.data.items;}
get columnsArray(){return Object.values(this.data.columns);}
get maxColumnsTotal(){return Math.max(...this.columnsArray.map((c)=>c.grandTotal));}
get measureFieldName(){return this.measureField.name;}
get measureGroupByFieldName(){if(this.measureField.aggregator){return`${this.measureFieldName}:${this.measureField.aggregator}`;}
return this.measureFieldName;}
get storageKey(){return`scaleOf-viewId-${this.env.config.viewId}`;}
isToday(date){return date.startOf("day").equals(this.today.startOf("day"));}
async setRange(rangeName){this.navigationInfo.range=this.ranges[rangeName];browser.localStorage.setItem(this.storageKey,rangeName);await this.fetchData();}
async setAnchor(anchor){this.navigationInfo.anchor=anchor;await this.fetchData();}
async setTodayAnchor(){await this.setAnchor(this.today);}
hasData(){return this.sectionsArray.length;}
generateNavigationDomain(){if(this.columnFieldIsDate){return new Domain(["&",[this.columnFieldName,">=",serializeDate(this.navigationInfo.periodStart)],[this.columnFieldName,"<=",serializeDate(this.navigationInfo.periodEnd)],]);}else{return Domain.TRUE;}}
async resetAnchor(){await this.setAnchor(this.defaultAnchor);}
async moveAnchor(direction){if(direction=="forward"){this.navigationInfo.anchor=this.navigationInfo.anchor.plus({[this.navigationInfo.range.span]:1,});}else if(direction=="backward"){this.navigationInfo.anchor=this.navigationInfo.anchor.minus({[this.navigationInfo.range.span]:1,});}else{throw Error("Invalid argument");}
if(this.navigationInfo.contains(this.today)&&this.navigationInfo.anchor.startOf("day").equals(this.today.startOf("day"))){this.navigationInfo.anchor=this.today;}
await this.fetchData();}
async load(params={}){const searchParams={...this.searchParams,...params,};const groupBys=[];let notificationDisplayed=false;for(const groupBy of searchParams.groupBy){if(groupBy.startsWith(this.columnFieldName)){if(!notificationDisplayed){this.notificationService.add(_t("Grouping by the field used in the column of the grid view is not possible."),{type:"warning"});notificationDisplayed=true;}}else{groupBys.push(groupBy);}}
if(searchParams.length!==groupBys.length){searchParams.groupBy=groupBys;}
let rowFields=[];let sectionField;if(searchParams.groupBy.length){if(this.defaultSectionField&&searchParams.groupBy.length>1&&searchParams.groupBy[0]===this.defaultSectionField.name){sectionField=this.defaultSectionField;}
const rowFieldPerFieldName=Object.fromEntries(this.defaultRowFields.map((r)=>[r.name,r]));for(const groupBy of searchParams.groupBy){if(sectionField&&groupBy===sectionField.name){continue;}
if(groupBy in rowFieldPerFieldName){rowFields.push({...rowFieldPerFieldName[groupBy],invisible:"False",});}else{rowFields.push({name:groupBy});}}}else{if(this.defaultSectionField&&(this.defaultSectionField.invisible!=="True"&&this.defaultSectionField.invisible!=="1")){sectionField=this.defaultSectionField;}
rowFields=this.defaultRowFields.filter((r)=>(r.invisible!=="True"&&r.invisible!=="1"));}
const dataPoint=new this.constructor.DataPoint(this,{searchParams,rowFields,sectionField,});await this.keepLast.add(dataPoint.load());this._dataPoint=dataPoint;this.searchParams=searchParams;this.rowFields=rowFields;this.sectionField=sectionField;}
async fetchData(params={}){await this.load(params);this.useSampleModel=false;this.notify();}}
return __exports;});;

/* /web_grid/static/src/views/grid_renderer.js */
odoo.define('@web_grid/views/grid_renderer',['@web/core/l10n/translation','@web/core/domain','@web/core/registry','@web/core/utils/hooks','@web/core/utils/strings','@web/core/utils/timing','@web/core/virtual_grid_hook','@web/views/fields/field','@web/model/record','@web/core/hotkeys/hotkey_service','@web/views/view_components/view_scale_selector','@web_grid/components/grid_component/grid_component','@odoo/owl'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Domain}=require("@web/core/domain");const{registry}=require("@web/core/registry");const{useService}=require("@web/core/utils/hooks");const{escape}=require("@web/core/utils/strings");const{useDebounced}=require("@web/core/utils/timing");const{useVirtualGrid}=require("@web/core/virtual_grid_hook");const{Field}=require("@web/views/fields/field");const{Record}=require("@web/model/record");const{getActiveHotkey}=require("@web/core/hotkeys/hotkey_service");const{ViewScaleSelector}=require("@web/views/view_components/view_scale_selector");const{GridComponent}=require("@web_grid/components/grid_component/grid_component");const{Component,markup,useState,onWillUpdateProps,onMounted,onPatched,reactive,useRef,useExternalListener,}=require("@odoo/owl");const GridRenderer=__exports.GridRenderer=class GridRenderer extends Component{static components={Field,GridComponent,Record,ViewScaleSelector,};static template="web_grid.Renderer";static props={sections:{type:Array,optional:true},columns:{type:Array,optional:true},rows:{type:Array,optional:true},model:{type:Object,optional:true},options:Object,sectionField:{type:Object,optional:true},rowFields:Array,measureField:Object,isEditable:Boolean,widgetPerFieldName:Object,openAction:{type:Object,optional:true},contentRef:Object,createInline:Boolean,createRecord:Function,ranges:{type:Object,optional:true},state:Object,toggleWeekendVisibility:Function,};static defaultProps={sections:[],columns:[],rows:[],model:{},ranges:{},};setup(){this.rendererRef=useRef("renderer");this.actionService=useService("action");this.editionState=useState({hoveredCellInfo:false,editedCellInfo:false,});this.hoveredElement=null;const measureFieldName=this.props.model.measureFieldName;const fieldInfo=this.props.model.fieldsInfo[measureFieldName];const measureFieldWidget=this.props.widgetPerFieldName[measureFieldName];const widgetName=measureFieldWidget||fieldInfo.type;this.gridCell=registry.category("grid_components").get(widgetName);this.hoveredCellProps={name:measureFieldName,type:widgetName,component:this.gridCell.component,reactive:reactive({cell:null}),fieldInfo,readonly:!this.props.isEditable,openRecords:this.openRecords.bind(this),editMode:false,onEdit:this.onEditCell.bind(this),getCell:this.getCell.bind(this),isMeasure:true,};this.editCellProps={name:measureFieldName,type:widgetName,component:this.gridCell.component,reactive:reactive({cell:null}),fieldInfo,readonly:!this.props.isEditable,openRecords:this.openRecords.bind(this),editMode:true,onEdit:this.onEditCell.bind(this),getCell:this.getCell.bind(this),onKeyDown:this.onCellKeydown.bind(this),isMeasure:true,};this.isEditing=false;onWillUpdateProps(this.onWillUpdateProps);onMounted(this._focusOnToday);onPatched(this._focusOnToday);this.shouldFocusOnToday=true;this.onMouseOver=useDebounced(this._onMouseOver,10);this.onMouseOut=useDebounced(this._onMouseOut,10);this.virtualGrid=useVirtualGrid({scrollableRef:this.props.contentRef,initialScroll:{top:60},});useExternalListener(window,"click",this.onClick);useExternalListener(window,"keydown",this.onKeyDown);}
getCell(rowId,columnId){return this.props.model.data.rows[rowId]?.cells[columnId];}
getItemHeight(item){let height=this.rowHeight;if(item.isSection&&item.isFake){return 0;}
if(this.props.createInline&&!item.isSection&&item.section.lastRow.id===item.id){height*=2;}
return height;}
get isMobile(){return this.env.isSmall;}
get rowHeight(){return this.isMobile?48:32;}
get virtualRows(){this.virtualGrid.setRowsHeights(this.props.rows.map((row)=>this.getItemHeight(row)));const[start,end]=this.virtualGrid.rowsIndexes;return this.props.rows.slice(start,end+1);}
getRowPosition(row,isCreateInlineRow=false){const rowIndex=row?this.props.rows.findIndex((r)=>r.id===row.id):0;const section=row&&row.getSection();const sectionDisplayed=Boolean(section&&(section.value||this.props.sections.length>1));let rowPosition=this.rowsGap+rowIndex+1+(sectionDisplayed?section.sectionId:0);if(isCreateInlineRow){rowPosition+=1;}
if(!sectionDisplayed){rowPosition-=1;}
return rowPosition;}
getTotalRowPosition(){let sectionIndex=0;if(this.props.model.sectionField&&this.props.sections.length){if(this.props.sections.length>1||this.props.sections[0].value){sectionIndex=this.props.sections.length;}}
return((this.props.rows.length||1)+
sectionIndex+
(this.props.createInline?1:0)+
this.rowsGap);}
onWillUpdateProps(nextProps){}
formatValue(value){return this.gridCell.formatter(value);}
getDefaultState(data){return{};}
get rowsCount(){const addLineRows=this.props.createInline?this.props.sections.length||1:0;return this.props.rows.length-(this.props.model.sectionField?0:1)+addLineRows;}
get gridTemplateRows(){let totalRows=0;if(!this.props.options.hideColumnTotal){totalRows+=1;if(this.props.options.hasBarChartTotal){totalRows+=1;}}
return`auto repeat(${this.rowsCount + totalRows}, ${this.rowHeight}px)`;}
get gridTemplateColumns(){return`auto repeat(${this.props.columns.length}, ${
            this.props.columns.length > 7 ? "minmax(8ch, auto)" : "minmax(10ch, 1fr)"
        }) minmax(10ch, 10em)`;}
get measureLabel(){const measureFieldName=this.props.model.measureFieldName;if(measureFieldName==="__count"){return _t("Total");}
return(this.props.measureField.string||this.props.model.fieldsInfo[measureFieldName].string);}
get rowsGap(){return 1;}
get columnsGap(){return 1;}
get displayAddLine(){return this.props.createInline&&this.row.id===this.row.section.lastRow.id;}
getCellColorClass(column){return"text-900";}
getSectionColumnsClasses(column,row){const isToday=column.isToday;return{'bg-info bg-opacity-50':isToday,'bg-200 border-top':!isToday,'bg-opacity-75':this.getUnavailableClass(column)==='o_grid_unavailable'&&row.cells[column.id].value===0,}}
getSectionCellsClasses(column,row){return{'text-opacity-25':row.cells[column.id].value===0||this.getUnavailableClass(column)==='o_grid_unavailable',};}
isTextDanger(){return false;}
getTextColorClasses(column,row,isEven){const value=row.cells[column.id].value;const isTextDanger=this.isTextDanger(row,column);return{'text-bg-view':isEven&&value>=0&&!isTextDanger,'text-900':!isEven&&value>=0&&!isTextDanger,'text-danger':value<0||isTextDanger,}}
getCellsClasses(column,row,section,isEven){return{...this.getTextColorClasses(column,row,isEven),'o_grid_cell_today':column.isToday,'fst-italic':row.isAdditionalRow,};}
_getSectionTotalCellBgColor(section){return'text-bg-800';}
getSectionTotalRowClass(section,grandTotal){return{[this._getSectionTotalCellBgColor(section)]:true,'text-opacity-25':grandTotal===0,};}
getColumnBarChartHeightStyle(column){let heightPercentage=0;if(this.props.model.maxColumnsTotal!==0){heightPercentage=(column.grandTotal/this.props.model.maxColumnsTotal)*100;}
return`height: ${heightPercentage}%; bottom: 0;`;}
getFooterTotalCellClasses(grandTotal){if(grandTotal<0){return"bg-danger text-bg-danger";}
return"bg-400";}
getUnavailableClass(column,section=undefined){return"";}
getFieldAdditionalProps(fieldName){return{name:fieldName,type:this.props.widgetPerFieldName[fieldName]||this.props.model.fieldsInfo[fieldName].type,};}
onCreateInlineClick(section){const context={...(section?.context||{}),};const title=_t("Add a Line");this.props.createRecord({context,title});}
_focusOnToday(){if(!this.shouldFocusOnToday){return;}
this.shouldFocusOnToday=false;const{navigationInfo,columnFieldIsDate}=this.props.model;if(this.isMobile||!columnFieldIsDate||navigationInfo.range.name!="month"){return;}
const rendererEl=this.rendererRef.el;const todayEl=rendererEl.querySelector("div.o_grid_column_title.fw-bolder");if(todayEl){rendererEl.parentElement.scrollLeft=todayEl.offsetLeft-rendererEl.offsetWidth/2+todayEl.offsetWidth/2;}}
_onMouseOver(ev){if(this.hoveredElement||ev.fromElement?.classList.contains("dropdown-item")){return;}
const highlightableElement=ev.target.closest(".o_grid_highlightable");if(!highlightableElement){return;}
const{column,gridRow,gridColumn,row}=highlightableElement.dataset;const isCellInColumnTotalHighlighted=highlightableElement.classList.contains("o_grid_row_total");const elementsToHighlight=this.rendererRef.el.querySelectorAll(`.o_grid_highlightable[data-grid-row="${gridRow}"]:not(.o_grid_add_line):not(.o_grid_column_title), .o_grid_highlightable[data-grid-column="${gridColumn}"]:not(.o_grid_row_timer):not(.o_grid_section_title):not(.o_grid_row_title${
                isCellInColumnTotalHighlighted ? ",.o_grid_row_total" : ""
            })`);for(const node of elementsToHighlight){if(node.classList.contains("o_grid_bar_chart_container")){node.classList.add("o_grid_highlighted");}
if(node.dataset.gridRow===gridRow){node.classList.add("o_grid_highlighted");if(node.dataset.gridColumn===gridColumn){node.classList.add("o_grid_cell_highlighted");}else{node.classList.add("o_grid_row_highlighted");}}}
this.hoveredElement=highlightableElement;const cell=this.editCellProps.reactive.cell;if(row&&column&&!(cell&&cell.dataset.row===row&&cell.dataset.column===column)){this.hoveredCellProps.reactive.cell=highlightableElement;}}
_onMouseOut(ev){if(!this.hoveredElement){return;}
let relatedTarget=ev.relatedTarget;const gridCell=relatedTarget?.closest(".o_grid_cell");if(gridCell&&gridCell.dataset.gridRow===this.hoveredElement.dataset.gridRow&&gridCell.dataset.gridColumn===this.hoveredElement.dataset.gridColumn&&gridCell!==this.editCellProps.reactive.cell){return;}
while(relatedTarget){if(relatedTarget===this.hoveredElement){return;}
relatedTarget=relatedTarget.parentElement;}
const{gridRow,gridColumn}=this.hoveredElement.dataset;const elementsHighlighted=this.rendererRef.el.querySelectorAll(`.o_grid_highlightable[data-grid-row="${gridRow}"], .o_grid_highlightable[data-grid-column="${gridColumn}"]`);for(const node of elementsHighlighted){node.classList.remove("o_grid_highlighted","o_grid_row_highlighted","o_grid_cell_highlighted");}
this.hoveredElement=null;if(this.hoveredCellProps.reactive.cell){this.hoveredCellProps.reactive.cell.querySelector(".o_grid_cell_readonly").classList.remove("d-none");this.hoveredCellProps.reactive.cell=null;}}
onEditCell(value){if(this.editCellProps.reactive.cell){this.editCellProps.reactive.cell.querySelector(".o_grid_cell_readonly").classList.remove("d-none");}
if(value){this.editCellProps.reactive.cell=this.hoveredCellProps.reactive.cell;this.hoveredCellProps.reactive.cell=null;}else{this.editCellProps.reactive.cell=null;}}
_onKeyDown(ev){const hotkey=getActiveHotkey(ev);if(hotkey==="escape"&&this.editCellProps.reactive.cell){this.onEditCell(false);}}
onClick(ev){if(!this.editCellProps.reactive.cell||ev.target.closest(".o_grid_highlighted")||ev.target.closest(".o_grid_cell")){return;}
this.onEditCell(false);}
onKeyDown(ev){this._onKeyDown(ev);}
onCellClick(ev){ev.stopPropagation();const cell=ev.target.closest(".o_grid_highlightable");const{row,column}=cell.dataset;if(row&&column){if(this.editCellProps.reactive.cell){this.editCellProps.reactive.cell.querySelector(".o_grid_cell_readonly").classList.remove("d-none");}
this.editCellProps.reactive.cell=cell;}}
onCellKeydown(ev,cell){const hotkey=getActiveHotkey(ev);if(!this.rendererRef.el||!cell||!["tab","shift+tab","enter"].includes(hotkey)){this._onKeyDown(ev);return;}
ev.preventDefault();ev.stopImmediatePropagation();let rowId=cell.row.id;let columnId=cell.column.id;const columnIds=this.props.columns.map((c)=>c.id);const rowIds=[];for(const item of this.props.rows){if(!item.isSection){rowIds.push(item.id);}}
let columnIndex=columnIds.indexOf(columnId);let rowIndex=rowIds.indexOf(rowId);if(hotkey==="tab"){columnIndex+=1;rowIndex+=1;if(columnIndex<columnIds.length){columnId=columnIds[columnIndex];}else{columnId=columnIds[0];if(rowIndex<rowIds.length){rowId=rowIds[rowIndex];}else{rowId=rowIds[0];}}}else if(hotkey==="shift+tab"){columnIndex-=1;rowIndex-=1;if(columnIndex>=0){columnId=columnIds[columnIndex];}else{columnId=columnIds[columnIds.length-1];if(rowIndex>=0){rowId=rowIds[rowIndex];}else{rowId=rowIds[rowIds.length-1];}}}else if(hotkey==="enter"){rowIndex+=1;if(rowIndex>=rowIds.length){columnIndex=(columnIndex+1)%columnIds.length;columnId=columnIds[columnIndex];}
rowIndex=rowIndex%rowIds.length;rowId=rowIds[rowIndex];}
this.onEditCell(false);this.hoveredCellProps.reactive.cell=this.rendererRef.el.querySelector(`.o_grid_highlightable[data-row="${rowId}"][data-column="${columnId}"]`);this.onEditCell(true);}
async openRecords(actionTitle,domain,context){const resModel=this.props.model.resModel;if(this.props.openAction){const resIds=await this.props.model.orm.search(resModel,domain);this.actionService.doActionButton({...this.props.openAction,resModel,resIds,context,});}else{const noActivitiesFound=_t("No activities found");const{views=[]}=this.env.config;const openRecordsViews=["list","form"].map((viewType)=>{const view=views.find((view)=>view[1]===viewType);return[view?view[0]:false,viewType];});this.actionService.doAction({type:"ir.actions.act_window",name:actionTitle,res_model:resModel,views:openRecordsViews,domain,context,help:markup(`<p class='o_view_nocontent_smiling_face'>${escape(noActivitiesFound)}</p>`),});}}
onMagnifierGlassClick(section,column){const title=`${section.title} (${column.title})`;const domain=Domain.and([section.domain,column.domain]).toList();this.openRecords(title,domain,section.context);}
get rangesArray(){return Object.values(this.props.ranges);}
async onRangeClick(name){await this.props.model.setRange(name);this.props.state.activeRangeName=name;this.shouldFocusOnToday=true;}
async onTodayButtonClick(){await this.props.model.setTodayAnchor();this.shouldFocusOnToday=true;}
async onPreviousButtonClick(){await this.props.model.moveAnchor("backward");this.shouldFocusOnToday=true;}
async onNextButtonClick(){await this.props.model.moveAnchor("forward");this.shouldFocusOnToday=true;}}
return __exports;});;

/* /web_grid/static/src/views/grid_view.js */
odoo.define('@web_grid/views/grid_view',['@web/core/registry','@web_grid/views/grid_arch_parser','@web_grid/views/grid_controller','@web_grid/views/grid_model','@web_grid/views/grid_renderer'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{GridArchParser}=require("@web_grid/views/grid_arch_parser");const{GridController}=require("@web_grid/views/grid_controller");const{GridModel}=require("@web_grid/views/grid_model");const{GridRenderer}=require("@web_grid/views/grid_renderer");const gridView=__exports.gridView={type:"grid",ArchParser:GridArchParser,Controller:GridController,Model:GridModel,Renderer:GridRenderer,buttonTemplate:"web_grid.Buttons",props:(genericProps,view)=>{const{ArchParser,Model,Renderer,buttonTemplate:viewButtonTemplate}=view;const{arch,relatedModels,resModel,buttonTemplate}=genericProps;return{...genericProps,archInfo:new ArchParser().parse(arch,relatedModels,resModel),buttonTemplate:buttonTemplate||viewButtonTemplate,Model,Renderer,};}};registry.category('views').add('grid',gridView);return __exports;});;

/* /analytic_enterprise/static/src/analytic_line_grid/analytic_line_grid_model.js */
odoo.define('@analytic_enterprise/analytic_line_grid/analytic_line_grid_model',['@web/core/l10n/dates','@web_grid/views/grid_model'],function(require){'use strict';let __exports={};const{serializeDate,deserializeDate}=require("@web/core/l10n/dates");const{GridNavigationInfo,GridModel,GridDataPoint}=require("@web_grid/views/grid_model");const AnalyticLineGridDataPoint=__exports.AnalyticLineGridDataPoint=class AnalyticLineGridDataPoint extends GridDataPoint{async _initialiseData(){if(this.navigationInfo.range.span==="year"){await this.navigationInfo.fetchPeriod();}
await super._initialiseData();}}
const AnalyticLineGridNavigationInfo=__exports.AnalyticLineGridNavigationInfo=class AnalyticLineGridNavigationInfo extends GridNavigationInfo{get periodStart(){if(this.range.span!=="year"||!this._periodStart){return super.periodStart;}
return this._periodStart;}
get periodEnd(){if(this.range.span!=="year"||!this._periodEnd){return super.periodEnd;}
return this._periodEnd;}
async fetchPeriod(){const{date_from,date_to}=await this.model.orm.call(this.model.resModel,"grid_compute_year_range",[serializeDate(this.anchor)]);this._periodStart=deserializeDate(date_from);this._periodEnd=deserializeDate(date_to);}}
const AnalyticLineGridModel=__exports.AnalyticLineGridModel=class AnalyticLineGridModel extends GridModel{static DataPoint=AnalyticLineGridDataPoint;static NavigationInfo=AnalyticLineGridNavigationInfo;}
return __exports;});;

/* /analytic_enterprise/static/src/analytic_line_grid/analytic_line_grid_view.js */
odoo.define('@analytic_enterprise/analytic_line_grid/analytic_line_grid_view',['@web/core/registry','@web_grid/views/grid_view','@analytic_enterprise/analytic_line_grid/analytic_line_grid_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{gridView}=require("@web_grid/views/grid_view");const{AnalyticLineGridModel}=require("@analytic_enterprise/analytic_line_grid/analytic_line_grid_model");const analyticLineGridView=__exports.analyticLineGridView={...gridView,Model:AnalyticLineGridModel,}
registry.category("views").add("analytic_line_grid",analyticLineGridView)
return __exports;});;

/* /hr_gantt/static/src/hr_gantt_employee_avatar.js */
odoo.define('@hr_gantt/hr_gantt_employee_avatar',['@mail/views/web/fields/avatar/avatar','@hr/components/avatar_card_employee/avatar_card_employee_popover','@web/core/popover/popover_hook'],function(require){'use strict';let __exports={};const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{AvatarCardEmployeePopover}=require("@hr/components/avatar_card_employee/avatar_card_employee_popover");const{usePopover}=require("@web/core/popover/popover_hook");const GanttEmployeeAvatar=__exports.GanttEmployeeAvatar=class GanttEmployeeAvatar extends Avatar{static template="hr.GanttEmployeeAvatar";setup(){super.setup();this.avatarCard=usePopover(AvatarCardEmployeePopover);}
openCard(ev){if(this.env.isSmall||!this.props.resId){return;}
const target=ev.currentTarget;if(!this.avatarCard.isOpen){this.avatarCard.open(target,{id:this.props.resId,});}}}
return __exports;});;

/* /hr_gantt/static/src/hr_gantt_renderer.js */
odoo.define('@hr_gantt/hr_gantt_renderer',['@hr_gantt/hr_gantt_employee_avatar','@web_gantt/gantt_renderer'],function(require){'use strict';let __exports={};const{GanttEmployeeAvatar}=require("@hr_gantt/hr_gantt_employee_avatar");const{GanttRenderer}=require("@web_gantt/gantt_renderer");const{DateTime}=luxon;const HrGanttRenderer=__exports.HrGanttRenderer=class HrGanttRenderer extends GanttRenderer{static rowHeaderTemplate="hr.HrGanttRenderer.RowHeader";static components={...GanttRenderer.components,Avatar:GanttEmployeeAvatar};computeDerivedParams(){this.rowsWithAvatar={};super.computeDerivedParams();}
getAvatarProps(row){return this.rowsWithAvatar[row.id];}
hasAvatar(row){return row.id in this.rowsWithAvatar;}
processRow(row){const{groupedByField,name,resId}=row;if(groupedByField==="employee_id"&&Boolean(resId)){const{fields}=this.model.metaData;const relation=fields.employee_id.relation;const resModel=relation==='hr.employee'?'hr.employee.public':relation;this.rowsWithAvatar[row.id]={resModel,resId,displayName:name};}
return super.processRow(...arguments);}
getPill(record){const pill=super.getPill(record);const{unit}=this.model.metaData.scale;const[startIndex,endIndex]=pill.grid.column;if(["week","month"].includes(unit)&&(endIndex-startIndex===2)){const{dateStartField,dateStopField,globalStart,globalStop,}=this.model.metaData;const start=DateTime.max(globalStart,record[dateStartField]);const stop=DateTime.min(globalStop,record[dateStopField]);if(start.day===stop.day){const startTime=start.hour+(start.minute/60);const stopTime=stop.hour+(stop.minute/60);const closestToNoon=12-startTime<stopTime-12?startTime:stopTime;if(startTime>=11&&startTime===closestToNoon){pill.grid.column=[startIndex+1,endIndex];}else if(stopTime<=14){pill.grid.column=[startIndex,endIndex-1];}}}
return pill;}}
return __exports;});;

/* /hr_gantt/static/src/hr_gantt_view.js */
odoo.define('@hr_gantt/hr_gantt_view',['@web_gantt/gantt_view','@hr_gantt/hr_gantt_renderer','@web/core/registry'],function(require){'use strict';let __exports={};const{ganttView}=require("@web_gantt/gantt_view");const{HrGanttRenderer}=require("@hr_gantt/hr_gantt_renderer");const{registry}=require("@web/core/registry");const viewRegistry=registry.category("views");const hrGanttView=__exports.hrGanttView={...ganttView,Renderer:HrGanttRenderer,};viewRegistry.add("hr_gantt",hrGanttView);return __exports;});;

/* /web_hierarchy/static/src/hierarchy_arch_parser.js */
odoo.define('@web_hierarchy/hierarchy_arch_parser',['@web/core/utils/xml','@web/search/utils/order_by','@web/views/fields/field','@web/views/utils','@web/core/utils/strings'],function(require){'use strict';let __exports={};const{visitXML}=require("@web/core/utils/xml");const{stringToOrderBy}=require("@web/search/utils/order_by");const{Field}=require("@web/views/fields/field");const{getActiveActions}=require("@web/views/utils");const{exprToBoolean}=require("@web/core/utils/strings");const HierarchyArchParser=__exports.HierarchyArchParser=class HierarchyArchParser{parse(xmlDoc,models,modelName){const archInfo={activeActions:getActiveActions(xmlDoc),defaultOrder:stringToOrderBy(xmlDoc.getAttribute("default_order")||null),draggable:false,icon:"fa-share-alt o_hierarchy_icon",parentFieldName:"parent_id",fieldNodes:{},templateDocs:{},xmlDoc,};const fieldNextIds={};const fields=models[modelName].fields;visitXML(xmlDoc,(node)=>{if(node.hasAttribute("t-name")){archInfo.templateDocs[node.getAttribute("t-name")]=node;return;}
if(node.tagName==="hierarchy"){if(node.hasAttribute("parent_field")){const parentFieldName=node.getAttribute("parent_field");if(!(parentFieldName in fields)){throw new Error(`The parent field set (${parentFieldName}) is not defined in the model (${modelName}).`);}else if(fields[parentFieldName].type!=="many2one"){throw new Error(`Invalid parent field, it should be a Many2One field.`);}else if(fields[parentFieldName].relation!==modelName){throw new Error(`Invalid parent field, the co-model should be same model than the current one (expected: ${modelName}).`);}
archInfo.parentFieldName=parentFieldName;}
if(node.hasAttribute("child_field")){const childFieldName=node.getAttribute("child_field");if(!(childFieldName in fields)){throw new Error(`The child field set (${childFieldName}) is not defined in the model (${modelName}).`);}else if(fields[childFieldName].type!=="one2many"){throw new Error(`Invalid child field, it should be a One2Many field.`);}else if(fields[childFieldName].relation!==modelName){throw new Error(`Invalid child field, the co-model should be same model than the current one (expected: ${modelName}).`);}
archInfo.childFieldName=childFieldName;}
if(node.hasAttribute("draggable")){archInfo.draggable=exprToBoolean(node.getAttribute("draggable"));}
if(node.hasAttribute("icon")){archInfo.icon=node.getAttribute("icon");}}else if(node.tagName==="field"){const fieldInfo=Field.parseFieldNode(node,models,modelName,"hierarchy");const name=fieldInfo.name;if(!(name in fieldNextIds)){fieldNextIds[name]=0;}
const fieldId=`${name}_${fieldNextIds[name]++}`;archInfo.fieldNodes[fieldId]=fieldInfo;node.setAttribute("field_id",fieldId);}});const cardDoc=archInfo.templateDocs["hierarchy-box"];if(!cardDoc){throw new Error("Missing 'hierarchy-box' template.");}
return archInfo;}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_card.js */
odoo.define('@web_hierarchy/hierarchy_card',['@odoo/owl','@web/core/py_js/py','@web/views/fields/field','@web/model/record','@web/views/view_button/view_button','@web/views/view_compiler','@web_hierarchy/hierarchy_compiler','@web/views/kanban/kanban_record'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{evaluateBooleanExpr}=require("@web/core/py_js/py");const{Field}=require("@web/views/fields/field");const{Record}=require("@web/model/record");const{ViewButton}=require("@web/views/view_button/view_button");const{useViewCompiler}=require("@web/views/view_compiler");const{HierarchyCompiler}=require("@web_hierarchy/hierarchy_compiler");const{getFormattedRecord}=require("@web/views/kanban/kanban_record");const HierarchyCard=__exports.HierarchyCard=class HierarchyCard extends Component{static components={Record,Field,ViewButton,};static props={node:Object,openRecord:Function,archInfo:Object,templates:Object,classNames:{type:String,optional:true},};static defaultProps={classNames:"",};static template="web_hierarchy.HierarchyCard";static Compiler=HierarchyCompiler;setup(){const{templates}=this.props;this.templates=useViewCompiler(this.constructor.Compiler,templates);this.evaluateBooleanExpr=evaluateBooleanExpr;}
get classNames(){const classNames=[this.props.classNames];if(this.props.node.nodes.length){classNames.push("o_hierarchy_node_unfolded");}
return classNames.join(" ");}
getRenderingContext(data){const record=getFormattedRecord(data.record);return{context:this.props.node.context,JSON,luxon,record,__comp__:Object.assign(Object.create(this),{this:this}),__record__:data.record,};}
onGlobalClick(ev){if(ev.target.closest("button")){return;}
this.props.openRecord(this.props.node);}
onClickArrowUp(ev){this.props.node.fetchParentNode();}
onClickArrowDown(ev){if(this.props.node.nodes.length){this.props.node.collapseChildNodes();}else{this.props.node.showChildNodes();}}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_compiler.js */
odoo.define('@web_hierarchy/hierarchy_compiler',['@web/views/kanban/kanban_compiler'],function(require){'use strict';let __exports={};const{KanbanCompiler}=require("@web/views/kanban/kanban_compiler");const HierarchyCompiler=__exports.HierarchyCompiler=class HierarchyCompiler extends KanbanCompiler{compileField(el,params){const fieldName=el.getAttribute("name");return super.compileField(el,{...(params||{}),recordExpr:"__record__",dataPointIdExpr:"__comp__.props.node.id",formattedValueExpr:`record['${fieldName}'].value`,});}
compileButton(el,params){return super.compileButton(el,{...(params||{}),recordExpr:"__record__",});}
compileNode(node,params={},evalInvisible=true){return super.compileNode(node,{...params,recordExpr:"__record__",},evalInvisible);}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_controller.js */
odoo.define('@web_hierarchy/hierarchy_controller',['@odoo/owl','@web/core/utils/hooks','@web/model/model','@web/model/relational_model/utils','@web/search/cog_menu/cog_menu','@web/search/layout','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/views/standard_view_props','@web/views/view_button/view_button_hook'],function(require){'use strict';let __exports={};const{Component,useRef}=require("@odoo/owl");const{useBus}=require("@web/core/utils/hooks");const{useModel}=require("@web/model/model");const{addFieldDependencies,extractFieldsFromArchInfo}=require("@web/model/relational_model/utils");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Layout}=require("@web/search/layout");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{standardViewProps}=require("@web/views/standard_view_props");const{useViewButtons}=require("@web/views/view_button/view_button_hook");const HierarchyController=__exports.HierarchyController=class HierarchyController extends Component{static components={Layout,CogMenu,SearchBar,};static props={...standardViewProps,Model:Function,Renderer:Function,buttonTemplate:String,archInfo:Object,};static template="web_hierarchy.HierarchyView";setup(){this.rootRef=useRef("root");const{parentFieldName,childFieldName}=this.props.archInfo;const{activeFields,fields}=extractFieldsFromArchInfo(this.props.archInfo,this.props.fields);addFieldDependencies(activeFields,fields,[{name:parentFieldName}]);this.model=useModel(this.props.Model,{resModel:this.props.resModel,activeFields,defaultOrderBy:this.props.archInfo.defaultOrder,fields,parentFieldName,childFieldName,});useBus(this.model.bus,"update",()=>{this.render(true);});useViewButtons(this.rootRef,{beforeExecuteAction:this.beforeExecuteActionButton.bind(this),afterExecuteAction:this.afterExecuteActionButton.bind(this),reload:this.model.reload.bind(this.model),});this.searchBarToggler=useSearchBarToggler();}
get displayNoContent(){return this.model.resIds.length===0;}
async openRecord(node,mode){const activeIds=this.model.root.resIds;this.props.selectRecord(node.resId,{activeIds,mode});}
async beforeExecuteActionButton(clickParams){}
async afterExecuteActionButton(clickParams){}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_model.js */
odoo.define('@web_hierarchy/hierarchy_model',['@web/core/domain','@web/core/l10n/translation','@web/core/utils/concurrency','@web/model/model','@web/search/utils/order_by'],function(require){'use strict';let __exports={};const{Domain}=require("@web/core/domain");const{_t}=require("@web/core/l10n/translation");const{KeepLast,Mutex}=require("@web/core/utils/concurrency");const{Model}=require("@web/model/model");const{orderByToString}=require("@web/search/utils/order_by");let nodeId=0;let forestId=0;let treeId=0;function getIdOfMany2oneField(value){return value&&value[0];}
const HierarchyNode=__exports.HierarchyNode=class HierarchyNode{constructor(model,config,data,tree,parentNode=null,populateChildNodes=true){this.id=nodeId++;this.data=data;this.parentNode=parentNode;this.tree=tree;this.model=model;this._config=config;this.hidden=false;tree.addNode(this);if(populateChildNodes){this.populateChildNodes();}}
get ancestorNode(){return this.parentNode?this.ancestorNode:this;}
get isLeaf(){return!this.nodes.length;}
get forest(){return this.tree.forest;}
get resId(){return this.data.id;}
get parentFieldName(){return this.model.parentFieldName;}
get parentResId(){return this.parentNode?.resId||getIdOfMany2oneField(this.data[this.parentFieldName]);}
get childResIds(){return this.nodes.length?this.nodes.map((node)=>node.resId):this.data[this.childFieldName]?.map((d)=>typeof d==="number"?d:d.id)||[];}
get childFieldName(){return this.model.childFieldName||this.model.defaultChildFieldName;}
get hasChildren(){return this.nodes.length>0||this.data[this.childFieldName]?.length>0;}
get canShowParentNode(){return Boolean(this.parentResId)&&!this.parentNode&&this.tree.forest.resIds.filter((resId)=>resId===this.resId).length===1;}
get canShowChildNodes(){return this.hasChildren&&this.nodes.length===0&&this.tree.forest.resIds.filter((resId)=>resId===this.resId).length===1;}
get descendantNodes(){const subNodes=[];if(!this.isLeaf){subNodes.push(...this.nodes);for(const node of this.nodes){if(node.descendantNodes.length){subNodes.push(...node.descendantNodes);}}}
return subNodes;}
get descendantsParentNodes(){const descendantsParentNodes=[];if(!this.isLeaf){descendantsParentNodes.push(this);this.nodes.reduce((parents,node)=>{if(!node.isLeaf){parents.push(...node.descendantsParentNodes);}
return parents;},descendantsParentNodes);}
return descendantsParentNodes;}
get allSubsidiaryResIds(){return this.descendantNodes.map((n)=>n.resId);}
populateChildNodes(){this.nodes=[];const children=this.data[this.childFieldName]||[];if(children.length&&children[0]instanceof Object&&this.tree.forest.resIds.filter((resId)=>resId===this.resId).length===1){this.createChildNodes(children);}}
createChildNodes(childNodesData){this.nodes=(childNodesData||this.data[this.childFieldName]).map((childData)=>new HierarchyNode(this.model,this._config,childData,this.tree,this));}
removeParentNode(){this.parentNode?.removeChildNode(this);this.parentNode=null;this.data[this.parentFieldName]=false;}
async fetchParentNode(){await this.model.fetchManager(this);}
async showChildNodes(){await this.model.fetchSubordinates(this);}
collapseChildNodes(){const childrenData=[];for(const childNode of this.nodes){childNode.data[this.childFieldName]=childNode.childResIds;childrenData.push(childNode.data);}
this.data[this.childFieldName]=childrenData;this.removeChildNodes();this.model.notify();}
removeChildNode(node){node.removeChildNodes();this.tree.removeNodes([node]);this.nodes=this.nodes.filter((n)=>n.id!==node.id);this.data[this.childFieldName]=this.nodes.map((n)=>n.data);}
removeChildNodes(){for(const childNode of this.nodes){if(!childNode.isLeaf){childNode.removeChildNodes();}}
this.tree.removeNodes(this.nodes);this.nodes=[];}
setParentNode(node){this.parentNode=node;node.addChildNode(this);const tree=node.tree;if(tree.root===this){tree.root=node;}else if(this.tree.root===this){this.tree.removeRoot();this.setTree(node.tree);}}
setTree(tree){this.tree=tree;for(const childNode of this.nodes){childNode.setTree(tree);}}
addChildNode(node){this.nodes.push(node);this.data[this.childFieldName].push(node.data);this.tree.addNode(node);}}
const HierarchyTree=__exports.HierarchyTree=class HierarchyTree{constructor(model,config,data,forest){this.id=treeId++;this.nodePerNodeId={};this.forest=forest;if(data){this.root=new HierarchyNode(model,config,data,this);this.forest.nodePerNodeId={...this.forest.nodePerNodeId,...this.nodePerNodeId,};}
this.model=model;this._config=config;}
get resIds(){return Object.values(this.nodePerNodeId).map((node)=>node.resId);}
addNode(node){this.nodePerNodeId[node.id]=node;this.forest.addNode(node);}
removeNodes(nodes){const nodeIds=nodes.map((node)=>node.id);this.nodePerNodeId=Object.fromEntries(Object.entries(this.nodePerNodeId).filter(([nodeId,])=>!nodeIds.includes(Number(nodeId))));this.forest.removeNodes(nodes);}
removeRoot(){this.forest.removeTree(this);}}
const HierarchyForest=__exports.HierarchyForest=class HierarchyForest{constructor(model,config,data){this.id=forestId++;this.nodePerNodeId={};this.trees=data.map((d)=>new HierarchyTree(model,config,d,this));this.model=model;this._config=config;}
get resIds(){return Object.values(this.nodePerNodeId).map((node)=>node.resId);}
get rootNodes(){return this.trees.map((t)=>t.root);}
addNode(node){this.nodePerNodeId[node.id]=node;}
removeNodes(nodes){const nodeIds=nodes.map((node)=>node.id);this.nodePerNodeId=Object.fromEntries(Object.entries(this.nodePerNodeId).filter(([nodeId,])=>!nodeIds.includes(Number(nodeId))));}
addNewRootNode(node){const tree=new HierarchyTree(this.model,this._config,null,this);tree.root=node;node.tree=tree;tree.addNode(node);for(const subNode of node.descendantNodes){tree.addNode(subNode);}
this.trees.push(tree);}
removeTree(tree){this.nodePerNodeId=Object.fromEntries(Object.entries(this.nodePerNodeId).filter(([nodeId,])=>!(nodeId in tree.nodePerNodeId)));this.trees=this.trees.filter((t)=>t.id!==tree.id);}}
const HierarchyModel=__exports.HierarchyModel=class HierarchyModel extends Model{static services=["notification"];setup(params,{notification}){this.keepLast=new KeepLast();this.mutex=new Mutex();this.resModel=params.resModel;this.fields=params.fields;this.parentFieldName=params.parentFieldName;this.childFieldName=params.childFieldName;this.activeFields=params.activeFields;this.defaultOrderBy=params.defaultOrderBy;this.notification=notification;this.config={domain:[],isRoot:true,};}
get parentField(){return this.fields[this.parentFieldName];}
get resIds(){return this.root?.resIds||[];}
get defaultChildFieldName(){return"__child_ids__";}
get defaultDomain(){return[[this.parentFieldName,"=",false]];}
get globalDomain(){if(!this.env.searchModel?.globalDomain.length){return[];}
return new Domain(this.env.searchModel.globalDomain).toList(this.env.searchModel.domainEvalContext);}
get activeFieldNames(){return Object.keys(this.activeFields);}
get fieldsToFetch(){const fieldsToFetch=[...this.activeFieldNames,];if(this.childFieldName){fieldsToFetch.push(this.childFieldName);}
return fieldsToFetch;}
get context(){return{bin_size:true,...(this.config.context||{}),};}
async load(params={}){nodeId=forestId=treeId=0;const config=this._getNextConfig(this.config,params);const data=await this.keepLast.add(this._loadData(config));this.root=this._createRoot(config,data);this.config=config;this.notify();}
async reload(){nodeId=forestId=treeId=0;const data=await this.keepLast.add(this._loadData(this.config,true));this.root=this._createRoot(this.config,data);this.notify({scrollTarget:"none"});}
notify(payload={scrollTarget:"bottom"}){super.notify();this.bus.trigger("hierarchyScrollTarget",payload);}
async fetchManager(node){if(this.root.trees.length>1){const treeExpanded=this._findTreeExpanded();const resIdsToFetch=[node.parentResId,node.resId,...node.allSubsidiaryResIds];if(treeExpanded&&treeExpanded.root.id!==node.id&&treeExpanded.root.parentResId===node.parentResId){resIdsToFetch.push(...treeExpanded.root.allSubsidiaryResIds);}
const config={...this.config,domain:["|",[this.parentFieldName,"=",node.parentResId],["id","in",resIdsToFetch]],}
const data=await this._loadData(config);this.root=this._createRoot(config,data);this.notify();return;}
const managerData=await this.keepLast.add(this._fetchManager(node));if(managerData){const parentNode=new HierarchyNode(this,this.config,managerData,node.tree,null,false);parentNode.createChildNodes();node.setParentNode(parentNode);this.notify();}}
async fetchSubordinates(node){const childFieldName=this.childFieldName||this.defaultChildFieldName;const children=node.data[childFieldName];if(children.length){const nodesToUpdate=[];if(!(children[0]instanceof Object)){const allNodeResIds=this.root.resIds;const existingChildResIds=children.filter((childResId)=>allNodeResIds.includes(childResId))
if(existingChildResIds.length){for(const tree of this.root.trees){if(existingChildResIds.includes(tree.root.resId)){nodesToUpdate.push(tree.root);}}}
const data=await this.keepLast.add(this._fetchSubordinates(node,existingChildResIds));if(data&&data.length){node.data[childFieldName]=data;}}
const nodeToCollapse=this._searchNodeToCollapse(node);if(nodeToCollapse&&!nodesToUpdate.includes(nodeToCollapse)){nodeToCollapse.collapseChildNodes();}
node.populateChildNodes();for(const n of nodesToUpdate){n.setParentNode(node);}
this.notify();}}
_searchNodeToCollapse(node){const parentNode=node.parentNode;let nodeToCollapse=null;if(parentNode){nodeToCollapse=parentNode.nodes.find((n)=>n.nodes.length);}else{const treeExpanded=this._findTreeExpanded();if(treeExpanded){nodeToCollapse=treeExpanded.root;}}
return nodeToCollapse;}
_findTreeExpanded(){return this.root.trees.find((t)=>t.root.nodes.length);}
_getNextConfig(currentConfig,params){const config=Object.assign({},currentConfig);config.context="context"in params?params.context:config.context;if("domain"in params){config.domain=params.domain;if(this.isSearchDefaultOrEmpty()&&config.context.hierarchy_res_id){config.domain=[["id","=",config.context.hierarchy_res_id]];const globalDomain=this.globalDomain;if(globalDomain.length){config.domain=Domain.and([config.domain,globalDomain]);}
delete config.context.hierarchy_res_id;}}
config.orderBy="orderBy"in params?params.orderBy:config.orderBy;if(!config.orderBy.length){config.orderBy=currentConfig.orderBy||[];}
if(this.defaultOrderBy&&!config.orderBy.length){config.orderBy=this.defaultOrderBy;}
return config;}
isSearchDefaultOrEmpty(){if(!this.env.searchModel){return true;}
const isDisabledOptionalSearchMenuType=(type)=>{return(["filter","groupBy","favorite"].includes(type)&&!this.env.searchModel.searchMenuTypes.has(type));};const activeSearchItems=this.env.searchModel.getSearchItems((item)=>item.isActive&&!isDisabledOptionalSearchMenuType(item.type));if(!activeSearchItems.length){return true;}
const defaultSearchItems=this.env.searchModel.getSearchItems((item)=>item.isDefault&&item.type!=="favorite"&&!isDisabledOptionalSearchMenuType(item.type));return JSON.stringify(defaultSearchItems)===JSON.stringify(activeSearchItems);}
async _loadData(config,reload=false){let onlyRoots=false;let domain=config.domain;const resIds=this.resIds;if(reload&&resIds.length>0){domain=[["id","in",resIds]];}else if(this.isSearchDefaultOrEmpty()){onlyRoots=true;domain=!domain.length?this.defaultDomain:Domain.and([this.defaultDomain,domain]).toList({});}
const hierarchyRead=async()=>{return await this.orm.call(this.resModel,"hierarchy_read",[domain,this.fieldsToFetch,this.parentFieldName,this.childFieldName,orderByToString(config.orderBy),],{context:this.context});};let result=await hierarchyRead();if(!result.length&&onlyRoots){domain=config.domain;result=await hierarchyRead();}
return this._formatData(result);}
_formatData(data){const dataStringified=JSON.stringify(data);const recordsPerParentId={};const recordPerId={};for(const record of data){recordPerId[record.id]=record;const parentId=getIdOfMany2oneField(record[this.parentFieldName]);if(!(parentId.toString()in recordsPerParentId)){recordsPerParentId[parentId]=[];}
recordsPerParentId[parentId].push(record);}
const formattedData=[];const recordIds=[];for(const[parentId,records]of Object.entries(recordsPerParentId)){if(!parentId||!(parentId in recordPerId)){formattedData.push(...records);}else{const parentRecord=recordPerId[parentId];if(recordIds.includes(parentRecord.id)){return JSON.parse(dataStringified);}
const ancestorId=getIdOfMany2oneField(parentRecord[this.parentFieldName]);if(ancestorId in recordsPerParentId){recordIds.push(...recordsPerParentId[ancestorId].map((r)=>r.id));}
parentRecord[this.childFieldName||this.defaultChildFieldName]=records;}}
if(!formattedData.length&&data?.length){formattedData.push(recordPerId[Object.keys(recordsPerParentId)[0]]);}
return formattedData;}
_createRoot(config,data){return new HierarchyForest(this,config,data);}
async _fetchManager(node,exclude_node=true){let domain=new Domain(["|",["id","=",node.parentResId],[this.parentFieldName,"=",node.parentResId],]);if(exclude_node){domain=Domain.and([domain,[["id","!=",node.resId]],])}
const result=await this.orm.searchRead(this.resModel,domain.toList({}),this.fieldsToFetch,{context:this.context,order:orderByToString(this.config.orderBy),},);let managerData={};const children=[];for(const data of result){if(data.id===node.parentResId){managerData=data;}else{children.push(data);}}
if(!this.childFieldName){if(children.length){await this._fetchDescendants(children);}}
managerData[this.childFieldName||this.defaultChildFieldName]=children;return managerData;}
async _fetchSubordinates(node,excludeResIds=null){let childrenResIds=node.data[this.childFieldName||this.defaultChildFieldName];if(excludeResIds){childrenResIds=childrenResIds.filter((childResId)=>!excludeResIds.includes(childResId));}
const data=await this.orm.searchRead(this.resModel,[["id","in",childrenResIds]],this.fieldsToFetch,{context:this.context,order:orderByToString(this.config.orderBy),},)
if(!this.childFieldName){await this._fetchDescendants(data);}
return data;}
async _fetchDescendants(childrenData){const resIds=childrenData.map((d)=>d.id);if(resIds.length){const fetchChildren=await this.orm.readGroup(this.resModel,[[this.parentFieldName,"in",resIds]],['id:array_agg'],[this.parentFieldName],{context:this.context||{},orderby:orderByToString(this.config.orderBy),},);const childIdsPerId=Object.fromEntries(fetchChildren.map((r)=>[r[this.parentFieldName][0],r.id]));for(const d of childrenData){if(d.id.toString()in childIdsPerId){d[this.defaultChildFieldName]=childIdsPerId[d.id.toString()];}}}}
async updateParentId(node,parentResId=false){return this.orm.write(this.resModel,[node.resId],{[this.parentFieldName]:parentResId},{context:this.context});}
async updateParentNode(nodeId,{parentNodeId,parentResId}){const node=this.root.nodePerNodeId[nodeId];const resId=node.resId;if(!node){return;}
const parentNode=parentNodeId?this.root.nodePerNodeId[parentNodeId]:null;parentResId=parentResId||parentNode?.resId||false;const oldParentNode=node.parentNode;if((parentNode&&!this.validateUpdateParentNode(node,parentNode))||parentNode?.resId===oldParentNode?.resId){return;}
node.hidden=true;this.notify({scrollTarget:"none"});await this.mutex.exec(async()=>{try{await this.updateParentId(node,parentResId);}catch(error){node.hidden=false;this.notify({scrollTarget:"none"});throw error;}});const domain=this.computeUpdateParentNodeDomain(node,parentResId,parentNode);const data=await this.orm.searchRead(this.resModel,domain,this.fieldsToFetch,{context:this.context,order:orderByToString(this.config.orderBy),});const formattedData=this._formatData(data);for(const record of formattedData){if(getIdOfMany2oneField(record[this.parentFieldName])!==parentResId){node.hidden=false;this.notify({scrollTarget:"none"});this.notification.add(_t(`The parent of "%s" was successfully updated. Reloading records to account for other changes.`,node.data.display_name||node.data.name),{type:"success"});return this.reload();}}
let nodeToCollapse;const treeExpanded=this._findTreeExpanded();const expandedParentNodeIds=treeExpanded?.root.descendantsParentNodes.map((node)=>node.id)||[];if(!node.isLeaf||!expandedParentNodeIds.includes(parentNode?.id)){const depth=expandedParentNodeIds.findIndex((id)=>id===parentNode?.parentNode?.id);if(depth===-1){nodeToCollapse=treeExpanded?.root;}else{const nodeIdToCollapse=expandedParentNodeIds.at(depth+1);if(nodeIdToCollapse){nodeToCollapse=treeExpanded?.nodePerNodeId[nodeIdToCollapse];}}}else{nodeToCollapse=parentNode;}
if(oldParentNode){oldParentNode.removeChildNode(node);}else{node.tree.removeNodes([node]);}
nodeToCollapse?.collapseChildNodes();if(!parentNode){nodeId=forestId=treeId=0;this.root=this._createRoot(this.config,formattedData);}else{parentNode.data[this.childFieldName||this.defaultChildFieldName]=formattedData;parentNode.populateChildNodes();}
const newNodeId=Object.keys(this.root.nodePerNodeId).find((key)=>{return this.root.nodePerNodeId[key].resId===resId;});this.notify({scrollTarget:newNodeId});}
validateUpdateParentNode(node,parentNode){if(parentNode.resId===node.resId){this.notification.add(_t("The parent record cannot be the record dragged."),{type:"danger",});return false;}else if(node.allSubsidiaryResIds.includes(parentNode.resId)){this.notification.add(_t("Cannot change the parent because it will cause a cyclic."),{type:"danger",});return false;}
return true;}
computeUpdateParentNodeDomain(node,parentResId,parentNode){const domainsOr=[[["id","=",node.resId]]];domainsOr.push([[this.parentFieldName,"=",parentResId]]);if(!node.isLeaf){const expandedTreeParentResIds=node.descendantsParentNodes.map((node)=>node.resId);domainsOr.push([[this.parentFieldName,"in",expandedTreeParentResIds]]);}else if(!parentNode){const expandedTreeParentResIds=node.tree.root.descendantsParentNodes.map((node)=>node.resId);domainsOr.push([[this.parentFieldName,"in",expandedTreeParentResIds]]);}else if(!parentNode.isLeaf){const expandedTreeParentResIds=parentNode.descendantsParentNodes.map((node)=>node.resId);domainsOr.push([[this.parentFieldName,"in",expandedTreeParentResIds]]);}
let domain=Domain.or(domainsOr);const globalDomain=this.globalDomain;if(globalDomain.length){domain=Domain.and([domain,globalDomain]);}
return domain.toList({});}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_node_draggable.js */
odoo.define('@web_hierarchy/hierarchy_node_draggable',['@odoo/owl','@web/core/utils/timing','@web/core/utils/objects','@web/core/utils/draggable_hook_builder'],function(require){'use strict';let __exports={};const{onWillUnmount,reactive,useEffect,useExternalListener}=require("@odoo/owl");const{useThrottleForAnimation}=require("@web/core/utils/timing");const{pick}=require("@web/core/utils/objects");const{makeDraggableHook}=require("@web/core/utils/draggable_hook_builder");const hookParams={name:"useHierarchyNodeDraggable",acceptedParams:{rows:[String],},defaultParams:{edgeScrolling:{speed:20,threshold:60},rows:null,},onComputeParams({ctx,params}){ctx.rowSelector=params.rows||null;if(ctx.rowSelector){ctx.fullSelector=`${ctx.rowSelector} ${ctx.fullSelector}`;}},onDragStart(params){const{ctx,addListener,callHandler}=params;const onElementPointerEnter=(ev)=>{const element=ev.currentTarget;current.hierarchyElement=element;callHandler("onElementEnter",{element});};const onElementPointerLeave=(ev)=>{const element=ev.currentTarget;current.hierarchyElement=null;callHandler("onElementLeave",{element});};const onRowPointerEnter=(ev)=>{const row=ev.currentTarget;current.hierarchyRow=row;callHandler("onRowEnter",{row});};const onRowPointerLeave=(ev)=>{const row=ev.currentTarget;current.hierarchyRow=null;callHandler("onRowLeave",{row});};const{ref,current,elementSelector,rowSelector}=ctx;for(const rowEl of ref.el.querySelectorAll(rowSelector)){addListener(rowEl,"pointerenter",onRowPointerEnter);addListener(rowEl,"pointerleave",onRowPointerLeave);}
for(const siblingEl of ref.el.querySelectorAll(elementSelector)){if(siblingEl!==current.element){addListener(siblingEl,"pointerenter",onElementPointerEnter);addListener(siblingEl,"pointerleave",onElementPointerLeave);}}
return pick(current,"element","row");},onDragEnd({ctx}){return pick(ctx.current,"element","row","hierarchyRow");},onDrop({ctx}){const{current}=ctx;const rowElement=current.hierarchyRow;const element=current.hierarchyElement;if((rowElement&&rowElement!==current.row)||element){return{element:current.element,row:current.row,nextRow:rowElement&&current.row!==rowElement?rowElement:null,newParentNode:element,};}},onWillStartDrag({ctx}){const{current,rowSelector}=ctx;if(rowSelector){current.row=current.element.closest(rowSelector);}
return pick(current,"element","row");},};__exports.useHierarchyNodeDraggable=useHierarchyNodeDraggable;function useHierarchyNodeDraggable(params){const setupHooks={addListener:useExternalListener,setup:useEffect,teardown:onWillUnmount,throttle:useThrottleForAnimation,wrapState:reactive,}
return makeDraggableHook({...hookParams,setupHooks})(params);}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_renderer.js */
odoo.define('@web_hierarchy/hierarchy_renderer',['@odoo/owl','@web/core/l10n/translation','@web/core/utils/hooks','@web/core/utils/scrolling','@web_hierarchy/hierarchy_card','@web_hierarchy/hierarchy_node_draggable'],function(require){'use strict';let __exports={};const{Component,useRef,onPatched}=require("@odoo/owl");const{_t}=require("@web/core/l10n/translation");const{useBus,useService}=require("@web/core/utils/hooks");const{scrollTo}=require("@web/core/utils/scrolling");const{HierarchyCard}=require("@web_hierarchy/hierarchy_card");const{useHierarchyNodeDraggable}=require("@web_hierarchy/hierarchy_node_draggable");const HierarchyRenderer=__exports.HierarchyRenderer=class HierarchyRenderer extends Component{static components={HierarchyCard,};static props={model:Object,openRecord:Function,archInfo:Object,templates:Object,};static template="web_hierarchy.HierarchyRenderer";setup(){this.rendererRef=useRef("renderer");this.notification=useService("notification");if(this.canDragAndDropRecord){useHierarchyNodeDraggable({ref:this.rendererRef,enable:this.draggable,elements:".o_hierarchy_node_container",handle:".o_hierarchy_node",rows:".o_hierarchy_row",ignore:"button",onDragStart:({addClass,element})=>{addClass(element,"o_hierarchy_dragged");addClass(element.querySelector(".o_hierarchy_node"),"shadow");},onDragEnd:({removeClass,element,row,hierarchyRow})=>{removeClass(element,"o_hierarchy_dragged");if(row){removeClass(row,"o_hierarchy_hover");}
if(hierarchyRow){removeClass(hierarchyRow,"o_hierarchy_hover");}},onDrop:(params)=>{this.nodeDrop(params);},onElementEnter:({addClass,element})=>{addClass(element,"o_hierarchy_hover");},onElementLeave:({removeClass,element})=>{removeClass(element,"o_hierarchy_hover");},onRowEnter:({addClass,row})=>{addClass(row,"o_hierarchy_hover");},onRowLeave:({removeClass,row})=>{removeClass(row,"o_hierarchy_hover");},});}
this.scrollTarget="none";useBus(this.props.model.bus,"hierarchyScrollTarget",(ev)=>{this.scrollTarget=ev.detail?.scrollTarget||"none";});onPatched(this.onPatched);}
onPatched(){if(this.scrollTarget==="none"){return;}
const row=this.scrollTarget==="bottom"?this.rendererRef.el.querySelector(":scope .o_hierarchy_row:last-child"):this.rendererRef.el.querySelector(`:scope .o_hierarchy_node[data-node-id="${this.scrollTarget}"]`)?.closest(".o_hierarchy_row");this.scrollTarget="none";if(!row){return;}
scrollTo(row,{behavior:"smooth"});}
get canDragAndDropRecord(){return this.draggable&&!this.env.isSmall;}
get draggable(){return this.props.archInfo.draggable;}
get rows(){const rootNodes=this.props.model.root.rootNodes.filter((n)=>!n.hidden);const rows=[{nodes:rootNodes}];const processNode=(node)=>{if(!node.isLeaf){const subNodes=node.nodes.filter((n)=>!n.hidden);rows.push({parentNode:node,nodes:subNodes});for(const subNode of subNodes){processNode(subNode);}}};for(const node of this.props.model.root.rootNodes){processNode(node);}
return rows;}
async nodeDrop({element,row,nextRow,newParentNode}){let parentNodeId,parentResId;if(newParentNode){parentNodeId=newParentNode.dataset.nodeId;}else if(nextRow?.dataset.rowId!==row.dataset.rowId){parentNodeId=nextRow.dataset.parentNodeId;if(!parentNodeId){const nodes=this.rows[nextRow.dataset.rowId].nodes||[];if(nodes){parentNodeId=nodes[0].parentNode?.id;if(!parentNodeId){parentResId=nodes[0].parentResId;if(!nodes.every((node)=>node.parentResId===parentResId)){this.notification.add(_t("Impossible to update the parent node of the dragged node because no parent has been found."),{type:"danger",});return;}}}}}
await this.props.model.updateParentNode(element.dataset.nodeId,{parentResId,parentNodeId});}}
return __exports;});;

/* /web_hierarchy/static/src/hierarchy_view.js */
odoo.define('@web_hierarchy/hierarchy_view',['@web/core/registry','@web_hierarchy/hierarchy_arch_parser','@web_hierarchy/hierarchy_controller','@web_hierarchy/hierarchy_model','@web_hierarchy/hierarchy_renderer'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{HierarchyArchParser}=require("@web_hierarchy/hierarchy_arch_parser");const{HierarchyController}=require("@web_hierarchy/hierarchy_controller");const{HierarchyModel}=require("@web_hierarchy/hierarchy_model");const{HierarchyRenderer}=require("@web_hierarchy/hierarchy_renderer");const hierarchyView=__exports.hierarchyView={type:"hierarchy",ArchParser:HierarchyArchParser,Controller:HierarchyController,Model:HierarchyModel,Renderer:HierarchyRenderer,buttonTemplate:"web_hierarchy.HierarchyButtons",searchMenuTypes:["filter"],props:(genericProps,view)=>{const{ArchParser,Model,Renderer,buttonTemplate:viewButtonTemplate}=view;const{arch,relatedModels,resModel,buttonTemplate}=genericProps;return{...genericProps,archInfo:new ArchParser().parse(arch,relatedModels,resModel),buttonTemplate:buttonTemplate||viewButtonTemplate,Model,Renderer,};}}
registry.category("views").add("hierarchy",hierarchyView);return __exports;});;

/* /hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_card.js */
odoo.define('@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_card',['@web_hierarchy/hierarchy_card'],function(require){'use strict';let __exports={};const{HierarchyCard}=require("@web_hierarchy/hierarchy_card");const HrEmployeeHierarchyCard=__exports.HrEmployeeHierarchyCard=class HrEmployeeHierarchyCard extends HierarchyCard{static template="hr_org_chart.HrEmployeeHierarchyCard";}
return __exports;});;

/* /hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_renderer.js */
odoo.define('@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_renderer',['@mail/views/web/fields/avatar/avatar','@web_hierarchy/hierarchy_renderer','@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_card'],function(require){'use strict';let __exports={};const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{HierarchyRenderer}=require("@web_hierarchy/hierarchy_renderer");const{HrEmployeeHierarchyCard}=require("@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_card");const HrEmployeeHierarchyRenderer=__exports.HrEmployeeHierarchyRenderer=class HrEmployeeHierarchyRenderer extends HierarchyRenderer{static template="hr_org_chart.HrEmployeeHierarchyRenderer";static components={...HierarchyRenderer.components,HierarchyCard:HrEmployeeHierarchyCard,Avatar,};}
return __exports;});;

/* /hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_view.js */
odoo.define('@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_view',['@web/core/registry','@web_hierarchy/hierarchy_view','@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_renderer','@web_hierarchy/hierarchy_controller','@hr/views/hr_action_helper'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{hierarchyView}=require("@web_hierarchy/hierarchy_view");const{HrEmployeeHierarchyRenderer}=require("@hr_org_chart/views/hr_employee_hierarchy/hr_employee_hierarchy_renderer");const{HierarchyController}=require("@web_hierarchy/hierarchy_controller");const{HrActionHelper}=require("@hr/views/hr_action_helper");const HrEmployeeHierarchyController=__exports.HrEmployeeHierarchyController=class HrEmployeeHierarchyController extends HierarchyController{static template="hr_org_chart.HierarchyView";static components={...HierarchyController.components,HrActionHelper};}
const hrEmployeeHierarchyView=__exports.hrEmployeeHierarchyView={...hierarchyView,Controller:HrEmployeeHierarchyController,Renderer:HrEmployeeHierarchyRenderer,};registry.category("views").add("hr_employee_hierarchy",hrEmployeeHierarchyView);return __exports;});;

/* /sale_planning/static/src/views/sale_planning_gantt/sale_planning_gantt_model.js */
odoo.define('@sale_planning/views/sale_planning_gantt/sale_planning_gantt_model',['@planning/views/planning_gantt/planning_gantt_model','@web/core/utils/patch','@web/core/l10n/dates'],function(require){'use strict';let __exports={};const{PlanningGanttModel}=require("@planning/views/planning_gantt/planning_gantt_model");const{patch}=require("@web/core/utils/patch");const{serializeDateTime}=require("@web/core/l10n/dates");const GROUPBY_COMBINATIONS=["sale_line_id","sale_line_id,department_id","sale_line_id,resource_id","sale_line_id,role_id",];patch(PlanningGanttModel.prototype,{async load(searchParams){const groupBy=searchParams.groupBy.slice();const groupBySO=Boolean(searchParams.context.planning_groupby_sale_order);if(groupBySO&&groupBy.length===0){groupBy.push("sale_line_id");}
return super.load({...searchParams,groupBy});},addSpecialKeys(context){const{focusDate,startDate,stopDate,scale}=this.metaData;const{callbacks}=this.env.getCurrentFocusDateCallBackRecorder;const focus_date=serializeDateTime(callbacks.length?callbacks[0]():focusDate);Object.assign(context,{focus_date,default_start_datetime:serializeDateTime(startDate),default_end_datetime:serializeDateTime(stopDate),scale:scale.id,});},_allowCreateEmptyGroups(groupedBy){return super._allowCreateEmptyGroups(...arguments)||groupedBy.includes("sale_line_id");},_allowedEmptyGroups(groupedBy){return super._allowedEmptyGroups(...arguments)||GROUPBY_COMBINATIONS.includes(groupedBy.join(","));},_getRescheduleContext(){const context=super._getRescheduleContext(...arguments);this.addSpecialKeys(context);return context;},async searchShiftsToPlan(planDomain,check_if_exists=true){const domain=planDomain||["|",[dateStartField,"=",false],[dateStopField,"=",false],];const{dateStartField,dateStopField,resModel}=this.metaData;if(check_if_exists){const result=await this.orm.searchCount(resModel,domain,{context:this.searchParams.context,limit:1,});return Boolean(result);}else{const slotIds=await this.orm.search(resModel,domain,{context:this.searchParams.context,});return slotIds;}},});return __exports;});;

/* /sale_planning/static/src/views/sale_planning_gantt/sale_planning_gantt_renderer.js */
odoo.define('@sale_planning/views/sale_planning_gantt/sale_planning_gantt_renderer',['@web/core/l10n/translation','@web/core/domain','@web/core/utils/patch','@planning/views/planning_gantt/planning_gantt_renderer','@web/core/utils/hooks','@web/core/utils/render','@odoo/owl','@web/core/utils/strings'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Domain}=require("@web/core/domain");const{patch}=require("@web/core/utils/patch");const{PlanningGanttRenderer}=require("@planning/views/planning_gantt/planning_gantt_renderer");const{useService}=require("@web/core/utils/hooks");const{renderToMarkup}=require("@web/core/utils/render");const{xml}=require("@odoo/owl");const{escape}=require("@web/core/utils/strings");patch(PlanningGanttRenderer.prototype,{setup(){super.setup(...arguments);this.notification=useService("notification");this.roleIds=[];},getPlanDialogDomain(){let domain=super.getPlanDialogDomain(...arguments);if(this.roleIds.length){domain=Domain.and([domain,[['role_id','in',this.roleIds]]]);}
return Domain.and([domain,[['sale_line_id.state','!=','cancel']],[["sale_line_id","!=",false]]]).toList({});},getSelectCreateDialogProps(){const props=super.getSelectCreateDialogProps(...arguments);this.model.addSpecialKeys(props.context);Object.assign(props.context,{default_start_datetime:props.context.start_datetime,default_end_datetime:props.context.end_datetime,search_default_group_by_resource:false,search_default_group_by_role:false,search_default_role_id:props.context.role_id||false,search_default_project_id:props.context.project_id||false,planning_slots_to_schedule:true,search_default_sale_order_id:props.context.planning_gantt_active_sale_order_id||null,});const template=xml`
            <p class="o_view_nocontent_smiling_face">${escape(_t("No shifts found!"))}</p>
            <p>${escape(
                _t(
                    "Assign your sales orders to the right people based on their roles and availability."
                )
            )}</p>
        `;props.noContentHelp=renderToMarkup(template);props.onCreateEdit=()=>{this.props.create(props.context);};return props;},displayFailedPlanningNotification(message){return this.notification.add(message,{type:"danger"});},openPlanDialogCallback(result){if(!result){this.displayFailedPlanningNotification(_t("This resource is not available for this shift during the selected period."));}},async onPlan(rowId,columnStart,columnStop){const{start,stop}=this.getColumnStartStop(columnStart,columnStop);const schedule=this.props.model.getDialogContext({rowId,start,stop});if("sale_line_id"in schedule){if(!schedule.sale_line_id){this.displayFailedPlanningNotification(_t("There are no sales order items to plan."));}else{const slotIds=await this.props.model.searchShiftsToPlan([["sale_line_id","=",schedule.sale_line_id],["start_datetime","=",false],["end_datetime","=",false],],false);if(slotIds.length){await this.props.model.reschedule(slotIds,schedule,false);}else{this.displayFailedPlanningNotification(_t("There are no hours left to plan, or there are no resources available at the time."));}}
return;}
const currentRow=this.rows.find((row)=>row.id===rowId);this.roleIds=(currentRow.progressBar&&currentRow.progressBar.role_ids)||[];const existsShiftToPlan=await this.props.model.searchShiftsToPlan(this.getPlanDialogDomain());if(this.model.useSampleModel){rowId=false;}
if(!existsShiftToPlan){return this.onCreate(rowId,columnStart,columnStop);}
super.onPlan(rowId,columnStart,columnStop);},});return __exports;});;

/* /project_forecast/static/src/views/forecast_gantt_model.js */
odoo.define('@project_forecast/views/forecast_gantt_model',['@web/core/registry','@planning/views/planning_gantt/planning_gantt_model','@planning/views/planning_gantt/planning_gantt_view'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry")
const{PlanningGanttModel}=require("@planning/views/planning_gantt/planning_gantt_model");const{PlanningGanttView}=require("@planning/views/planning_gantt/planning_gantt_view");const viewRegistry=registry.category("views");class ForecastGanttModel extends PlanningGanttModel{load(searchParams){const groupBy=searchParams.groupBy.slice();if(searchParams.context.planning_groupby_project&&!groupBy.length){groupBy.unshift("project_id");}
return super.load({...searchParams,groupBy});}}
viewRegistry.add("forecast_gantt",{...PlanningGanttView,Model:ForecastGanttModel,});return __exports;});;

/* /web_map/static/src/map_view/map_arch_parser.js */
odoo.define('@web_map/map_view/map_arch_parser',['@web/core/utils/arrays','@web/core/utils/strings','@web/core/utils/xml'],function(require){'use strict';let __exports={};const{unique}=require("@web/core/utils/arrays");const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const MapArchParser=__exports.MapArchParser=class MapArchParser{parse(arch){const archInfo={fieldNames:[],fieldNamesMarkerPopup:[],};visitXML(arch,(node)=>{switch(node.tagName){case"map":this.visitMap(node,archInfo);break;case"field":this.visitField(node,archInfo);break;}});archInfo.fieldNames=unique(archInfo.fieldNames);archInfo.fieldNamesMarkerPopup=unique(archInfo.fieldNamesMarkerPopup);return archInfo;}
visitMap(node,archInfo){archInfo.resPartnerField=node.getAttribute("res_partner");archInfo.fieldNames.push(archInfo.resPartnerField);if(node.hasAttribute("limit")){archInfo.limit=parseInt(node.getAttribute("limit"),10);}
if(node.hasAttribute("panel_title")){archInfo.panelTitle=node.getAttribute("panel_title");}
if(node.hasAttribute("routing")){archInfo.routing=exprToBoolean(node.getAttribute("routing"));}
if(node.hasAttribute("hide_title")){archInfo.hideTitle=exprToBoolean(node.getAttribute("hide_title"));}
if(node.hasAttribute("hide_address")){archInfo.hideAddress=exprToBoolean(node.getAttribute("hide_address"));}
if(node.hasAttribute("hide_name")){archInfo.hideName=exprToBoolean(node.getAttribute("hide_name"));}
if(!archInfo.hideName){archInfo.fieldNames.push("display_name");}
if(node.hasAttribute("default_order")){archInfo.defaultOrder={name:node.getAttribute("default_order"),asc:true,};}
if(node.hasAttribute("allow_resequence")){archInfo.allowResequence=exprToBoolean(node.getAttribute("allow_resequence"));}}
visitField(node,params){params.fieldNames.push(node.getAttribute("name"));params.fieldNamesMarkerPopup.push({fieldName:node.getAttribute("name"),string:node.getAttribute("string"),});}}
return __exports;});;

/* /web_map/static/src/map_view/map_controller.js */
odoo.define('@web_map/map_view/map_controller',['@web/core/l10n/translation','@web/core/assets','@web/core/utils/hooks','@web/model/model','@web/views/standard_view_props','@web/search/action_hook','@web/search/layout','@web/search/pager_hook','@web/search/search_bar/search_bar','@web/search/search_bar/search_bar_toggler','@web/search/cog_menu/cog_menu','@odoo/owl'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{loadJS,loadCSS}=require("@web/core/assets");const{useService}=require("@web/core/utils/hooks");const{useModelWithSampleData}=require("@web/model/model");const{standardViewProps}=require("@web/views/standard_view_props");const{useSetupAction}=require("@web/search/action_hook");const{Layout}=require("@web/search/layout");const{usePager}=require("@web/search/pager_hook");const{SearchBar}=require("@web/search/search_bar/search_bar");const{useSearchBarToggler}=require("@web/search/search_bar/search_bar_toggler");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Component,onWillUnmount,onWillStart}=require("@odoo/owl");const MapController=__exports.MapController=class MapController extends Component{static template="web_map.MapView";static components={Layout,SearchBar,CogMenu,};static props={...standardViewProps,Model:Function,modelParams:Object,Renderer:Function,buttonTemplate:String,};setup(){this.action=useService("action");const Model=this.props.Model;const model=useModelWithSampleData(Model,this.props.modelParams);this.model=model;onWillUnmount(()=>{this.model.stopFetchingCoordinates();});useSetupAction({getLocalState:()=>{return this.model.metaData;},});onWillStart(()=>Promise.all([loadJS("/web_map/static/lib/leaflet/leaflet.js"),loadCSS("/web_map/static/lib/leaflet/leaflet.css"),]));usePager(()=>{return{offset:this.model.metaData.offset,limit:this.model.metaData.limit,total:this.model.data.count,onUpdate:({offset,limit})=>this.model.load({offset,limit}),};});this.searchBarToggler=useSearchBarToggler();}
get rendererProps(){return{model:this.model,onMarkerClick:this.openRecords.bind(this),};}
openRecords(ids){if(ids.length>1){this.action.doAction({type:"ir.actions.act_window",name:this.env.config.getDisplayName()||_t("Untitled"),views:[[false,"list"],[false,"form"],],res_model:this.props.resModel,domain:[["id","in",ids]],});}else{this.action.switchView("form",{resId:ids[0]});}}}
return __exports;});;

/* /web_map/static/src/map_view/map_model.js */
odoo.define('@web_map/map_view/map_model',['@web/core/l10n/translation','@web/model/model','@web/session','@web/model/relational_model/utils','@web/core/browser/browser','@web/core/l10n/dates','@web/core/utils/concurrency'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{Model}=require("@web/model/model");const{session}=require("@web/session");const{resequence}=require("@web/model/relational_model/utils");const{browser}=require("@web/core/browser/browser");const{formatDateTime,parseDate,parseDateTime}=require("@web/core/l10n/dates");const{KeepLast}=require("@web/core/utils/concurrency");const DATE_GROUP_FORMATS={year:"yyyy",quarter:"'Q'q yyyy",month:"MMMM yyyy",week:"'W'WW yyyy",day:"dd MMM yyyy",};const MapModel=__exports.MapModel=class MapModel extends Model{setup(params,{notification,http}){this.notification=notification;this.http=http;this.metaData={...params,mapBoxToken:session.map_box_token||"",};this.data={count:0,fetchingCoordinates:false,groupByKey:false,isGrouped:false,numberOfLocatedRecords:0,partners:{},partnerToCache:[],recordGroups:[],records:[],routes:[],routingError:null,shouldUpdatePosition:true,useMapBoxAPI:!!this.metaData.mapBoxToken,};this.coordinateFetchingTimeoutHandle=undefined;this.shouldFetchCoordinates=false;this.keepLast=new KeepLast();}
async load(params){if(this.coordinateFetchingTimeoutHandle!==undefined){this.stopFetchingCoordinates();}
const metaData={...this.metaData,...params,};metaData.groupBy=(metaData.groupBy||[]).filter((groupBy)=>{const[fieldName]=groupBy.split(".");const field=metaData.fields[fieldName];return field?.type!=="properties";});this.data=await this._fetchData(metaData);this.metaData=metaData;this.notify();}
stopFetchingCoordinates(){browser.clearTimeout(this.coordinateFetchingTimeoutHandle);this.coordinateFetchingTimeoutHandle=undefined;this.shouldFetchCoordinates=false;}
get canResequence(){return(this.metaData.defaultOrder&&!this.metaData.fields[this.metaData.defaultOrder.name].readonly&&this.metaData.fields[this.metaData.defaultOrder.name].type==="integer"&&this.metaData.allowResequence&&!this.metaData.groupBy?.length);}
async resequence(movedId,targetId){const fieldName=this.metaData.defaultOrder.name;const asc=this.metaData.defaultOrder.asc;const resequenceProm=resequence({records:this.data.records,resModel:this.metaData.resModel,movedId,targetId,fieldName,asc,context:this.metaData.context,orm:this.orm,});this.notify();const resequencedRecords=await resequenceProm;if(resequencedRecords){for(const resequencedRecord of resequencedRecords){const record=this.data.records.find((r)=>r.id===resequencedRecord.id);record[fieldName]=resequencedRecord[fieldName];}
this.notify();await this._updatePartnerCoordinate(this.metaData,this.data);}}
_addPartnerToRecord(metaData,data){for(const record of data.records){if(metaData.resModel==="res.partner"&&metaData.resPartnerField==="id"){record.partner=data.partners[record.id];}else{record.partner=data.partners[record[metaData.resPartnerField].id];}
data.numberOfLocatedRecords++;}}
_checkCoordinatesValidity(partner){if(partner.partner_latitude&&partner.partner_longitude&&partner.partner_latitude>=-90&&partner.partner_latitude<=90&&partner.partner_longitude>=-180&&partner.partner_longitude<=180){return true;}
return false;}
async _fetchData(metaData){const data={count:0,fetchingCoordinates:false,groupByKey:metaData.groupBy.length?metaData.groupBy[0]:false,isGrouped:metaData.groupBy.length>0,numberOfLocatedRecords:0,partners:{},partnerToCache:[],recordGroups:[],records:[],routes:[],routingError:null,shouldUpdatePosition:true,useMapBoxAPI:!!metaData.mapBoxToken,};if(!metaData.resPartnerField){data.recordGroups=[];data.records=[];data.routes=[];return this.keepLast.add(Promise.resolve(data));}
const results=await this.keepLast.add(this._fetchRecordData(metaData,data));const datetimeFields=metaData.fieldNames.filter((name)=>metaData.fields[name].type=="datetime");for(const record of results.records){for(const field of datetimeFields){if(record[field]){const dateUTC=luxon.DateTime.fromFormat(record[field],"yyyy-MM-dd HH:mm:ss",{zone:"UTC"});record[field]=formatDateTime(dateUTC,{format:"yyyy-MM-dd HH:mm:ss"});}}}
data.records=results.records;data.count=results.length;if(data.isGrouped){data.recordGroups=await this._getRecordGroups(metaData,data);}else{data.recordGroups=[];}
if(metaData.resModel==="res.partner"&&metaData.resPartnerField==="id"){for(const record of data.records){if(!data.partners[record.id]){data.partners[record.id]={...record};}}}else{for(const record of data.records){const partner=record[metaData.resPartnerField];if(partner&&!data.partners[partner.id]){data.partners[partner.id]=partner;}}}
this._addPartnerToRecord(metaData,data);await this._updatePartnerCoordinate(metaData,data);return data;}
_getRecordSpecification(metaData,data){const fieldNames=data.groupByKey?metaData.fieldNames.concat(data.groupByKey.split(":")[0]):metaData.fieldNames;const specification={};const fieldsToAdd={contact_address_complete:{},partner_latitude:{},partner_longitude:{},};for(const fieldName of fieldNames){specification[fieldName]={};if(metaData.resPartnerField==="id"){Object.assign(specification,fieldsToAdd);}else if(["many2one","one2many","many2many"].includes(metaData.fields[fieldName].type)){specification[fieldName].fields={display_name:{}};if(fieldName===metaData.resPartnerField){Object.assign(specification[fieldName].fields,fieldsToAdd);}}}
return specification;}
_fetchRecordData(metaData,data){const specification=this._getRecordSpecification(metaData,data);const orderBy=[];if(metaData.defaultOrder){orderBy.push(metaData.defaultOrder.name);if(metaData.defaultOrder.asc){orderBy.push("ASC");}}
return this.orm.webSearchRead(metaData.resModel,metaData.domain,{specification,limit:metaData.limit,offset:metaData.offset,order:orderBy.join(" "),context:metaData.context,});}
_fetchCoordinatesFromAddressMB(metaData,data,record){const address=encodeURIComponent(record.contact_address_complete);const token=metaData.mapBoxToken;const encodedUrl=`https://api.mapbox.com/geocoding/v5/mapbox.places/${address}.json?access_token=${token}&cachebuster=1552314159970&autocomplete=true`;return this.http.get(encodedUrl);}
_fetchCoordinatesFromAddressOSM(metaData,data,record){const address=encodeURIComponent(record.contact_address_complete.replace("/"," "));const encodedUrl=`https://nominatim.openstreetmap.org/search?q=${address}&format=jsonv2`;return this.http.get(encodedUrl);}
_fetchRoute(metaData,data){const coordinatesParam=data.records.filter((record)=>record.partner.partner_latitude&&record.partner.partner_longitude).map(({partner})=>`${partner.partner_longitude},${partner.partner_latitude}`);const address=encodeURIComponent(coordinatesParam.join(";"));const token=metaData.mapBoxToken;const encodedUrl=`https://api.mapbox.com/directions/v5/mapbox/driving/${address}?access_token=${token}&steps=true&geometries=geojson`;return this.http.get(encodedUrl);}
_getErrorMessage(message){const ERROR_MESSAGES={"Too many coordinates; maximum number of coordinates is 25":_t("Too many routing points (maximum 25)"),"Route exceeds maximum distance limitation":_t("Some routing points are too far apart"),"Too Many Requests":_t("Too many requests, try again in a few minutes"),};return ERROR_MESSAGES[message];}
_getEmptyGroupLabel(fieldName){return _t("None");}
async _getRecordGroups(metaData,data){const[fieldName,subGroup]=data.groupByKey.split(":");const fieldType=metaData.fields[fieldName].type;const groups={};function addToGroup(id,name,record){if(!groups[id]){groups[id]={name,records:[],};}
groups[id].records.push(record);}
for(const record of data.records){const value=record[fieldName];let id,name;if(["one2many","many2many"].includes(fieldType)){if(value.length){for(const r of value){addToGroup(r.id,r.display_name,record);}}else{id=name=this._getEmptyGroupLabel(fieldName);addToGroup(id,name,record);}}else{if(["date","datetime"].includes(fieldType)&&value){const date=fieldType==="date"?parseDate(value):parseDateTime(value);id=name=date.toFormat(DATE_GROUP_FORMATS[subGroup]);}else if(fieldType==="boolean"){id=name=value?_t("Yes"):_t("No");}else if(fieldType==="selection"){const selected=metaData.fields[fieldName].selection.find((o)=>o[0]===value);id=name=selected?selected[1]:value;}else if(fieldType==="many2one"&&value){id=value.id;name=value.display_name;}else{id=value;name=value;}
if(!id&&!name){id=name=this._getEmptyGroupLabel(fieldName);}
addToGroup(id,name,record);}}
return groups;}
_maxBoxAPI(metaData,data){const promises=[];for(const partner of Object.values(data.partners)){if(partner.contact_address_complete&&(!partner.partner_latitude||!partner.partner_longitude)){promises.push(this._fetchCoordinatesFromAddressMB(metaData,data,partner).then((coordinates)=>{if(coordinates.features.length){partner.partner_longitude=parseFloat(coordinates.features[0].geometry.coordinates[0]);partner.partner_latitude=parseFloat(coordinates.features[0].geometry.coordinates[1]);data.partnerToCache.push(partner);}}));}else if(!this._checkCoordinatesValidity(partner)){partner.partner_latitude=undefined;partner.partner_longitude=undefined;}}
return Promise.all(promises).then(()=>{data.routes=[];if(data.numberOfLocatedRecords>1&&metaData.routing&&!data.groupByKey){return this._fetchRoute(metaData,data).then((routeResult)=>{if(routeResult.routes){data.routes=routeResult.routes;}else{data.routingError=this._getErrorMessage(routeResult.message);}});}else{return Promise.resolve();}});}
_mapBoxErrorHandling(metaData,data,err){switch(err.status){case 401:this.notification.add(_t("The view has switched to another provider but functionalities will be limited"),{title:_t("Token invalid"),type:"danger",});break;case 403:this.notification.add(_t("The view has switched to another provider but functionalities will be limited"),{title:_t("Unauthorized connection"),type:"danger",});break;case 422:case 429:data.routingError=this._getErrorMessage(err.responseJSON.message);break;case 500:this.notification.add(_t("The view has switched to another provider but functionalities will be limited"),{title:_t("MapBox servers unreachable"),type:"danger",});}}
_notifyFetchedCoordinate(metaData,data){this._writeCoordinatesUsers(metaData,data);data.shouldUpdatePosition=false;this.notify();}
_openStreetMapAPI(metaData,data){this._openStreetMapAPIAsync(metaData,data);return Promise.resolve();}
_openStreetMapAPIAsync(metaData,data){const addressPartnerMap=new Map();for(const partner of Object.values(data.partners)){if(partner.contact_address_complete&&(!partner.partner_latitude||!partner.partner_longitude)){if(!addressPartnerMap.has(partner.contact_address_complete)){addressPartnerMap.set(partner.contact_address_complete,[]);}
addressPartnerMap.get(partner.contact_address_complete).push(partner);partner.fetchingCoordinate=true;}else if(!this._checkCoordinatesValidity(partner)){partner.partner_latitude=undefined;partner.partner_longitude=undefined;}}
data.fetchingCoordinates=addressPartnerMap.size>0;this.shouldFetchCoordinates=true;const fetch=async()=>{const partnersList=Array.from(addressPartnerMap.values());for(let i=0;i<partnersList.length;i++){await new Promise((resolve)=>{this.coordinateFetchingTimeoutHandle=browser.setTimeout(resolve,this.constructor.COORDINATE_FETCH_DELAY);});if(!this.shouldFetchCoordinates){return;}
const partners=partnersList[i];try{const coordinates=await this._fetchCoordinatesFromAddressOSM(metaData,data,partners[0]);if(!this.shouldFetchCoordinates){return;}
if(coordinates.length){for(const partner of partners){partner.partner_longitude=parseFloat(coordinates[0].lon);partner.partner_latitude=parseFloat(coordinates[0].lat);data.partnerToCache.push(partner);}}
for(const partner of partners){partner.fetchingCoordinate=false;}
data.fetchingCoordinates=i<partnersList.length-1;this._notifyFetchedCoordinate(metaData,data);}catch{for(const partner of Object.values(data.partners)){partner.fetchingCoordinate=false;}
data.fetchingCoordinates=false;this.shouldFetchCoordinates=false;this.notification.add(_t("OpenStreetMap's request limit exceeded, try again later."),{type:"danger"});this.notify();}}};return fetch();}
async _updatePartnerCoordinate(metaData,data){if(data.useMapBoxAPI){return this.keepLast.add(this._maxBoxAPI(metaData,data)).then(()=>{this._writeCoordinatesUsers(metaData,data);}).catch((err)=>{this._mapBoxErrorHandling(metaData,data,err);data.useMapBoxAPI=false;return this._openStreetMapAPI(metaData,data);});}else{return this._openStreetMapAPI(metaData,data).then(()=>{this._writeCoordinatesUsers(metaData,data);});}}
async _writeCoordinatesUsers(metaData,data){const partners=data.partnerToCache;data.partnerToCache=[];if(partners.length){await this.orm.call("res.partner","update_latitude_longitude",[partners],{context:metaData.context,});}}}
MapModel.services=["notification","http"];MapModel.COORDINATE_FETCH_DELAY=1000;return __exports;});;

/* /web_map/static/src/map_view/map_renderer.js */
odoo.define('@web_map/map_view/map_renderer',['@web/core/l10n/translation','@web/core/utils/render','@web/core/utils/concurrency','@odoo/owl','@web/core/utils/sortable_owl'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{renderToString}=require("@web/core/utils/render");const{delay}=require("@web/core/utils/concurrency");const{Component,onWillUnmount,onWillUpdateProps,useEffect,useRef,useState,}=require("@odoo/owl");const{useSortable}=require("@web/core/utils/sortable_owl");const apiTilesRouteWithToken="https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}";const apiTilesRouteWithoutToken="https://a.tile.openstreetmap.org/{z}/{x}/{y}.png";const colors=["#F06050","#6CC1ED","#F7CD1F","#814968","#30C381","#D6145F","#475577","#F4A460","#EB7E7F","#2C8397",];const mapTileAttribution=`
    © <a href="https://www.mapbox.com/about/maps/">Mapbox</a>
    © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>
    <strong>
        <a href="https://www.mapbox.com/map-feedback/" target="_blank">
            Improve this map
        </a>
    </strong>`;const MapRenderer=__exports.MapRenderer=class MapRenderer extends Component{static template="web_map.MapRenderer";static props={model:Object,onMarkerClick:Function,};setup(){this.leafletMap=null;this.markers=[];this.polylines=[];this.mapContainerRef=useRef("mapContainer");this.state=useState({closedGroupIds:[],expendedPinList:false,});this.nextId=1;useEffect(()=>{this.leafletMap=L.map(this.mapContainerRef.el,{maxBounds:[L.latLng(180,-180),L.latLng(-180,180)],});this.leafletMap.attributionControl.setPrefix('<a href="https://leafletjs.com" title="A JavaScript library for interactive maps">Leaflet</a>');L.tileLayer(this.apiTilesRoute,{attribution:mapTileAttribution,tileSize:512,zoomOffset:-1,minZoom:2,maxZoom:19,id:"mapbox/streets-v11",accessToken:this.props.model.metaData.mapBoxToken,}).addTo(this.leafletMap);},()=>[]);useEffect(()=>{this.updateMap();});this.pinListRef=useRef("pinList");useSortable({enable:()=>this.props.model.canResequence,ref:this.pinListRef,elements:".o-map-renderer--pin-located",handle:".o_row_handle",onDrop:async(params)=>{const rowId=parseInt(params.element.dataset.id);const previousRowId=parseInt(params.previous?.dataset?.id)||null;await this.props.model.resequence(rowId,previousRowId);},});onWillUpdateProps(this.onWillUpdateProps);onWillUnmount(this.onWillUnmount);}
async onWillUpdateProps(nextProps){if(this.props.model.data.groupByKey!==nextProps.model.data.groupByKey){this.state.closedGroupIds=[];}}
onWillUnmount(){this.removeMarkers();this.removeRoutes();if(this.leafletMap){this.leafletMap.remove();}}
get apiTilesRoute(){return this.props.model.data.useMapBoxAPI?apiTilesRouteWithToken:apiTilesRouteWithoutToken;}
addMarkers(){this.removeMarkers();const markersInfo={};let records=this.props.model.data.records;if(this.props.model.data.isGrouped){records=Object.entries(this.props.model.data.recordGroups).filter(([key])=>!this.state.closedGroupIds.includes(key)).flatMap(([groupId,value])=>value.records.map((elem)=>({...elem,groupId})));}
const pinInSamePlace={};for(const record of records){const partner=record.partner;if(partner&&partner.partner_latitude&&partner.partner_longitude){const lat_long=`${partner.partner_latitude}-${partner.partner_longitude}`;const group=this.props.model.data.recordGroups?`-${record.groupId}`:"";const key=`${lat_long}${group}`;if(key in markersInfo){markersInfo[key].record=record;markersInfo[key].ids.push(record.id);}else{pinInSamePlace[lat_long]=++pinInSamePlace[lat_long]||0;markersInfo[key]={record:record,ids:[record.id],pinInSamePlace:pinInSamePlace[lat_long],};}}}
for(const markerInfo of Object.values(markersInfo)){const params={count:markerInfo.ids.length,isMulti:markerInfo.ids.length>1,number:this.props.model.data.records.indexOf(markerInfo.record)+1,numbering:this.props.model.metaData.numbering,};if(this.props.model.data.isGrouped){const groupId=markerInfo.record.groupId;params.color=this.getGroupColor(groupId);params.number=this.props.model.data.recordGroups[groupId].records.findIndex((record)=>{return record.id===markerInfo.record.id;})+1;}
const iconInfo={className:"o-map-renderer--marker",html:renderToString("web_map.marker",params),};const offset=markerInfo.pinInSamePlace*0.000025;const marker=L.marker([markerInfo.record.partner.partner_latitude+offset,markerInfo.record.partner.partner_longitude-offset,],{icon:L.divIcon(iconInfo)});marker.addTo(this.leafletMap);marker.on("click",()=>{this.createMarkerPopup(markerInfo,offset);});this.markers.push(marker);}}
addRoutes(){this.removeRoutes();if(!this.props.model.data.useMapBoxAPI||!this.props.model.data.routes.length){return;}
for(const leg of this.props.model.data.routes[0].legs){const latLngs=[];for(const step of leg.steps){for(const coordinate of step.geometry.coordinates){latLngs.push(L.latLng(coordinate[1],coordinate[0]));}}
const polyline=L.polyline(latLngs,{color:"blue",weight:5,opacity:0.3,}).addTo(this.leafletMap);const polylines=this.polylines;polyline.on("click",function(){for(const polyline of polylines){polyline.setStyle({color:"blue",opacity:0.3});}
this.setStyle({color:"darkblue",opacity:1.0});});this.polylines.push(polyline);}}
createMarkerPopup(markerInfo,latLongOffset=0){const popupFields=this.getMarkerPopupFields(markerInfo);const partner=markerInfo.record.partner;const encodedAddress=encodeURIComponent(partner.contact_address_complete);const popupHtml=renderToString("web_map.markerPopup",{fields:popupFields,hasFormView:this.props.model.metaData.hasFormView,url:`https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`,});const popup=L.popup({offset:[0,-30]}).setLatLng([partner.partner_latitude+latLongOffset,partner.partner_longitude-latLongOffset,]).setContent(popupHtml).openOn(this.leafletMap);const openBtn=popup.getElement().querySelector("button.o-map-renderer--popup-buttons-open");if(openBtn){openBtn.onclick=()=>{this.props.onMarkerClick(markerInfo.ids);};}
return popup;}
getGroupColor(groupId){const index=Object.keys(this.props.model.data.recordGroups).indexOf(groupId);return colors[index%colors.length];}
getLatLng(){const tabLatLng=[];for(const record of this.props.model.data.records){const partner=record.partner;if(partner&&partner.partner_latitude&&partner.partner_longitude){tabLatLng.push(L.latLng(partner.partner_latitude,partner.partner_longitude));}}
if(!tabLatLng.length){return false;}
return L.latLngBounds(tabLatLng);}
getMarkerPopupFields(markerInfo){const record=markerInfo.record;const fieldsView=[];if(markerInfo.ids.length>1){if(!this.props.model.metaData.hideAddress){fieldsView.push({id:this.nextId++,value:record.partner.contact_address_complete,string:_t("Address"),});}
return fieldsView;}
if(!this.props.model.metaData.hideName){fieldsView.push({id:this.nextId++,value:record.display_name,string:_t("Name"),});}
if(!this.props.model.metaData.hideAddress){fieldsView.push({id:this.nextId++,value:record.partner.contact_address_complete,string:_t("Address"),});}
const fields=this.props.model.metaData.fields;for(const field of this.props.model.metaData.fieldNamesMarkerPopup){if(record[field.fieldName]){let value=record[field.fieldName];if(fields[field.fieldName].type==="many2one"){value=record[field.fieldName].display_name;}else if(["one2many","many2many"].includes(fields[field.fieldName].type)){value=record[field.fieldName]?record[field.fieldName].map((r)=>r.display_name).join(", "):"";}
fieldsView.push({id:this.nextId++,value,string:field.string,});}}
return fieldsView;}
get googleMapUrl(){let url="https://www.google.com/maps/dir/?api=1";if(this.props.model.data.records.length){const allCoordinates=this.props.model.data.records.filter(({partner})=>partner&&partner.partner_latitude&&partner.partner_longitude);const uniqueCoordinates=allCoordinates.reduce((coords,{partner})=>{const coord=partner.partner_latitude+","+partner.partner_longitude;if(!coords.includes(coord)){coords.push(coord);}
return coords;},[]);if(uniqueCoordinates.length&&this.props.model.metaData.routing){url+=`&destination=${uniqueCoordinates.pop()}`;}
if(uniqueCoordinates.length){url+=`&waypoints=${uniqueCoordinates.join("|")}`;}}
return url;}
removeMarkers(){for(const marker of this.markers){marker.off("click");this.leafletMap.removeLayer(marker);}
this.markers=[];}
removeRoutes(){for(const polyline of this.polylines){polyline.off("click");this.leafletMap.removeLayer(polyline);}
this.polylines=[];}
updateMap(){if(this.props.model.data.shouldUpdatePosition){const initialCoord=this.getLatLng();if(initialCoord){this.leafletMap.flyToBounds(initialCoord,{animate:false});}else{this.leafletMap.fitWorld();}
this.leafletMap.closePopup();}
this.addMarkers();this.addRoutes();}
async centerAndOpenPin(record){this.state.expendedPinList=false;await delay(0);const popup=this.createMarkerPopup({record:record,ids:[record.id],});const px=this.leafletMap.project([record.partner.partner_latitude,record.partner.partner_longitude,]);const popupHeight=popup.getElement().offsetHeight;px.y-=popupHeight/2;const latlng=this.leafletMap.unproject(px);this.leafletMap.panTo(latlng,{animate:true});}
toggleGroup(id){if(this.state.closedGroupIds.includes(id)){const index=this.state.closedGroupIds.indexOf(id);this.state.closedGroupIds.splice(index,1);}else{this.state.closedGroupIds.push(id);}}
togglePinList(){this.state.expendedPinList=!this.state.expendedPinList;}
get expendedPinList(){return this.env.isSmall?this.state.expendedPinList:false;}
get canDisplayPinList(){return!this.env.isSmall||this.expendedPinList;}}
return __exports;});;

/* /web_map/static/src/map_view/map_view.js */
odoo.define('@web_map/map_view/map_view',['@web/core/l10n/translation','@web/core/registry','@web_map/map_view/map_arch_parser','@web_map/map_view/map_model','@web_map/map_view/map_controller','@web_map/map_view/map_renderer'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{registry}=require("@web/core/registry");const{MapArchParser}=require("@web_map/map_view/map_arch_parser");const{MapModel}=require("@web_map/map_view/map_model");const{MapController}=require("@web_map/map_view/map_controller");const{MapRenderer}=require("@web_map/map_view/map_renderer");const mapView=__exports.mapView={type:"map",Controller:MapController,Renderer:MapRenderer,Model:MapModel,ArchParser:MapArchParser,buttonTemplate:"web_map.MapView.Buttons",props:(genericProps,view,config)=>{let modelParams=genericProps.state;if(!modelParams){const{arch,resModel,fields,context}=genericProps;const parser=new view.ArchParser();const archInfo=parser.parse(arch);const views=config.views||[];modelParams={allowResequence:archInfo.allowResequence||false,context:context,defaultOrder:archInfo.defaultOrder,fieldNames:archInfo.fieldNames,fieldNamesMarkerPopup:archInfo.fieldNamesMarkerPopup,fields:fields,hasFormView:views.some((view)=>view[1]==="form"),hideAddress:archInfo.hideAddress||false,hideName:archInfo.hideName||false,hideTitle:archInfo.hideTitle||false,limit:archInfo.limit||80,numbering:archInfo.routing||false,offset:0,panelTitle:archInfo.panelTitle||config.getDisplayName()||_t("Items"),resModel:resModel,resPartnerField:archInfo.resPartnerField,routing:archInfo.routing||false,};}
return{...genericProps,Model:view.Model,modelParams,Renderer:view.Renderer,buttonTemplate:view.buttonTemplate,};},};registry.category("views").add("map",mapView);return __exports;});;

/* /project_enterprise/static/src/views/project_task_map/project_task_map_model.js */
odoo.define('@project_enterprise/views/project_task_map/project_task_map_model',['@web/core/l10n/translation','@web_map/map_view/map_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{MapModel}=require("@web_map/map_view/map_model");const ProjectTaskMapModel=__exports.ProjectTaskMapModel=class ProjectTaskMapModel extends MapModel{_getEmptyGroupLabel(fieldName){if(fieldName==="project_id"){return _t("Private");}else if(fieldName==="user_ids"){return _t("Unassigned");}else{return super._getEmptyGroupLabel(fieldName);}}}
return __exports;});;

/* /project_enterprise/static/src/views/project_task_map/project_task_map_renderer.js */
odoo.define('@project_enterprise/views/project_task_map/project_task_map_renderer',['@web_map/map_view/map_renderer'],function(require){'use strict';let __exports={};const{MapRenderer}=require("@web_map/map_view/map_renderer");const ProjectTaskMapRenderer=__exports.ProjectTaskMapRenderer=class ProjectTaskMapRenderer extends MapRenderer{static template="project_enterprise.ProjectTaskMapRenderer";}
return __exports;});;

/* /project_enterprise/static/src/views/project_task_map/project_task_map_view.js */
odoo.define('@project_enterprise/views/project_task_map/project_task_map_view',['@web/core/registry','@web_map/map_view/map_view','@project_enterprise/views/project_task_map/project_task_map_model','@project_enterprise/views/project_task_map/project_task_map_renderer','@project_enterprise/views/highlight_project_task_search_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{mapView}=require("@web_map/map_view/map_view");const{ProjectTaskMapModel}=require("@project_enterprise/views/project_task_map/project_task_map_model");const{ProjectTaskMapRenderer}=require("@project_enterprise/views/project_task_map/project_task_map_renderer");const{HighlightProjectTaskSearchModel}=require("@project_enterprise/views/highlight_project_task_search_model");const projectTaskMapView=__exports.projectTaskMapView={...mapView,Model:ProjectTaskMapModel,Renderer:ProjectTaskMapRenderer,SearchModel:HighlightProjectTaskSearchModel,};registry.category("views").add("project_task_map",projectTaskMapView);return __exports;});;

/* /project_enterprise/static/src/views/project_task_graph/project_task_graph_view.js */
odoo.define('@project_enterprise/views/project_task_graph/project_task_graph_view',['@web/core/registry','@project/views/project_task_graph/project_task_graph_view','@project_enterprise/views/highlight_project_task_search_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{projectTaskGraphView}=require("@project/views/project_task_graph/project_task_graph_view");const{HighlightProjectTaskSearchModel}=require("@project_enterprise/views/highlight_project_task_search_model");registry.category("views").add("project_enterprise_task_graph",{...projectTaskGraphView,SearchModel:HighlightProjectTaskSearchModel,});return __exports;});;

/* /project_enterprise/static/src/views/project_task_pivot/project_task_pivot_view.js */
odoo.define('@project_enterprise/views/project_task_pivot/project_task_pivot_view',['@web/core/registry','@project/views/project_task_pivot/project_pivot_view','@project_enterprise/views/highlight_project_task_search_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{projectPivotView}=require("@project/views/project_task_pivot/project_pivot_view");const{HighlightProjectTaskSearchModel}=require("@project_enterprise/views/highlight_project_task_search_model");registry.category("views").add("project_enterprise_task_pivot",{...projectPivotView,SearchModel:HighlightProjectTaskSearchModel,});return __exports;});;

/* /project_enterprise/static/src/views/project_task_activity/project_task_activity_view.js */
odoo.define('@project_enterprise/views/project_task_activity/project_task_activity_view',['@web/core/registry','@mail/views/web/activity/activity_view','@project_enterprise/views/highlight_project_task_search_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{activityView}=require("@mail/views/web/activity/activity_view");const{HighlightProjectTaskSearchModel}=require("@project_enterprise/views/highlight_project_task_search_model");registry.category("views").add("project_enterprise_activity",{...activityView,SearchModel:HighlightProjectTaskSearchModel,});return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/milestones_popover.js */
odoo.define('@project_enterprise/views/task_gantt/milestones_popover',['@odoo/owl','@web/core/l10n/dates'],function(require){'use strict';let __exports={};const{Component}=require("@odoo/owl");const{formatDate}=require("@web/core/l10n/dates");const MilestonesPopover=__exports.MilestonesPopover=class MilestonesPopover extends Component{static template="project_enterprise.MilestonesPopover";static props=["close","displayMilestoneDates","displayProjectName","projects"];getDeadline(milestone){if(!milestone.deadline){return;}
return formatDate(milestone.deadline);}}
return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/task_gantt_arch_parser.js */
odoo.define('@project_enterprise/views/task_gantt/task_gantt_arch_parser',['@web_gantt/gantt_arch_parser'],function(require){'use strict';let __exports={};const{GanttArchParser}=require("@web_gantt/gantt_arch_parser");const TaskGanttArchParser=__exports.TaskGanttArchParser=class TaskGanttArchParser extends GanttArchParser{parse(){const archInfo=super.parse(...arguments);const decorationFields=new Set([...archInfo.decorationFields,"project_id"]);if(archInfo.dependencyEnabled){decorationFields.add("allow_task_dependencies");decorationFields.add("display_warning_dependency_in_gantt");}
return{...archInfo,decorationFields:[...decorationFields],};}}
return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/task_gantt_controller.js */
odoo.define('@project_enterprise/views/task_gantt/task_gantt_controller',['@web_gantt/gantt_controller'],function(require){'use strict';let __exports={};const{GanttController}=require("@web_gantt/gantt_controller");const TaskGanttController=__exports.TaskGanttController=class TaskGanttController extends GanttController{}
return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/task_gantt_model.js */
odoo.define('@project_enterprise/views/task_gantt/task_gantt_model',['@web/core/l10n/translation','@web/core/l10n/dates','@web_gantt/gantt_model','@web/core/utils/arrays','@web/core/domain','@project_enterprise/views/project_highlight_tasks'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{deserializeDate,deserializeDateTime,serializeDateTime}=require("@web/core/l10n/dates");const{GanttModel}=require("@web_gantt/gantt_model");const{sortBy}=require("@web/core/utils/arrays");const{Domain}=require("@web/core/domain");const{useProjectModelActions}=require("@project_enterprise/views/project_highlight_tasks");const MAP_MANY_2_MANY_FIELDS=[{many2many_field:"personal_stage_type_ids",many2one_field:"personal_stage_type_id",},];const TaskGanttModel=__exports.TaskGanttModel=class TaskGanttModel extends GanttModel{setup(){super.setup(...arguments);this.getHighlightIds=useProjectModelActions({getContext:()=>this.env.searchModel._context,getHighlightPlannedIds:()=>this.env.searchModel.highlightPlannedIds,}).getHighlightIds;}
getDialogContext(){const context=super.getDialogContext(...arguments);this._replaceSpecialMany2manyKeys(context);if("user_ids"in context&&!context.user_ids){delete context.user_ids;}
return context;}
toggleHighlightPlannedFilter(ids){super.toggleHighlightPlannedFilter(...arguments);this.env.searchModel.toggleHighlightPlannedFilter(ids);}
reschedule(ids,schedule,callback){if(!schedule.smart_task_scheduling){return super.reschedule(...arguments);}
if(!Array.isArray(ids)){ids=[ids];}
const allData=this._scheduleToData(schedule);const endDateTime=deserializeDateTime(allData.date_deadline).endOf(this.metaData.scale.id);const data=this.removeRedundantData(allData,ids);delete data.name;return this.mutex.exec(async()=>{try{const result=await this.orm.call(this.metaData.resModel,"schedule_tasks",[ids,data],{context:{...this.searchParams.context,last_date_view:serializeDateTime(endDateTime),cell_part:this.metaData.scale.cellPart,},});if(result&&Array.isArray(result)&&result.length>1){this.toggleHighlightPlannedFilter(Object.keys(result[1]).map(Number));}
if(callback){callback(result);}}finally{this.fetchData();}});}
_reschedule(ids,data,context){return this.orm.call(this.metaData.resModel,"web_gantt_write",[ids,data],{context,});}
async unscheduleTask(id){await this.orm.call("project.task","action_unschedule_task",[id]);this.fetchData();}
async _fetchData(metaData,additionalContext){const globalStart=metaData.globalStart.toISODate();const globalStop=metaData.globalStop.toISODate();const scale=metaData.scale.unit;additionalContext={...(additionalContext||{}),gantt_start_date:globalStart,gantt_scale:scale,};const proms=[this.getHighlightIds(),super._fetchData(metaData,additionalContext)];let milestones=[];const projectDeadlines=[];const projectStartDates=[];if(!this.orm.isSample&&!this.env.isSmall){const prom=this.orm.call("project.task","get_all_deadlines",[globalStart,globalStop],{context:this.searchParams.context,}).then(({milestone_id,project_id})=>{milestones=milestone_id.map((m)=>({...m,deadline:deserializeDate(m.deadline),}));for(const project of project_id){const dateEnd=project.date;const dateStart=project.date_start;if(dateEnd>=globalStart&&dateEnd<=globalStop){projectDeadlines.push({...project,date:deserializeDate(dateEnd),});}
if(dateStart>=globalStart&&dateStart<=globalStop){projectStartDates.push({...project,date:deserializeDate(dateStart),});}}});proms.push(prom);}
this.highlightIds=(await Promise.all(proms))[0];this.data.milestones=sortBy(milestones,(m)=>m.deadline);this.data.projectDeadlines=sortBy(projectDeadlines,(d)=>d.date);this.data.projectStartDates=sortBy(projectStartDates,(d)=>d.date);}
_generateRows(metaData,params){const{groupedBy,groups,parentGroup}=params;if(groupedBy.length){const groupedByField=groupedBy[0];if(groupedByField==="user_ids"){const fakeGroup=Object.assign({},...parentGroup);groups.push(fakeGroup);}}
const rows=super._generateRows(...arguments);if(!["stage_id","personal_stage_type_ids"].includes(groupedBy[0])){rows.sort((a,b)=>{if(a.resId&&!b.resId){return 1;}else if(!a.resId&&b.resId){return-1;}else{return a.name.localeCompare(b.name);}});}
return rows;}
_getRowName(_,groupedByField,value){if(!value){if(groupedByField==="user_ids"){return _t("👤 Unassigned");}else if(groupedByField==="project_id"){return _t("🔒 Private");}}
return super._getRowName(...arguments);}
_replaceSpecialMany2manyKeys(object){for(const{many2many_field,many2one_field}of MAP_MANY_2_MANY_FIELDS){if(many2many_field in object){object[many2one_field]=object[many2many_field][0];delete object[many2many_field];}}}
_scheduleToData(){const data=super._scheduleToData(...arguments);this._replaceSpecialMany2manyKeys(data);return data;}
load(searchParams){const{context,domain,groupBy}=searchParams;let displayUnassigned=false;if(groupBy.length===0||groupBy[groupBy.length-1]==="user_ids"){for(const node of domain){if(node.length===3&&node[0]==="user_ids.name"&&node[1]==="ilike"){displayUnassigned=true;}}}
if(displayUnassigned){searchParams.domain=Domain.or([domain,"[('user_ids', '=', false)]"]).toList();}
return super.load({...searchParams,context:{...context},displayUnassigned});}}
return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/task_gantt_renderer.js */
odoo.define('@project_enterprise/views/task_gantt/task_gantt_renderer',['@project_enterprise/views/view_dialogs/select_auto_plan_create_dialog','@web/core/l10n/translation','@mail/views/web/fields/avatar/avatar','@odoo/owl','@web/core/l10n/localization','@web/core/popover/popover_hook','@web/core/utils/hooks','@web_gantt/gantt_renderer','@web/core/utils/strings','@project_enterprise/views/task_gantt/milestones_popover','@web/views/view_dialogs/form_view_dialog','@web/views/fields/formatters'],function(require){'use strict';let __exports={};const{SelectCreateAutoPlanDialog}=require("@project_enterprise/views/view_dialogs/select_auto_plan_create_dialog");const{_t}=require("@web/core/l10n/translation");const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{markup,onWillUnmount,useEffect}=require("@odoo/owl");const{localization}=require("@web/core/l10n/localization");const{usePopover}=require("@web/core/popover/popover_hook");const{useService}=require("@web/core/utils/hooks");const{GanttRenderer}=require("@web_gantt/gantt_renderer");const{escape}=require("@web/core/utils/strings");const{MilestonesPopover}=require("@project_enterprise/views/task_gantt/milestones_popover");const{FormViewDialog}=require("@web/views/view_dialogs/form_view_dialog");const{formatFloatTime}=require("@web/views/fields/formatters");const TaskGanttRenderer=__exports.TaskGanttRenderer=class TaskGanttRenderer extends GanttRenderer{static components={...GanttRenderer.components,Avatar,};static headerTemplate="project_enterprise.TaskGanttRenderer.Header";static rowHeaderTemplate="project_enterprise.TaskGanttRenderer.RowHeader";static rowContentTemplate="project_enterprise.TaskGanttRenderer.RowContent";static totalRowTemplate="project_enterprise.TaskGanttRenderer.TotalRow";static pillTemplate="project_enterprise.TaskGanttRenderer.Pill";setup(){super.setup(...arguments);this.notificationService=useService("notification");this.orm=useService("orm");useEffect((el)=>el.classList.add("o_project_gantt"),()=>[this.gridRef.el]);const position=localization.direction==="rtl"?"bottom":"right";this.milestonePopover=usePopover(MilestonesPopover,{position});onWillUnmount(()=>{this.notificationFn?.();});}
enrichPill(pill){const enrichedPill=super.enrichPill(pill);if(enrichedPill?.record){if(this.props.model.highlightIds&&!this.props.model.highlightIds.includes(enrichedPill.record.id)){pill.className+=" opacity-25";}}
return enrichedPill;}
computeVisibleColumns(){super.computeVisibleColumns();this.columnMilestones={};for(const column of this.columns){this.columnMilestones[column.id]={hasDeadLineExceeded:false,allReached:true,projects:{},hasMilestone:false,hasDeadline:false,hasStartDate:false,};}
this.columnMilestones[this.columns[0].id].edge={projects:{},hasStartDate:false,};const projectStartDates=[...this.model.data.projectStartDates];const projectDeadlines=[...this.model.data.projectDeadlines];const milestones=[...this.model.data.milestones];let project=projectStartDates.shift();let projectDeadline=projectDeadlines.shift();let milestone=milestones.shift();let i=0;while(i<this.columns.length&&(project||projectDeadline||milestone)){const column=this.columns[i];const nextColumn=this.columns[i+1];const info=this.columnMilestones[column.id];if(i==0&&project&&column&&column.stop>project.date){if(!info.edge.projects[project.id]){info.edge.projects[project.id]={milestones:[],id:project.id,name:project.name,};}
info.edge.projects[project.id].isStartDate=true;info.edge.hasStartDate=true;project=projectStartDates.shift();}else if(project&&nextColumn?.stop>project.date){if(!info.projects[project.id]){info.projects[project.id]={milestones:[],id:project.id,name:project.name,};}
info.projects[project.id].isStartDate=true;info.hasStartDate=true;project=projectStartDates.shift();}
if(projectDeadline&&column.stop>projectDeadline.date){if(!info.projects[projectDeadline.id]){info.projects[projectDeadline.id]={milestones:[],id:projectDeadline.id,name:projectDeadline.name,};}
info.projects[projectDeadline.id].isDeadline=true;info.hasDeadline=true;projectDeadline=projectDeadlines.shift();}
if(milestone&&column.stop>milestone.deadline){const[projectId,projectName]=milestone.project_id;if(!info.projects[projectId]){info.projects[projectId]={milestones:[],id:projectId,name:projectName,};}
const{is_deadline_exceeded,is_reached}=milestone;info.projects[projectId].milestones.push(milestone);info.hasMilestone=true;milestone=milestones.shift();if(is_deadline_exceeded){info.hasDeadLineExceeded=true;}
if(!is_reached){info.allReached=false;}}
if((!project||!nextColumn||nextColumn?.stop<project.date)&&(!projectDeadline||column.stop<projectDeadline.date)&&(!milestone||column.stop<milestone.deadline)){i++;}}}
computeDerivedParams(){this.rowsWithAvatar={};super.computeDerivedParams();}
getConnectorAlert(masterRecord,slaveRecord){if(masterRecord.display_warning_dependency_in_gantt&&slaveRecord.display_warning_dependency_in_gantt){return super.getConnectorAlert(...arguments);}}
getPopoverProps(pill){const props=super.getPopoverProps(...arguments);const{record}=pill;if(record.planning_overlap){props.context.planningOverlapHtml=markup(record.planning_overlap);}
props.context.allocated_hours=formatFloatTime(props.context.allocated_hours);return props;}
getAvatarProps(row){return this.rowsWithAvatar[row.id];}
getSelectCreateDialogProps(){const props=super.getSelectCreateDialogProps(...arguments);const onCreateEdit=()=>{this.dialogService.add(FormViewDialog,{context:props.context,resModel:props.resModel,onRecordSaved:async(record)=>{await record.save({reload:false});await this.model.fetchData();},});};const onSelectedAutoPlan=(resIds)=>{props.context.smart_task_scheduling=true;if(resIds.length){this.model.reschedule(resIds,props.context,this.openPlanDialogCallback.bind(this));}};props.onSelectedNoSmartSchedule=props.onSelected;props.onSelected=onSelectedAutoPlan;props.onCreateEdit=onCreateEdit;return props;}
hasAvatar(row){return row.id in this.rowsWithAvatar;}
getNotificationOnSmartSchedule(warningString,old_vals_per_task_id){this.notificationFn?.();this.notificationFn=this.notificationService.add(markup(`<i class="fa btn-link fa-check"></i><span class="ms-1">${escape(
                    warningString
                )}</span>`),{type:"success",sticky:true,buttons:[{name:"Undo",icon:"fa-undo",onClick:async()=>{const ids=Object.keys(old_vals_per_task_id).map(Number);await this.orm.call("project.task","action_rollback_auto_scheduling",[ids,old_vals_per_task_id,]);this.model.toggleHighlightPlannedFilter(false);this.notificationFn();await this.model.fetchData();},},],});}
openPlanDialogCallback(res){if(res&&Array.isArray(res)){const warnings=Object.entries(res[0]);const old_vals_per_task_id=res[1];for(const warning of warnings){this.notificationService.add(warning[1],{title:_t("Warning"),type:"warning",sticky:true,});}
if(warnings.length===0){this.getNotificationOnSmartSchedule(_t("Tasks have been successfully scheduled for the upcoming periods."),old_vals_per_task_id);}}}
processRow(row){const{groupedByField,name,resId}=row;if(groupedByField==="user_ids"&&Boolean(resId)){const{fields}=this.model.metaData;const resModel=fields.user_ids.relation;this.rowsWithAvatar[row.id]={resModel,resId,displayName:name};}
return super.processRow(...arguments);}
shouldRenderRecordConnectors(record){if(record.allow_task_dependencies){return super.shouldRenderRecordConnectors(...arguments);}
return false;}
highlightPill(pillId,highlighted){if(!this.connectorDragState.dragging){return super.highlightPill(pillId,highlighted);}
const pill=this.pills[pillId];if(!pill){return;}
const{record}=pill;if(!this.shouldRenderRecordConnectors(record)){return super.highlightPill(pillId,false);}
return super.highlightPill(pillId,highlighted);}
onPlan(rowId,columnStart,columnStop){const{start,stop}=this.getColumnStartStop(columnStart,columnStop);this.dialogService.add(SelectCreateAutoPlanDialog,this.getSelectCreateDialogProps({rowId,start,stop,withDefault:true}));}
onMilestoneMouseEnter(ev,projects){this.milestonePopover.open(ev.target,{displayMilestoneDates:this.model.metaData.scale.id==="year",displayProjectName:!this.model.searchParams.context.default_project_id,projects,});}
onMilestoneMouseLeave(){this.milestonePopover.close();}}
return __exports;});;

/* /project_enterprise/static/src/views/task_gantt/task_gantt_view.js */
odoo.define('@project_enterprise/views/task_gantt/task_gantt_view',['@web_gantt/gantt_view','@project_enterprise/views/task_gantt/task_gantt_controller','@web/core/registry','@project_enterprise/views/task_gantt/task_gantt_arch_parser','@project_enterprise/views/task_gantt/task_gantt_model','@project_enterprise/views/task_gantt/task_gantt_renderer','@project_enterprise/views/project_task_search_model'],function(require){'use strict';let __exports={};const{ganttView}=require("@web_gantt/gantt_view");const{TaskGanttController}=require("@project_enterprise/views/task_gantt/task_gantt_controller");const{registry}=require("@web/core/registry");const{TaskGanttArchParser}=require("@project_enterprise/views/task_gantt/task_gantt_arch_parser");const{TaskGanttModel}=require("@project_enterprise/views/task_gantt/task_gantt_model");const{TaskGanttRenderer}=require("@project_enterprise/views/task_gantt/task_gantt_renderer");const{ProjectTaskSearchModel}=require("@project_enterprise/views/project_task_search_model");const viewRegistry=registry.category("views");const taskGanttView=__exports.taskGanttView={...ganttView,Controller:TaskGanttController,ArchParser:TaskGanttArchParser,Model:TaskGanttModel,Renderer:TaskGanttRenderer,SearchModel:ProjectTaskSearchModel,};viewRegistry.add("task_gantt",taskGanttView);return __exports;});;

/* /project_enterprise/static/src/views/project_gantt/project_gantt_renderer.js */
odoo.define('@project_enterprise/views/project_gantt/project_gantt_renderer',['@mail/views/web/fields/avatar/avatar','@web_gantt/gantt_renderer'],function(require){'use strict';let __exports={};const{Avatar}=require("@mail/views/web/fields/avatar/avatar");const{GanttRenderer}=require("@web_gantt/gantt_renderer");const ProjectGanttRenderer=__exports.ProjectGanttRenderer=class ProjectGanttRenderer extends GanttRenderer{static components={...GanttRenderer.components,Avatar,};static rowHeaderTemplate="project_enterprise.ProjectGanttRenderer.RowHeader";computeDerivedParams(){this.rowsWithAvatar={};super.computeDerivedParams();}
processRow(row){const{groupedByField,name,resId}=row;if(groupedByField==="user_id"&&Boolean(resId)){const{fields}=this.model.metaData;const resModel=fields.user_id.relation;this.rowsWithAvatar[row.id]={resModel,resId,displayName:name};}
return super.processRow(...arguments);}
getAvatarProps(row){return this.rowsWithAvatar[row.id];}
hasAvatar(row){return row.id in this.rowsWithAvatar;}}
return __exports;});;

/* /project_enterprise/static/src/views/project_gantt/project_gantt_view.js */
odoo.define('@project_enterprise/views/project_gantt/project_gantt_view',['@web_gantt/gantt_view','@web/core/registry','@project_enterprise/views/project_gantt/project_gantt_renderer'],function(require){'use strict';let __exports={};const{ganttView}=require("@web_gantt/gantt_view");const{registry}=require("@web/core/registry");const{ProjectGanttRenderer}=require("@project_enterprise/views/project_gantt/project_gantt_renderer");const projectGanttView=__exports.projectGanttView={...ganttView,Renderer:ProjectGanttRenderer,};registry.category("views").add("project_gantt",projectGanttView);return __exports;});;

/* /spreadsheet_edition/static/src/assets/graph_view/graph_view.js */
odoo.define('@spreadsheet_edition/assets/graph_view/graph_view',['@web/views/graph/graph_renderer','@web/core/user','@web/session','@web/core/utils/patch','@web/core/utils/hooks','@spreadsheet_edition/assets/components/spreadsheet_selector_dialog/spreadsheet_selector_dialog','@web/core/utils/objects'],function(require){'use strict';let __exports={};const{GraphRenderer}=require("@web/views/graph/graph_renderer");const{user}=require("@web/core/user");const{session}=require("@web/session");const{patch}=require("@web/core/utils/patch");const{useService}=require("@web/core/utils/hooks");const{SpreadsheetSelectorDialog}=require("@spreadsheet_edition/assets/components/spreadsheet_selector_dialog/spreadsheet_selector_dialog");const{omit}=require("@web/core/utils/objects");const patchGraphSpreadsheet=__exports.patchGraphSpreadsheet=()=>({setup(){super.setup(...arguments);this.notification=useService("notification");this.actionService=useService("action");this.menu=useService("menu");this.canInsertChart=session.can_insert_in_spreadsheet;},async onInsertInSpreadsheet(){const{actionId}=this.env.config;const{xml_id}=actionId?await this.actionService.loadAction(actionId):{};const actionOptions={preProcessingAsyncAction:"insertChart",preProcessingAsyncActionData:{metaData:this.model.metaData,searchParams:{...this.model.searchParams,domain:this.env.searchModel.domainString,context:omit(this.model.searchParams.context,...Object.keys(user.context),"graph_measure","graph_order"),},actionXmlId:xml_id,},};const params={type:"GRAPH",name:this.model.metaData.title,actionOptions,};this.env.services.dialog.add(SpreadsheetSelectorDialog,params);},});const unpatchGraphSpreadsheet=__exports.unpatchGraphSpreadsheet=patch(GraphRenderer.prototype,patchGraphSpreadsheet());return __exports;});;

/* /spreadsheet_edition/static/src/assets/pivot_view/pivot_view.js */
odoo.define('@spreadsheet_edition/assets/pivot_view/pivot_view',['@web/views/pivot/pivot_renderer','@web/core/user','@web/core/utils/arrays','@web/core/utils/patch','@web/core/utils/hooks','@web/core/utils/objects','@web/core/l10n/translation','@spreadsheet_edition/assets/components/spreadsheet_selector_dialog/spreadsheet_selector_dialog','@web/session'],function(require){'use strict';let __exports={};const{PivotRenderer}=require("@web/views/pivot/pivot_renderer");const{user}=require("@web/core/user");const{intersection,unique}=require("@web/core/utils/arrays");const{patch}=require("@web/core/utils/patch");const{useService}=require("@web/core/utils/hooks");const{omit}=require("@web/core/utils/objects");const{_t}=require("@web/core/l10n/translation");const{SpreadsheetSelectorDialog}=require("@spreadsheet_edition/assets/components/spreadsheet_selector_dialog/spreadsheet_selector_dialog");const{session}=require("@web/session");const ALL_PERIODS={quarter:_t("Quarter & Year"),month:_t("Month & Year"),week:_t("Week & Year"),day:_t("Day"),year:_t("Year"),quarter_number:_t("Quarter"),month_number:_t("Month"),iso_week_number:_t("Week"),day_of_month:_t("Day of Month"),};patch(PivotRenderer.prototype,{setup(){super.setup(...arguments);this.notification=useService("notification");this.actionService=useService("action");this.canInsertPivot=session.can_insert_in_spreadsheet;},async onInsertInSpreadsheet(){let name=this.model.metaData.title;const groupBy=this.model.metaData.fullColGroupBys[0]||this.model.metaData.fullRowGroupBys[0];if(groupBy){let[field,period]=groupBy.split(":");period=ALL_PERIODS[period];if(period){name=_t("%(pivot_title)s by %(group_by)s (%(granularity)s)",{pivot_title:name,group_by:this.model.metaData.fields[field].string,granularity:period,});}else{name=_t("%(pivot_title)s by %(group_by)s",{pivot_title:name,group_by:this.model.metaData.fields[field].string,});}}
const{actionId}=this.env.config;const{xml_id}=actionId?await this.actionService.loadAction(actionId,this.env.searchModel.context):{};const actionOptions={preProcessingAsyncAction:"insertPivot",preProcessingAsyncActionData:{metaData:this.model.metaData,searchParams:{...this.model.searchParams,domain:this.env.searchModel.domainString,context:omit(this.model.searchParams.context,...Object.keys(user.context),"pivot_measures","pivot_row_groupby","pivot_column_groupby"),},name,actionXmlId:xml_id,},};const params={type:"PIVOT",name,actionOptions,};this.env.services.dialog.add(SpreadsheetSelectorDialog,params);},hasDuplicatedGroupbys(){const fullColGroupBys=this.model.metaData.fullColGroupBys;const fullRowGroupBys=this.model.metaData.fullRowGroupBys;const colGroupBys=fullColGroupBys.map((el)=>el.split(":")[0]);const rowGroupBys=fullRowGroupBys.map((el)=>el.split(":")[0]);return(unique([...fullColGroupBys,...fullRowGroupBys]).length<fullColGroupBys.length+fullRowGroupBys.length||intersection(colGroupBys,rowGroupBys).length);},isInsertButtonDisabled(){return(!this.model.hasData()||this.model.metaData.activeMeasures.length===0||this.model.useSampleModel||this.hasDuplicatedGroupbys());},getInsertButtonTooltip(){return this.hasDuplicatedGroupbys()?_t("Pivot contains duplicate groupbys"):undefined;},});return __exports;});;

/* /web_cohort/static/src/cohort_arch_parser.js */
odoo.define('@web_cohort/cohort_arch_parser',['@web/core/l10n/translation','@web/core/utils/strings','@web/core/utils/xml','@web_cohort/cohort_model'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{exprToBoolean}=require("@web/core/utils/strings");const{visitXML}=require("@web/core/utils/xml");const{INTERVALS,MODES,TIMELINES}=require("@web_cohort/cohort_model");const CohortArchParser=__exports.CohortArchParser=class CohortArchParser{parse(arch,fields){const archInfo={fieldAttrs:{},widgets:{},};visitXML(arch,(node)=>{switch(node.tagName){case"cohort":{if(node.hasAttribute("disable_linking")){archInfo.disableLinking=exprToBoolean(node.getAttribute("disable_linking"));}
const title=node.getAttribute("string");if(title){archInfo.title=title;}
const dateStart=node.getAttribute("date_start");if(dateStart){archInfo.dateStart=dateStart;archInfo.dateStartString=fields[dateStart].string;}else{throw new Error(_t('Cohort view has not defined "date_start" attribute.'));}
const dateStop=node.getAttribute("date_stop");if(dateStop){archInfo.dateStop=dateStop;archInfo.dateStopString=fields[dateStop].string;}else{throw new Error(_t('Cohort view has not defined "date_stop" attribute.'));}
const mode=node.getAttribute("mode")||"retention";if(mode&&MODES.includes(mode)){archInfo.mode=mode;}else{throw new Error(_t("The argument %(mode)s is not a valid mode. Here are the modes: %(modes)s",{mode,modes:MODES}));}
const timeline=node.getAttribute("timeline")||"forward";if(timeline&&TIMELINES.includes(timeline)){archInfo.timeline=timeline;}else{throw new Error(_t("The argument %(timeline)s is not a valid timeline. Here are the timelines: %(timelines)s",{timeline,timelines:TIMELINES}));}
archInfo.measure=node.getAttribute("measure")||"__count";const interval=node.getAttribute("interval")||"day";if(interval&&interval in INTERVALS){archInfo.interval=interval;}else{throw new Error(_t("The argument %(interval)s is not a valid interval. Here are the intervals: %(intervals)s",{interval,intervals:INTERVALS}));}
break;}
case"field":{const fieldName=node.getAttribute("name");archInfo.fieldAttrs[fieldName]={};if(node.hasAttribute("string")){archInfo.fieldAttrs[fieldName].string=node.getAttribute("string");}
if(node.getAttribute("invisible")==="True"||node.getAttribute("invisible")==="1"){archInfo.fieldAttrs[fieldName].isInvisible=true;break;}
if(node.hasAttribute("widget")){archInfo.widgets[fieldName]=node.getAttribute("widget");}}}});return archInfo;}}
return __exports;});;

/* /web_cohort/static/src/cohort_controller.js */
odoo.define('@web_cohort/cohort_controller',['@web/core/utils/hooks','@web/search/layout','@web/model/model','@web/views/standard_view_props','@web/search/action_hook','@web/search/search_bar/search_bar','@web/search/cog_menu/cog_menu','@odoo/owl'],function(require){'use strict';let __exports={};const{useService}=require("@web/core/utils/hooks");const{Layout}=require("@web/search/layout");const{useModelWithSampleData}=require("@web/model/model");const{standardViewProps}=require("@web/views/standard_view_props");const{useSetupAction}=require("@web/search/action_hook");const{SearchBar}=require("@web/search/search_bar/search_bar");const{CogMenu}=require("@web/search/cog_menu/cog_menu");const{Component,toRaw,useRef}=require("@odoo/owl");const CohortController=__exports.CohortController=class CohortController extends Component{static template="web_cohort.CohortView";static components={Layout,SearchBar,CogMenu};static props={...standardViewProps,Model:Function,modelParams:Object,Renderer:Function,buttonTemplate:String,};setup(){this.actionService=useService("action");this.model=useModelWithSampleData(this.props.Model,toRaw(this.props.modelParams));useSetupAction({rootRef:useRef("root"),getLocalState:()=>{return{metaData:this.model.metaData};},getContext:()=>this.getContext(),});}
getContext(){const{measure,interval}=this.model.metaData;return{cohort_measure:measure,cohort_interval:interval};}
onRowClicked(row){if(row.value===undefined||this.model.metaData.disableLinking){return;}
const context=Object.assign({},this.model.searchParams.context);const domain=row.domain;const views={};for(const[viewId,viewType]of this.env.config.views||[]){views[viewType]=viewId;}
function getView(viewType){return[context[`${viewType}_view_id`]||views[viewType]||false,viewType];}
const actionViews=[getView("list"),getView("form")];this.actionService.doAction({type:"ir.actions.act_window",name:this.model.metaData.title,res_model:this.model.metaData.resModel,views:actionViews,view_mode:"list",target:"current",context:context,domain:domain,});}}
return __exports;});;

/* /web_cohort/static/src/cohort_model.js */
odoo.define('@web_cohort/cohort_model',['@web/core/l10n/translation','@web/core/utils/concurrency','@web/model/model','@web/views/utils','@web/core/browser/browser'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{KeepLast,Race}=require("@web/core/utils/concurrency");const{Model}=require("@web/model/model");const{computeReportMeasures,processMeasure}=require("@web/views/utils");const{browser}=require("@web/core/browser/browser");const MODES=__exports.MODES=["retention","churn"];const TIMELINES=__exports.TIMELINES=["forward","backward"];const INTERVALS=__exports.INTERVALS={day:_t("Day"),week:_t("Week"),month:_t("Month"),year:_t("Year"),};const CohortModel=__exports.CohortModel=class CohortModel extends Model{setup(params){this.keepLast=new KeepLast();this.race=new Race();const _load=this._load.bind(this);this._load=(...args)=>{return this.race.add(_load(...args));};this.metaData=params;this.data=null;this.searchParams=null;this.intervals=INTERVALS;const activeInterval=browser.localStorage.getItem(this.storageKey)||params.interval;if(Object.keys(this.intervals).includes(activeInterval)){this.metaData.interval=activeInterval;}}
load(searchParams){const{comparison,context,domain}=searchParams;this.searchParams={context};if(comparison){this.searchParams.domains=comparison.domains;}else{this.searchParams.domains=[{arrayRepr:domain,description:null}];}
const{cohort_interval,cohort_measure}=searchParams.context;this.metaData.interval=cohort_interval||this.metaData.interval;this.metaData.measure=processMeasure(cohort_measure)||this.metaData.measure;this.metaData.measures=computeReportMeasures(this.metaData.fields,this.metaData.fieldAttrs,[this.metaData.measure],{sumAggregatorOnly:true});return this._load(this.metaData);}
get storageKey(){return`scaleOf-viewId-${this.env.config.viewId}`;}
hasData(){return this.data.some((data)=>data.rows.length>0);}
async updateMetaData(params){Object.assign(this.metaData,params);browser.localStorage.setItem(this.storageKey,this.metaData.interval);await this._load(this.metaData);this.notify();}
async _load(metaData){this.data=await this.keepLast.add(this._fetchData(metaData));for(const i in this.data){this.data[i].title=this.searchParams.domains[i].description;this.data[i].rows.forEach((row)=>{row.columns=row.columns.filter((col)=>col.percentage!=="");});}}
async _fetchData(metaData){return Promise.all(this.searchParams.domains.map(({arrayRepr:domain})=>{return this.orm.call(metaData.resModel,"get_cohort_data",[],{date_start:metaData.dateStart,date_stop:metaData.dateStop,measure:metaData.measure,interval:metaData.interval,domain:domain,mode:metaData.mode,timeline:metaData.timeline,context:this.searchParams.context,});}));}}
return __exports;});;

/* /web_cohort/static/src/cohort_renderer.js */
odoo.define('@web_cohort/cohort_renderer',['@web/core/l10n/translation','@web/views/fields/formatters','@web/core/registry','@odoo/owl','@web/core/dropdown/dropdown','@web/core/dropdown/dropdown_item','@web/views/view_components/view_scale_selector','@web/core/network/download','@web/views/view_components/report_view_measures'],function(require){'use strict';let __exports={};const{_t}=require("@web/core/l10n/translation");const{formatPercentage}=require("@web/views/fields/formatters");const{registry}=require("@web/core/registry");const{Component}=require("@odoo/owl");const{Dropdown}=require("@web/core/dropdown/dropdown");const{DropdownItem}=require("@web/core/dropdown/dropdown_item");const{ViewScaleSelector}=require("@web/views/view_components/view_scale_selector");const{download}=require("@web/core/network/download");const{ReportViewMeasures}=require("@web/views/view_components/report_view_measures");const formatters=registry.category("formatters");const CohortRenderer=__exports.CohortRenderer=class CohortRenderer extends Component{static components={Dropdown,DropdownItem,ViewScaleSelector,ReportViewMeasures};static template="web_cohort.CohortRenderer";static props=["class","model","onRowClicked"];setup(){this.model=this.props.model;}
range(n){return Array.from({length:n},(_,i)=>i);}
getFormattedValue(value){const fieldName=this.model.metaData.measure;const field=this.model.metaData.measures[fieldName];let formatType=this.model.metaData.widgets[fieldName];if(!formatType){const fieldType=field.type;formatType=["many2one","reference"].includes(fieldType)?"integer":fieldType;}
const formatter=formatters.get(formatType);return formatter(value,field);}
formatPercentage(value){return formatPercentage(value,{digits:[false,1]});}
getCellTitle(period,measure,count){return _t("Period: %(period)s\n%(measure)s: %(count)s",{period,measure,count});}
get scales(){return Object.fromEntries(Object.entries(this.model.intervals).map(([s,d])=>[s,{description:d}]));}
setScale(scale){this.model.updateMetaData({interval:scale,});}
onMeasureSelected({measure}){this.model.updateMetaData({measure});}
async downloadExcel(){const{title,resModel,interval,measure,measures,dateStartString,dateStopString,timeline,}=this.model.metaData;const{domains}=this.model.searchParams;const data={title:title,model:resModel,interval_string:this.model.intervals[interval].toString(),measure_string:measures[measure].string,date_start_string:dateStartString,date_stop_string:dateStopString,timeline:timeline,rangeDescription:domains[0].description,report:this.model.data[0],comparisonRangeDescription:domains[1]&&domains[1].description,comparisonReport:this.model.data[1],};this.env.services.ui.block();try{await download({url:"/web/cohort/export",data:{data:JSON.stringify(data)},});}finally{this.env.services.ui.unblock();}}}
return __exports;});;

/* /web_cohort/static/src/cohort_view.js */
odoo.define('@web_cohort/cohort_view',['@web/core/registry','@web_cohort/cohort_controller','@web_cohort/cohort_renderer','@web_cohort/cohort_arch_parser','@web_cohort/cohort_model'],function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{CohortController}=require("@web_cohort/cohort_controller");const{CohortRenderer}=require("@web_cohort/cohort_renderer");const{CohortArchParser}=require("@web_cohort/cohort_arch_parser");const{CohortModel}=require("@web_cohort/cohort_model");const cohortView=__exports.cohortView={type:"cohort",buttonTemplate:"web_cohort.CohortView.Buttons",searchMenuTypes:["filter","comparison","favorite"],Model:CohortModel,ArchParser:CohortArchParser,Controller:CohortController,Renderer:CohortRenderer,props:(genericProps,view)=>{let modelParams;if(genericProps.state){modelParams=genericProps.state.metaData;}else{const{arch,fields,resModel}=genericProps;const{ArchParser}=view;const archInfo=new ArchParser().parse(arch,fields);modelParams={dateStart:archInfo.dateStart,dateStartString:archInfo.dateStartString,dateStop:archInfo.dateStop,dateStopString:archInfo.dateStopString,fieldAttrs:archInfo.fieldAttrs,fields:fields,interval:archInfo.interval,measure:archInfo.measure,mode:archInfo.mode,resModel:resModel,timeline:archInfo.timeline,title:archInfo.title,disableLinking:Boolean(archInfo.disableLinking),widgets:archInfo.widgets,};}
return{...genericProps,modelParams,Model:view.Model,Renderer:view.Renderer,buttonTemplate:view.buttonTemplate,};},};registry.category("views").add("cohort",cohortView);return __exports;});;

/* /web_cohort/static/src/cohort_view_sample_server.js */
odoo.define('@web_cohort/cohort_view_sample_server',['@web/core/l10n/dates','@web/core/registry','@web/model/sample_server'],function(require){'use strict';let __exports={};const{parseDate}=require("@web/core/l10n/dates");const{registry}=require("@web/core/registry");const{SampleServer}=require("@web/model/sample_server");function _mockGetCohortData(params){const{model,date_start,interval,measure,mode,timeline}=params;const columns_avg={};const rows=[];let initialChurnValue=0;const groups=this._mockReadGroup({model,fields:[date_start],groupBy:[date_start+":"+interval],});const totalCount=groups.length;let totalValue=0;for(const group of groups){const format=SampleServer.FORMATS[interval];const displayFormat=SampleServer.DISPLAY_FORMATS[interval];const date=parseDate(group[date_start+":"+interval],{format});const now=luxon.DateTime.local();let colStartDate=date;if(timeline==="backward"){colStartDate=colStartDate.plus({[`${interval}s`]:-15});}
let value=measure==="__count"?this._getRandomInt(SampleServer.MAX_INTEGER):this._generateFieldValue(model,measure);value=value||25;totalValue+=value;let initialValue=value;let max=value;const columns=[];for(let column=0;column<=15;column++){if(!columns_avg[column]){columns_avg[column]={percentage:0,count:0};}
if(colStartDate.plus({[`${interval}s`]:column})>now){columns.push({value:"-",churn_value:"-",percentage:""});continue;}
let colValue=0;if(max>0){colValue=Math.min(Math.round(Math.random()*max),max);max-=colValue;}
if(timeline==="backward"&&column===0){initialValue=Math.min(Math.round(Math.random()*value),value);initialChurnValue=value-initialValue;}
const previousValue=column===0?initialValue:columns[column-1].value;const remainingValue=previousValue-colValue;const previousChurnValue=column===0?initialChurnValue:columns[column-1].churn_value;const churn_value=colValue+previousChurnValue;let percentage=value?parseFloat(remainingValue/value):0;if(mode==="churn"){percentage=1-percentage;}
percentage=Number((100*percentage).toFixed(1));columns_avg[column].percentage+=percentage;columns_avg[column].count+=1;columns.push({value:remainingValue,churn_value,percentage,period:column,});}
const keepRow=columns.some((c)=>c.percentage!=="");if(keepRow){rows.push({date:date.toFormat(displayFormat),value,columns});}}
const avg_value=totalCount?totalValue/totalCount:0;const avg={avg_value,columns_avg};return{rows,avg};}
registry.category("sample_server").add("get_cohort_data",_mockGetCohortData);return __exports;});

                    /*******************************************
                    *  Templates                               *
                    *******************************************/

                    odoo.define("web.assets_backend_lazy.bundle.xml", ["@web/core/templates"], function(require) {
                        "use strict";
                        const { checkPrimaryTemplateParents, registerTemplate, registerTemplateExtension } = require("@web/core/templates");
                        /* web.assets_backend_lazy */
                        registerTemplate("web.GraphView.Buttons", `/web/static/src/views/graph/graph_controller.xml`, `<t t-name="web.GraphView.Buttons" xml:space="preserve">
        <div class="btn-group" role="toolbar" aria-label="Main actions">
            <ReportViewMeasures measures="model.metaData.measures" activeMeasures="[model.metaData.measure]" onMeasureSelected.bind="this.onMeasureSelected"/>
        </div>
        <div class="btn-group" role="toolbar" aria-label="Change graph">
            <button class="btn btn-secondary fa fa-bar-chart o_graph_button" data-tooltip="Bar Chart" aria-label="Bar Chart" data-mode="bar" t-on-click="() =&gt; this.onModeSelected('bar')" t-att-class="{ active: model.metaData.mode === 'bar' }"/>
            <button class="btn btn-secondary fa fa-line-chart o_graph_button" data-tooltip="Line Chart" aria-label="Line Chart" data-mode="line" t-on-click="() =&gt; this.onModeSelected('line')" t-att-class="{ active: model.metaData.mode === 'line' }"/>
            <button class="btn btn-secondary fa fa-pie-chart o_graph_button" data-tooltip="Pie Chart" aria-label="Pie Chart" data-mode="pie" t-on-click="() =&gt; this.onModeSelected('pie')" t-att-class="{ active: model.metaData.mode === 'pie' }"/>
        </div>
        <div t-if="model.metaData.mode === 'bar'" class="btn-group" role="toolbar" aria-label="Change graph">
            <button class="btn btn-secondary fa fa-database o_graph_button" data-tooltip="Stacked" aria-label="Stacked" t-on-click="toggleStacked" t-att-class="{ active: model.metaData.stacked }"/>
        </div>
        <div t-if="model.metaData.mode === 'line'" class="btn-group" role="toolbar" aria-label="Change graph">
            <button class="btn btn-secondary fa fa-database o_graph_button" data-tooltip="Stacked" aria-label="Stacked" t-on-click="toggleStacked" t-att-class="{ active: model.metaData.stacked }"/>
            <button class="btn btn-secondary fa fa-signal o_graph_button" data-tooltip="Cumulative" aria-label="Cumulative" t-on-click="toggleCumulated" t-att-class="{ active: model.metaData.cumulated }"/>
        </div>
        <div t-if="model.metaData.mode !== 'pie' and model.metaData.domains.length === 1" class="btn-group" role="toolbar" aria-label="Sort graph" name="toggleOrderToolbar">
            <button class="btn btn-secondary fa fa-sort-amount-desc o_graph_button" data-tooltip="Descending" aria-label="Descending" t-on-click="() =&gt; this.toggleOrder('DESC')" t-att-class="{ active: model.metaData.order === 'DESC' }"/>
            <button class="btn btn-secondary fa fa-sort-amount-asc o_graph_button" data-tooltip="Ascending" aria-label="Ascending" t-on-click="() =&gt; this.toggleOrder('ASC')" t-att-class="{ active: model.metaData.order === 'ASC' }"/>
        </div>
    </t>

    `);
registerTemplate("web.GraphView", `/web/static/src/views/graph/graph_controller.xml`, `<t t-name="web.GraphView" xml:space="preserve">
        <div t-att-class="props.className" t-ref="root">
            <Layout className="model.useSampleModel ? 'o_view_sample_data' : ''" display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-if="model.data">
                    <t t-if="!model.hasData() or model.useSampleModel and props.info.noContentHelp" t-call="web.ActionHelper">
                        <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                    </t>
                    <t t-component="props.Renderer" model="model" buttonTemplate="props.buttonTemplate"/>
                </t>
                <t t-else="" t-call="web.NoContentHelper">
                    <t t-set="title">Invalid data</t>
                    <t t-set="description">Pie chart cannot mix positive and negative numbers. Try to change your domain to only display positive results</t>
                </t>
            </Layout>
        </div>
    </t>

`);
registerTemplate("web.GraphRenderer.CustomTooltip", `/web/static/src/views/graph/graph_renderer.xml`, `<t t-name="web.GraphRenderer.CustomTooltip" xml:space="preserve">
        <div class="o_graph_custom_tooltip popover show px-2 py-1 pe-none mw-100 position-absolute">
            <table class="overflow-hidden m-0">
                <thead>
                    <tr>
                        <th class="o_measure align-baseline border-0" t-esc="measure"/>
                    </tr>
                </thead>
                <tbody>
                    <tr t-foreach="tooltipItems" t-as="tooltipItem" t-key="tooltipItem_index">
                        <td>
                            <span class="o_square badge p-2 rounded-0 align-middle me-2" t-attf-style="background-color: {{ tooltipItem.boxColor }}"> </span>
                            <small class="o_label d-inline-block text-truncate align-middle smaller" t-attf-style="max-width: {{ maxWidth }}" t-esc="tooltipItem.label"/>
                        </td>
                        <td class="o_value ps-2 text-end fw-bolder">
                            <small class="smaller">
                                <t t-esc="tooltipItem.value"/>
                                <t t-if="mode === 'pie' and tooltipItem.percentage">
                                    (<t t-esc="tooltipItem.percentage"/>%)
                                </t>
                            </small>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    `);
registerTemplate("web.GraphRenderer", `/web/static/src/views/graph/graph_renderer.xml`, `<t t-name="web.GraphRenderer" xml:space="preserve">
        <div t-att-class="'o_graph_renderer o_renderer h-100 d-flex flex-column border-top ' + props.class" t-ref="root">
            <div class="d-flex d-print-none gap-1 flex-shrink-0 mt-2 mx-3 mb-3 overflow-x-auto">
                <t t-call="{{ props.buttonTemplate }}"/>
            </div>
            <div t-if="model.hasData()" class="o_graph_canvas_container flex-grow-1 position-relative px-3 pb-3" t-ref="container">
                <canvas t-ref="canvas"/>
            </div>
        </div>
    </t>

`);
registerTemplate("web.PivotView.Buttons", `/web/static/src/views/pivot/pivot_controller.xml`, `<t t-name="web.PivotView.Buttons" xml:space="preserve">
        <div class="o_pivot_buttons d-flex d-print-none gap-1 mt-2 mx-3 mb-3">
            <div class="btn-group" role="toolbar" aria-label="Main actions">
                <ReportViewMeasures measures="model.metaData.measures" activeMeasures="model.metaData.activeMeasures" onMeasureSelected.bind="this.onMeasureSelected"/>
            </div>
            <div class="btn-group" role="toolbar" aria-label="Pivot settings">
                <t t-set="noDataDisplayed" t-value="!model.hasData() || !model.metaData.activeMeasures.length"/>
                <button class="btn btn-secondary fa fa-exchange o_pivot_flip_button" t-on-click="onFlipButtonClicked" data-tooltip="Flip axis" aria-label="Flip axis" t-attf-disabled="{{noDataDisplayed ? 'disabled' : false}}"/>
                <button class="btn btn-secondary fa fa-arrows o_pivot_expand_button" t-on-click="onExpandButtonClicked" data-tooltip="Expand all" aria-label="Expand all" t-attf-disabled="{{noDataDisplayed ? 'disabled' : false}}"/>
                <button class="btn btn-secondary fa fa-download o_pivot_download" t-on-click="onDownloadButtonClicked" data-tooltip="Download xlsx" aria-label="Download xlsx" t-attf-disabled="{{noDataDisplayed ? 'disabled' : false}}"/>
            </div>
        </div>
    </t>

    `);
registerTemplate("web.PivotView", `/web/static/src/views/pivot/pivot_controller.xml`, `<t t-name="web.PivotView" xml:space="preserve">
        <div t-att-class="props.className" t-ref="root">
            <Layout className="model.useSampleModel ? 'o_view_sample_data' : ''" display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-set="displayNoContent" t-value="                     props.info.noContentHelp !== false and (                         !(model.hasData() and model.metaData.activeMeasures.length) or                         model.useSampleModel                     )"/>
                <t t-if="displayNoContent">
                    <t t-if="props.info.noContentHelp" t-call="web.ActionHelper">
                        <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                    </t>
                    <t t-else="" t-call="web.NoContentHelper"/>
                </t>
                <t t-component="props.Renderer" model="model" buttonTemplate="props.buttonTemplate"/>
            </Layout>
        </div>
    </t>

`);
registerTemplate("web.PivotHeader", `/web/static/src/views/pivot/pivot_header.xml`, `<t t-name="web.PivotHeader" xml:space="preserve">
        <Dropdown state="this.dropdownState" manual="true" position="props.isXAxis ? 'bottom-start' : 'bottom-end'">
            <th class="bg-view text-nowrap cursor-pointer fw-normal user-select-none" t-att-colspan="props.isXAxis ? cell.width : undefined" t-att-rowspan="props.isXAxis ? cell.height : undefined" t-att-class="{                     o_pivot_header_cell_closed: cell.isLeaf,                     o_pivot_header_cell_opened: !cell.isLeaf,                     'border-top': props.isInHead,                 }" t-attf-style="{{                     props.isXAxis                         ? undefined                         : l10n.direction === 'ltr'                             ? 'padding-left: ' + padding + 'px;'                             : 'padding-right: ' + padding + 'px;'                 }}" t-att-data-tooltip="cell.label" t-attf-data-tooltip-position="{{ l10n.direction === 'ltr' ? 'right' : 'left' }}" t-on-click.stop="this.onClick">
                <i t-attf-class="fa fa-{{ cell.isLeaf ? 'plus-square' : 'minus-square-o' }} me-1"/>
                <span t-esc="cell.title"/>
            </th>

            <t t-set-slot="content">
                <t t-set="currentGroup" t-value="null"/>
                <t t-foreach="items" t-as="item" t-key="item.id">
                    <t t-if="currentGroup !== null and currentGroup !== item.groupNumber">
                        <div class="dropdown-divider" role="separator"/>
                    </t>
                    <t t-if="item.fieldType === 'properties'">
                        <PropertiesGroupByItem item="item" onGroup.bind="onGroupBySelected"/>
                    </t>
                    <t t-elif="item.options">
                        <Dropdown>
                            <button t-att-class="'o_menu_item' + (item.isActive ? ' selected' : '')">
                                <t t-esc="item.description"/>
                            </button>
                            <t t-set-slot="content">
                                <t t-set="subGroup" t-value="null"/>
                                <t t-foreach="item.options" t-as="option" t-key="option.id">
                                    <t t-if="subGroup !== null and subGroup !== option.groupNumber">
                                        <div class="dropdown-divider" role="separator"/>
                                    </t>
                                    <CheckboxItem class="{ o_item_option: true, selected: option.isActive }" checked="option.isActive ? true : false" t-esc="option.description" onSelected="() =&gt; this.onGroupBySelected({ itemId: item.id, optionId: option.id})"/>
                                    <t t-set="subGroup" t-value="option.groupNumber"/>
                                </t>
                            </t>
                        </Dropdown>
                    </t>
                    <t t-else="">
                        <CheckboxItem class="{ o_menu_item: true, selected: item.isActive }" checked="item.isActive" t-esc="item.description" onSelected="() =&gt; this.onGroupBySelected({ itemId: item.id })"/>
                    </t>
                    <t t-set="currentGroup" t-value="item.groupNumber"/>
                </t>
                <t t-if="!hideCustomGroupBy and fields.length">
                    <div t-if="items.length" role="separator" class="dropdown-divider"/>
                    <CustomGroupByItem fields="fields" onAddCustomGroup.bind="onAddCustomGroup"/>
                </t>
            </t>
        </Dropdown>
    </t>

`);
registerTemplate("web.PivotRenderer", `/web/static/src/views/pivot/pivot_renderer.xml`, `<t t-name="web.PivotRenderer" xml:space="preserve">
        <t t-call="{{ props.buttonTemplate }}"/>
        <div t-if="model.hasData() and model.metaData.activeMeasures.length" t-att-class="env.isSmall ? 'table-responsive' : ''" class="o_pivot mx-3">
            <table class="table-hover table table-sm table-bordered table-borderless" t-att-class="{ o_enable_linking: !model.metaData.disableLinking }" t-ref="table">
                <thead>
                    <tr t-foreach="table.headers" t-as="row" t-key="'header_' + row_index" class="border-top-0">
                        <t t-foreach="row" t-as="cell" t-key="'header_row_' + cell_index">
                            <t t-if="cell.measure" t-call="web.PivotMeasure"/>
                            <PivotHeader t-elif="cell.isLeaf !== undefined" t-props="this.getHeaderProps({ cell: cell, isXAxis: true, isInHead: true })"/>
                            <th t-else="" t-att-colspan="cell.width" t-att-rowspan="cell.height" class="border-0 bg-100 fw-normal" t-att-class="{ 'border-0': cell_index != 0 }"/>
                        </t>
                    </tr>
                </thead>
                <tbody>
                    <tr t-foreach="table.rows" t-as="row" t-key="'row_' + row_index">
                        <PivotHeader t-props="this.getHeaderProps({ cell: row, isXAxis: false, isInHead: false })"/>
                        <t t-foreach="row.subGroupMeasurements" t-as="cell" t-key="'row_cell_' + cell_index">
                            <td class="o_pivot_cell_value bg-100" t-att-class="{                                     o_empty: cell.value === undefined,                                     'cursor-pointer': cell.value !== undefined,                                     'fw-bold': cell.isBold,                                 }" t-on-click="() =&gt; this.onOpenView(cell)" t-on-mouseover="onMouseEnter" t-on-mouseout="onMouseLeave">
                                <t t-if="cell.value !== undefined">
                                    <div t-if="cell.originIndexes.length &gt; 1" class="o_variation" t-att-class="{                                              'o_positive text-success': cell.value &gt; 0,                                              'o_negative text-danger': cell.value &lt; 0,                                              o_null: cell.value === 0,                                         }" t-esc="getFormattedVariation(cell)"/>
                                    <div t-elif="model.metaData.measures[cell.measure].type === 'boolean'" class="o_value">
                                        <CheckBox disabled="true" value="cell.value"/>
                                    </div>
                                    <div t-else="1" class="o_value" t-esc="getFormattedValue(cell)"/>
                                </t>
                            </td>
                        </t>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    `);
registerTemplate("web.PivotMeasure", `/web/static/src/views/pivot/pivot_renderer.xml`, `<t t-name="web.PivotMeasure" xml:space="preserve">
        <th class="bg-view text-muted text-center text-nowrap fw-normal" t-att-colspan="cell.width" t-att-rowspan="cell.height" t-att-class="{                 'o_pivot_origin_row cursor-pointer user-select-none': cell.originIndexes,                 'o_pivot_measure_row cursor-pointer user-select-none': !cell.originIndexes,                 o_pivot_sort_order_asc: cell.order === 'asc',                 o_pivot_sort_order_desc: cell.order === 'desc',             }" t-on-click.prevent="() =&gt; this.onMeasureClick(cell)" t-on-mouseover="onMouseEnter" t-on-mouseout="onMouseLeave">
            <t t-esc="cell.title"/>
            <i t-if="cell.order === 'asc' || cell.order ==='desc'" t-attf-class="fa fa-caret-{{ cell.order === 'asc' ? 'up' : 'down' }} ms-1"/>
        </th>
    </t>

`);
registerTemplate("mail.ActivityCell", `/mail/static/src/views/web/activity/activity_cell.xml`, `<t t-name="mail.ActivityCell" xml:space="preserve">
        <div class="h-100 cursor-pointer p-1 d-flex flex-column justify-content-between" t-on-click="onClick">
            <div class="d-flex align-items-center justify-content-center position-relative" t-ref="content">
                <div class="o-mail-ActivityCell-deadline" t-out="reportingDateFormatted"/>
            </div>
            <div class="d-flex justify-content-between">
                <div t-if="props.userAssignedIds" class="d-flex justify-content-start">
                    <Avatar t-if="props.userAssignedIds.length &gt; 0" resModel="'res.users'" resId="props.userAssignedIds[0]" displayName="''" noSpacing="true"/>
                    <Avatar t-if="props.userAssignedIds.length &gt; 1" resModel="'res.users'" resId="props.userAssignedIds[1]" displayName="''" noSpacing="true"/>
                    <t t-set="nAdditionalAssignee" t-value="props.userAssignedIds.length - 2"/>
                    <span t-if="nAdditionalAssignee &gt; 0">+<t t-out="nAdditionalAssignee"/></span>
                </div>
                <div t-else=""/>
                <div t-if="props.attachmentsInfo and ongoingActivityCount == 0" class="d-flex w-100 justify-content-center gap-1 px-2">
                    <a t-attf-href="/web/content/#{props.attachmentsInfo.most_recent_id}?download=true" t-on-click.stop="" t-out="props.attachmentsInfo.most_recent_name" class="d-inline-block text-truncate" style="max-width: 120px;"/>
                    <div t-if="props.attachmentsInfo.count &gt; 1" class="text-nowrap">
                        +<t t-out="props.attachmentsInfo.count - 1"/>
                    </div>
                </div>
                <div t-if="totalActivityCount &gt; 1" class="o-mail-ActivityCell-counter badge bg-light rounded-pill border-0 m-1">
                    <t t-if="totalActivityCount == ongoingActivityCount or ongoingActivityCount == 0" t-out="totalActivityCount"/>
                    <t t-else="">
                        <t t-out="ongoingActivityCount"/> / <t t-out="totalActivityCount"/>
                    </t>
                </div>
                <div t-else=""/>
            </div>
        </div>
    </t>

`);
registerTemplate("mail.ActivityController", `/mail/static/src/views/web/activity/activity_controller.xml`, `<t t-name="mail.ActivityController" xml:space="preserve">
        <div t-att-class="props.className + (ui.isSmall ? ' o_action_delegate_scroll': '')">
            <Layout display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar/>
                </t>
                <t t-component="props.Renderer" t-props="rendererProps"/>
            </Layout>
        </div>
    </t>
`);
registerTemplate("mail.ActivityRecord", `/mail/static/src/views/web/activity/activity_record.xml`, `<t t-name="mail.ActivityRecord" xml:space="preserve">
    <td class="o_activity_record p-2 cursor-pointer" t-on-click="() =&gt; this.props.openRecord(this.props.record)">
        <t t-call="{{ recordTemplate }}" t-call-context="this.getRenderingContext()"/>
    </td>
</t>

`);
registerTemplate("mail.ActivityViewHeader", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<t t-name="mail.ActivityViewHeader" xml:space="preserve">
    <thead>
        <tr>
            <th/>
            <th t-foreach="activeColumns" t-as="type" t-key="type.id" class="o_activity_type_cell p-3" t-attf-class="{{ activeFilter.activityTypeId === type.id ? 'o_activity_filter_' + activeFilter.progressValue.active : '' }}" t-attf-width="{{100/activeColumns.length}}%">
                <div>
                    <span t-esc="type.name"/>
                    <span t-if="type.template_ids.length &gt; 0" class="dropdown float-end">
                        <i class="fa fa-ellipsis-v fa-fw" data-bs-toggle="dropdown"/>
                        <div class="dropdown-menu">
                            <t t-foreach="type.template_ids" t-as="template" t-key="template.id">
                                <div data-tooltip="This action will send an email." class="o_template_element o_send_mail_template cursor-pointer" t-on-click="() =&gt; props.onSendMailTemplate(template.id, type.id)">
                                    <i class="fa fa-envelope fa-fw"/> <t t-esc="template.name"/>
                                </div>
                            </t>
                        </div>
                    </span>
                </div>
                <div class="o_activity_counter d-flex align-items-center justify-content-between mb-3 h-0 mt24">
                    <t t-set="group" t-value="getGroupInfo(type)"/>
                    <ColumnProgress t-if="group.data.count" group="group.data" aggregate="group.aggregate" aggregateOn="group.aggregateOn" progressBar="group.data.progressBar" onBarClicked.bind="group.data.filterProgressValue"/>
                </div>
            </th>
            <th class="align-middle" style="width: 32px; min-width: 32px">
                <div class="o_optional_columns_dropdown text-center border-top-0">
                    <Dropdown position="'bottom-end'">
                        <button class="btn p-0" tabindex="-1">
                            <i class="o_optional_columns_dropdown_toggle oi oi-fw oi-settings-adjust"/>
                        </button>

                        <t t-set-slot="content">
                            <t t-foreach="props.activityTypes" t-as="type" t-key="type_index">
                                <DropdownItem closingMode="'none'" onSelected="() =&gt; this.toggleDisplayColumn(type.id)">
                                    <CheckBox onChange="() =&gt; this.toggleDisplayColumn(type.id)" value="storageActiveColumns[type.id]" name="type.name">
                                        <t t-esc="type.name"/>
                                    </CheckBox>
                                </DropdownItem>
                            </t>
                        </t>
                    </Dropdown>
                </div>
            </th>
        </tr>
    </thead>
</t>

`);
registerTemplate("mail.ActivityViewBody", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<t t-name="mail.ActivityViewBody" xml:space="preserve">
    <tbody>
        <t t-foreach="props.activityResIds" t-as="resId" t-key="resId">
            <t t-call="mail.ActivityViewRow"/>
        </t>
    </tbody>
</t>

`);
registerTemplate("mail.ActivityViewRow", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<t t-name="mail.ActivityViewRow" xml:space="preserve">
    <t t-set="record" t-value="getRecord(resId)"/>
    <t t-if="record">
        <tr class="o_data_row h-100" t-attf-class="{{ activeFilter.resIds.has(resId) ? 'o_activity_filter_' + activeFilter.progressValue.active : '' }}">
                <ActivityRecord archInfo="props.archInfo" record="record" openRecord="props.openRecord"/>
                <t t-foreach="activeColumns" t-as="type" t-key="type.id">
                    <t t-call="mail.ActivityViewCell"/>
                </t>
            <td/>
        </tr>
    </t>
</t>

`);
registerTemplate("mail.ActivityViewCell", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<t t-name="mail.ActivityViewCell" xml:space="preserve">
    <t t-set="activityGroup" t-value="props.groupedActivities[resId] and props.groupedActivities[resId][type.id] or {count: 0, ids: [], state: false}"/>
    <t t-set="isCellHidden" t-value="!activeFilter.resIds.has(resId) and activeFilter.activityTypeId === type.id"/>
    <td t-if="activityGroup.state and !isCellHidden" t-attf-class="o_activity_summary_cell p-0 h-100 {{activityGroup.state}} {{ activeFilter.resIds.has(resId) ? 'o_activity_filter_' + activeFilter.progressValue.active : '' }}">
        <ActivityCell activityIds="activityGroup.ids" activityTypeId="type.id" attachmentsInfo="activityGroup.attachments_info" reportingDate="activityGroup.reporting_date" countByState="activityGroup.count_by_state" reloadFunc="props.onReloadData" resId="record.resId" resModel="record.resModel" userAssignedIds="activityGroup.user_assigned_ids"/>
    </td>
    <td t-else="" class="o_activity_summary_cell o_activity_empty_cell cursor-pointer" t-attf-class="{{ activeFilter.resIds.has(resId) ? 'o_activity_filter_' + activeFilter.progressValue.active : '' }}" t-on-click.prevent.stop="() =&gt; props.onEmptyCell(resId, type.id)">
        <i data-tooltip="Create" class="text-center fa fa-plus mt-2 align-items-center justify-content-center h-100"/>
    </td>
</t>

`);
registerTemplate("mail.ActivityViewFooter", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<t t-name="mail.ActivityViewFooter" xml:space="preserve">
    <tfoot>
        <tr class="o_data_row">
            <td class="p-3" colspan="3">
                <span class="btn btn-link o_record_selector cursor-pointer" t-on-click.prevent.stop="props.scheduleActivity">
                    <i class="fa fa-plus pe-2"/> Schedule activity
                </span>
            </td>
        </tr>
    </tfoot>
</t>

`);
registerTemplate("mail.ActivityRenderer", `/mail/static/src/views/web/activity/activity_renderer.xml`, `<div t-name="mail.ActivityRenderer" class="o_activity_view h-100" xml:space="preserve">
    <t t-if="!props.activityTypes.length" t-call="web.NoContentHelper"/>
    <table t-else="" class="table table-bordered mb-5 bg-view o_activity_view_table">
        <t t-call="mail.ActivityViewHeader"/>
        <t t-call="mail.ActivityViewBody"/>
        <t t-call="mail.ActivityViewFooter"/>
    </table>
</div>

`);
registerTemplate("hr.GraphView", `/hr/static/src/views/hr_graph_controller.xml`, `<t t-name="hr.GraphView" t-inherit="web.GraphView" xml:space="preserve">
        <t t-call="web.ActionHelper" position="replace">
            <t t-if="!model.hasData() or model.useSampleModel and props.info.noContentHelp">
                <HrActionHelper noContentTitle.translate="No Data" noContentParagraph.translate="This report gives you an overview of your employees based on the measures of your choice."/>
            </t>
        </t>
    </t>
`);
registerTemplate("hr.PivotView", `/hr/static/src/views/hr_pivot_controller.xml`, `<t t-name="hr.PivotView" t-inherit="web.PivotView" xml:space="preserve">
        <t t-call="web.ActionHelper" position="replace">
            <t t-if="!model.hasData() or model.useSampleModel and props.info.noContentHelp">
                <HrActionHelper noContentTitle.translate="No Data" noContentParagraph.translate="This report gives you an overview of your employees based on the measures of your choice."/>
            </t>
        </t>
    </t>
`);
registerTemplate("project.BurndownChartView.Buttons", `/project/static/src/views/burndown_chart/burndown_chart_view.xml`, `<t t-name="project.BurndownChartView.Buttons" t-inherit="web.GraphView.Buttons" t-inherit-mode="primary" xml:space="preserve">
        <xpath expr="//button[@data-mode='pie']" position="replace">
        </xpath>
        <xpath expr="//div[@role='toolbar'][@name='toggleOrderToolbar']" position="replace">
        </xpath>
    </t>

`);
registerTemplate("web_gantt.GanttConnector", `/web_gantt/static/src/gantt_connector.xml`, `<t t-name="web_gantt.GanttConnector" xml:space="preserve">
        <t t-set="xmlAttributes" t-value="{ version: '1.1', xmlns: 'http://www.w3.org/2000/svg' }"/>
        <svg t-if="sourcePoint and targetPoint" t-ref="root" t-att-data-connector-id="id" class="o_gantt_connector position-absolute start-0 top-0 w-100 h-100" t-att-class="{ o_connector_highlighted: highlighted }" pointer-events="none" t-att="xmlAttributes">
            <t t-set="strokeColor" t-value="style.stroke.color"/>
            <t t-set="outlineStrokeColor" t-value="style.outlineStroke.color"/>

            <defs>
                <marker t-att-id="id" markerHeight="6" markerWidth="6" markerUnits="strokeWidth" orient="auto" refX="9" refY="6" stroke-linejoin="round" viewBox="0 0 12 12">
                    <t t-call="web_gantt.ConnectorStrokeHead">
                        <t t-set="color" t-value="strokeColor"/>
                        <t t-set="width" t-value="style.stroke.width"/>
                    </t>
                </marker>
            </defs>

            <t t-call="web_gantt.ConnectorStroke">
                <t t-set="class" t-value="'o_connector_stroke_hover_ease'"/>
                <t t-set="color" t-value="transparent"/>
                <t t-set="width" t-value="style.stroke.width + style.hoverEaseWidth + style.outlineStroke.width"/>
            </t>
            <t t-if="style.outlineStroke.width gt 0">
                <t t-call="web_gantt.ConnectorStroke">
                    <t t-set="class" t-value="'o_connector_stroke_outline'"/>
                    <t t-set="color" t-value="outlineStrokeColor"/>
                    <t t-set="width" t-value="style.stroke.width + style.outlineStroke.width"/>
                </t>
            </t>
            <t t-call="web_gantt.ConnectorStroke">
                <t t-set="class" t-value="'o_connector_stroke'"/>
                <t t-set="color" t-value="strokeColor"/>
                <t t-set="markerEnd" t-value="id"/>
                <t t-set="width" t-value="style.stroke.width"/>
            </t>

            <t t-if="displayButtons">
                <svg class="o_connector_stroke_buttons" width="48" height="16" pointer-events="all" viewBox="0 0 1536 512" t-att="xmlAttributes">
                    <rect fill="transparent" x="0" y="0" width="1536" height="512"/>
                    <g class="o_connector_stroke_button o_connector_stroke_reschedule_button" t-on-click.stop="onLeftButtonClick">
                        <rect fill="white" x="20" y="20" width="472" height="472" rx="236" ry="236"/>
                        <g pointer-events="none">
                            <line x1="192" y1="256" x2="320" y2="128" stroke-width="56"/>
                            <line x1="192" y1="256" x2="320" y2="384" stroke-width="56"/>
                        </g>
                    </g>
                    <g class="o_connector_stroke_button o_connector_stroke_remove_button" t-on-click.stop="onRemoveButtonClick">
                        <rect fill="white" x="532" y="20" width="472" height="472" rx="236" ry="236"/>
                        <g transform="rotate(45,768,256)" pointer-events="none">
                            <rect x="740" y="100" fill="rgb(221, 60, 79)" width="56" height="312"/>
                            <rect x="612" y="228" fill="rgb(221, 60, 79)" width="312" height="56"/>
                        </g>
                    </g>
                    <g class="o_connector_stroke_button o_connector_stroke_reschedule_button" t-on-click.stop="onRightButtonClick">
                        <rect fill="white" x="1044" y="20" width="472" height="472" rx="236" ry="236"/>
                        <g pointer-events="none">
                            <line x1="1216" y1="128" x2="1344" y2="256" stroke-width="56"/>
                            <line x1="1216" y1="384" x2="1344" y2="256" stroke-width="56"/>
                        </g>
                    </g>
                </svg>
            </t>
        </svg>
    </t>

    `);
registerTemplate("web_gantt.ConnectorStroke", `/web_gantt/static/src/gantt_connector.xml`, `<t t-name="web_gantt.ConnectorStroke" xml:space="preserve">
        <path fill="none" t-att-stroke="color" t-att-stroke-width="width" t-att-class="class" t-att-marker-end="markerEnd ? \`url(#\${markerEnd})\` : false" t-att-pointer-events="isNew ? 'none' : 'stroke'"/>
    </t>

    `);
registerTemplate("web_gantt.ConnectorStrokeHead", `/web_gantt/static/src/gantt_connector.xml`, `<t t-name="web_gantt.ConnectorStrokeHead" xml:space="preserve">
        <path d="M2,2 L10,6 L2,10 L6,6 L2,2" class="o_connector_stroke_head" t-att-fill="color" t-att-stroke="color" t-att="xmlAttributes"/>
    </t>

`);
registerTemplate("web_gantt.GanttController", `/web_gantt/static/src/gantt_controller.xml`, `<t t-name="web_gantt.GanttController" xml:space="preserve">
        <div t-att-class="className" t-ref="root">
            <Layout className="model.useSampleModel ? 'o_view_sample_data' : ''" display="props.display">
                <t t-set-slot="control-panel-create-button">
                    <button t-if="model.metaData.canCreate" class="o_gantt_button_add btn btn-primary" data-hotkey="r" t-on-click="onAddClicked">
                        New
                    </button>
                </t>
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-buttons">
                    <t t-call="{{ props.buttonTemplate }}"/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-set-slot="default" t-slot-scope="layout">
                    <t t-if="showNoContentHelp">
                        <t t-if="props.info.noContentHelp" t-call="web.ActionHelper">
                            <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                        </t>
                        <t t-else="" t-call="web.NoContentHelper"/>
                    </t>
                    <t t-component="props.Renderer" class="model.useSampleModel ? 'o_sample_data_disabled' : ''" model="model" arch="props.arch" create.bind="create" openDialog.bind="openDialog" scrollPosition="props.scrollPosition" contentRef="layout.contentRef"/>
                </t>
            </Layout>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttView.Buttons", `/web_gantt/static/src/gantt_controller.xml`, `<t t-name="web_gantt.GanttView.Buttons" xml:space="preserve">
        <div class="d-flex flex-wrap o_gantt_buttons_container">
        </div>
    </t>

`);
registerTemplate("web_gantt.GanttPopover", `/web_gantt/static/src/gantt_popover.xml`, `<t t-name="web_gantt.GanttPopover" xml:space="preserve">
        <div t-ref="root" style="max-width: 320px;"> 
            <div class="popover-header d-flex justify-content-between py-2 pe-2">
                <h4 class="p-0 pt-1">
                    <t t-esc="props.title"/>
                </h4>
                <span class="ms-4 mt-1 me-2 cursor-pointer" t-on-click.stop="props.close">
                    <i class="fa fa-close"/>
                </span>
            </div>
            <div class="popover-body">
                <t t-call="{{ templates.body }}" t-call-context="renderingContext"/>
            </div>
            <div t-if="(props.displayGenericButtons and props.buttons) or templates.footer" class="popover-footer border-top p-3 d-flex flex-wrap gap-1">
                <t t-if="props.displayGenericButtons and props.buttons">
                    <t t-foreach="props.buttons" t-as="button" t-key="button_index">
                        <button t-att-class="button.class" t-on-click="() =&gt; this.onClick(button)" t-esc="button.text"/>
                    </t>
                </t>
                <t t-if="templates.footer">
                    <t t-call="{{ templates.footer }}" t-call-context="renderingContext"/>
                </t>
            </div>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttPopover.default", `/web_gantt/static/src/gantt_popover.xml`, `<t t-name="web_gantt.GanttPopover.default" xml:space="preserve">
        <ul class="p-0 mb-0 list-unstyled">
            <li class="pe-2">
                <strong>Name</strong>: <span t-esc="name"/>
            </li>
            <li class="pe-2">
                <strong>Start</strong>: <span t-esc="start"/>
            </li>
            <li class="pe-2">
                <strong>Stop</strong>: <span t-esc="stop"/>
            </li>
        </ul>
    </t>

`);
registerTemplate("web_gantt.GanttPopoverInDialog", `/web_gantt/static/src/gantt_popover_in_dialog.xml`, `<t t-name="web_gantt.GanttPopoverInDialog" xml:space="preserve">
      <Dialog title="props.dialogTitle" footer="false">
          <t t-component="props.component" t-props="componentProps"/>
      </Dialog>
    </t>
`);
registerTemplate("web_gantt.GanttRenderer", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer" xml:space="preserve">
        <GanttRendererControls t-props="controlsProps"/>
        <div t-ref="grid" class="o_gantt_renderer o_renderer bg-view" t-att-class="{ o_has_row_headers: hasRowHeaders, 'pe-auto': isDragging }" t-att-style="getGridStyle()" t-on-pointermove="throttledComputeHoverParams" t-on-pointerleave="onPointerLeave">
            <t t-call="{{ constructor.headerTemplate }}"/>
            <t t-if="hasRowHeaders">
                <div class="o_gantt_row_headers o_gantt_row_sidebar o_gantt_grid_rows border-end position-sticky start-0 bg-view">
                    <t t-foreach="rowsToRender" t-as="row" t-key="row.id">
                        <t t-call="{{ constructor.rowHeaderTemplate }}"/>
                    </t>
                </div>
            </t>
            <div t-ref="cellContainer" class="o_gantt_cells o_gantt_grid_rows o_gantt_grid_columns position-relative">
                <t t-foreach="rowsToRender" t-as="row" t-key="row.id">
                    <t t-call="{{ constructor.rowContentTemplate }}"/>
                </t>
                <t t-foreach="pillsToRender" t-as="pill" t-key="pill.id">
                    <t t-set="row" t-value="getRowFromPill(pill)"/>
                    <t t-if="row.isGroup">
                        <t t-call="{{ constructor.groupPillTemplate }}"/>
                    </t>
                    <t t-else="">
                        <t t-call="{{ constructor.pillTemplate }}"/>
                    </t>
                </t>
                <t t-if="shouldRenderConnectors()">
                    <t t-foreach="connectorsToRender" t-as="connector" t-key="connector.id">
                        <GanttConnector reactive="connector" onRemoveButtonClick="() =&gt; this.onRemoveButtonClick(connector.id)" onLeftButtonClick="() =&gt; this.onRescheduleButtonClick('backward', connector.id)" onRightButtonClick="() =&gt; this.onRescheduleButtonClick('forward', connector.id)"/>
                    </t>
                </t>
                <GanttResizeBadge reactive="resizeBadgeReactive"/>
            </div>
            <t t-if="totalRow">
                <t t-call="{{ constructor.totalRowTemplate }}"/>
            </t>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.Header", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.Header" xml:space="preserve">
        <t t-if="hasRowHeaders">
            <b class="o_gantt_title d-flex align-items-center justify-content-center bg-100 position-sticky start-0 p-2 border-end" t-esc="model.metaData.string"/>
        </t>
        <div class="o_gantt_header_groups o_gantt_grid_columns bg-100 position-sticky">
            <t t-foreach="columnsGroups" t-as="column" t-key="column.id">
                <div class="o_gantt_header_title position-sticky d-flex align-items-center ps-2 overflow-hidden bg-100" t-att-style="getGridPosition({column: column.grid.column})">
                    <t t-esc="model.metaData.scale.groupHeaderFormatter(column.start, env)"/>
                </div>
            </t>
        </div>
        <div class="o_gantt_header_columns o_gantt_grid_columns bg-view position-sticky">
            <t t-foreach="columns" t-as="column" t-key="column.id">
                <div class="o_gantt_header_cell d-flex align-items-center justify-content-center py-2" t-att-class="{ o_gantt_today: column.isToday, 'bg-100': !column.isToday }" t-att-style="getGridPosition({column: column.grid.column})">
                    <t t-if="'colHeaderFormatter' in model.metaData.scale">
                        <t t-esc="model.metaData.scale.colHeaderFormatter(column.start, env)"/>
                    </t>
                    <small t-else="" class="text-center">
                        <t t-if="is24HourFormat">
                            <b t-esc="column.start.toFormat('H')"/>
                        </t>
                        <t t-else="">
                            <b t-esc="column.start.toFormat('h')"/>
                            <div class="d-xl-inline-block" t-esc="column.start.toFormat('a').toLowerCase()"/>
                        </t>
                    </small>
                </div>
            </t>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.ConnectorCreator", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.ConnectorCreator" xml:space="preserve">
        <div class="o_connector_creator_wrapper position-absolute w-100" t-attf-class="o_connector_creator_wrapper_{{ alignment.vertical }} {{ '_color' in pill ? 'o_gantt_color_' + pill._color : '' }}">
            <div class="o_connector_creator position-absolute" t-attf-class="o_connector_creator_{{ alignment.vertical }} o_connector_creator_{{ alignment.horizontal }}">
                <div class="o_connector_creator_bullet position-absolute rounded-circle"/>
            </div>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.RowHeader", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.RowHeader" xml:space="preserve">
        <div class="o_gantt_row_header o_gantt_row_sidebar position-sticky start-0 bg-view align-items-center" t-att-class="{                 o_sample_data_disabled: isDisabled(row),                 o_gantt_row_sidebar_empty: !row.name,                 o_gantt_group: row.isGroup,                 o_gantt_hoverable: isHoverable(row),                 o_mobile_progress_bar: row.progressBar and isTouchDevice,                 o_group_open: !model.isClosed(row.id),             }" t-att-style="getGridPosition({ row: row.grid.row })" t-att-data-row-id="row.id" t-on-click.synthetic="() =&gt; row.isGroup ? this.model.toggleRow(row.id) : this.focusFirstPill(row.id)">
            <div class="o_gantt_row_title d-flex align-items-center h-100 w-100 pe-1" t-att-class="{ 'fw-bold': row.isGroup }" t-att-style="getRowTitleStyle(row)" t-att-title="row.name or ''">
                <i t-if="row.isGroup" t-attf-class="o_group_caret fa fa-fw me-1 fa-caret-{{ model.isClosed(row.id) ? 'right' : 'down' }}"/>
                <span t-if="row.thumbnailUrl and row.resId" class="o_gantt_row_thumbnail_wrapper" t-att-class="{ 'me-1' : row.isGroup }">
                    <img t-att-src="row.thumbnailUrl" class="o_gantt_row_thumbnail o_avatar rounded"/>
                </span>
                <span class="text-truncate w-0 flex-grow-1">
                    <t t-esc="row.name"/>
                </span>
            </div>
            <t t-if="row.progressBar">
                <GanttRowProgressBar t-props="getProgressBarProps(row)"/>
            </t>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.RowContent", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.RowContent" xml:space="preserve">

        <t t-foreach="columns" t-as="column" t-key="column.id">
            <t t-set="col" t-value="column.grid.column[0]"/>
            <div class="o_gantt_cell" t-att-class="ganttCellAttClass(row, column)" t-attf-style="{{ getGridPosition({ column: column.grid.column, row: row.grid.row }) }};{{ row.cellColors[column.id] || '' }}" t-att-data-row-id="row.id" t-att-data-col="col" t-on-click.synthetic="(ev) =&gt; row.isGroup ? this.model.toggleRow(row.id) : this.onCellClicked(row.id, col)"/>
        </t>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.Pill", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.Pill" xml:space="preserve">
        <t t-set="renderConnectors" t-value="shouldRenderRecordConnectors(pill.record)"/>
        <div class="o_gantt_pill_wrapper" t-att-class="{                 o_sample_data_disabled: isDisabled(row),                 o_draggable: !pill.disableDrag,                 o_undraggable: pill.disableDrag,                 o_resizable: !pill.disableStartResize or !pill.disableStopResize,                 'position-relative': renderConnectors             }" t-att-style="getGridPosition(pill.grid)" t-att-data-pill-id="pill.id">
            <t t-if="renderConnectors" t-call="{{ constructor.connectorCreatorTemplate }}">
                <t t-set="alignment" t-value="getConnectorCreatorAlignment('top')"/>
            </t>
            <div class="o_gantt_pill position-relative h-100 d-flex align-items-center" t-att-class="pill.className" t-on-click.synthetic="(ev) =&gt; this.onPillClicked(ev, pill)">
                <span t-if="pill._progress" class="position-absolute h-100 o_gantt_progress" t-attf-style="width:{{ pill._progress }}%;"/>
                <span class="o_gantt_pill_title text-truncate mx-1" t-esc="pill.displayName"/>
                <div t-if="pill.disableDrag" class="o_gantt_lock fa fa-lock ms-auto me-2"/>
            </div>
            <t t-if="renderConnectors" t-call="{{ constructor.connectorCreatorTemplate }}">
                <t t-set="alignment" t-value="getConnectorCreatorAlignment('bottom')"/>
            </t>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.GroupPill", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.GroupPill" xml:space="preserve">
        <div class="o_gantt_pill_wrapper o_gantt_group_pill align-items-center" t-att-class="{                 o_sample_data_disabled: isDisabled(row),                 o_group_open: !model.isClosed(row.id),             }" t-att-style="getGridPosition(pill.grid)">
            <div class="o_gantt_pill o_gantt_consolidated_pill position-relative overflow-visible" t-att-class="pill.className" t-att-title="pill.displayName">
                <span t-if="pill._progress" class="position-absolute h-100 o_gantt_progress" t-attf-style="width:{{ pill._progress }}%;"/>
            </div>
            <span class="o_gantt_pill_title bg-view text-truncate px-1 z-1" t-esc="pill.displayName"/>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRenderer.TotalRow", `/web_gantt/static/src/gantt_renderer.xml`, `<t t-name="web_gantt.GanttRenderer.TotalRow" xml:space="preserve">
        <t t-if="hasRowHeaders">
            <div class="o_gantt_row_total o_gantt_row_sidebar border-end position-sticky start-0 bg-view d-flex align-items-center justify-content-end">
                <h4 class="o_gantt_row_title pe-3 my-0 fw-bold" t-att-class="{ o_sample_data_disabled: isDisabled() }" t-att-title="totalRow.name" t-esc="totalRow.name"/>
            </div>
        </t>
        <div class="o_gantt_row_total o_gantt_grid_columns bg-view">
            <t t-foreach="columns" t-as="column" t-key="column.id">
                <div class="o_gantt_cell" t-att-class="{ o_gantt_today: column.isToday, o_sample_data_disabled: isDisabled() }" t-att-style="getGridPosition({ column: column.grid.column, row: [1, 2] })"/>
            </t>
            <t t-foreach="totalRow.pills" t-as="pill" t-key="pill.id">
                <div class="o_gantt_pill_wrapper position-relative p-0 h-100 d-flex align-items-end" t-att-class="{ o_sample_data_disabled: isDisabled() }" t-att-style="getGridPosition({ column: pill.grid.column, row: [1, 2] })">
                    <div class="o_gantt_pill o_gantt_consolidated_pill w-100 d-flex align-items-end justify-content-center" t-att-title="pill.displayName" t-attf-style="height: {{ totalRow.factor * pill.aggregateValue }}%;">
                        <span class="o_gantt_consolidated_pill_title bg-view text-truncate px-1 mb-1" t-att-class="{ 'o_gantt_consolidated_pill_small': this.isPillSmall(pill) }" t-esc="pill.displayName"/>
                    </div>
                </div>
            </t>
        </div>
    </t>

`);
registerTemplate("web_gantt.GanttRendererControls", `/web_gantt/static/src/gantt_renderer_controls.xml`, `<t t-name="web_gantt.GanttRendererControls" xml:space="preserve">
        <div class="o_gantt_renderer_controls d-inline-flex d-print-none flex-wrap column-gap-2 align-items-center w-100 bg-view border-bottom sticky-top start-0" t-att-class="{ 'p-1': !env.isSmall, 'gap-1 py-1': env.isSmall }">
            <t t-call="{{ constructor.rangeMenuTemplate }}"/>
            <hr t-if="env.isSmall" class="my-0 w-100"/>
            <button class="o_gantt_button_today btn btn-secondary" t-att-class="{ 'ms-3': env.isSmall }" title="Focus Today" data-hotkey="t" t-on-click="onTodayClicked">
                <i class="fa fa-crosshairs"/>
            </button>
            <button class="btn btn-secondary" t-att-disabled="state.scaleIndex === scalesRange.min" data-hotkey="j" t-on-click="() =&gt; this.incrementScale(-1)">
                <i class="fa fa-search-minus"/>
            </button>
            <input type="range" class="form-range flex-grow-1 w-0" t-att-min="scalesRange.min" t-att-max="scalesRange.max" step="1" t-att-value="state.scaleIndex" t-on-change="(ev) =&gt; this.selectScale(ev.target.value)"/>
            <button class="btn btn-secondary" t-att-disabled="state.scaleIndex === scalesRange.max" data-hotkey="i" t-on-click="() =&gt; this.incrementScale(1)">
                <i class="fa fa-search-plus"/>
            </button>
            <t t-if="env.isSmall">
                <div class="flex-grow-1 w-0"/>
                <Dropdown>
                    <button class="btn btn-secondary me-3" aria-label="Toolbar menu">
                        <i class="fa fa-cog"/>
                    </button>
                    <t t-set-slot="content">
                        <t t-call="{{ constructor.toolbarContentTemplate }}"/>
                    </t>
                </Dropdown>
            </t>
            <t t-else="" t-call="{{ constructor.toolbarContentTemplate }}"/>
        </div>
    </t>

    `);
registerTemplate("web_gantt.GanttRendererControls.ToolbarContent", `/web_gantt/static/src/gantt_renderer_controls.xml`, `<t t-name="web_gantt.GanttRendererControls.ToolbarContent" xml:space="preserve">
        <t t-if="!env.isSmall">
            <div class="btn-toolbar gap-2" role="toolbar" name="ganttToolbar">
                <button class="btn btn-secondary fa" t-att-class="{ 'fa-compress': model.displayParams.displayMode === 'sparse', 'fa-expand': model.displayParams.displayMode === 'dense'  }" t-att-title="model.displayParams.displayMode === 'dense' ? 'Activate sparse mode' : 'Activate dense mode'" t-on-click="model.toggleDisplayMode.bind(model)">
                </button>
                <div class="btn-group" t-att-class="{ invisible: !props.displayExpandCollapseButtons }" name="expandCollapseButtons">
                    <button class="o_gantt_button_expand_rows btn btn-secondary" title="Expand rows" t-on-click="model.expandRows.bind(model)">
                        <i class="fa fa-caret-square-o-right"/>
                    </button>
                    <button class="o_gantt_button_collapse_rows btn btn-secondary" title="Collapse rows" t-on-click="model.collapseRows.bind(model)">
                        <i class="fa fa-caret-square-o-down"/>
                    </button>
                </div>
            </div>
        </t>
        <t t-else="">
            <DropdownItem onSelected="model.toggleDisplayMode.bind(model)">
                <t t-if="model.displayParams.displayMode === 'dense'">
                    <i class="fa fa-fw fa-expand"/>
                    <span class="ms-1">Activate sparse mode</span>
                </t>
                <t t-else="">
                    <i class="fa fa-fw fa-compress"/>
                    <span class="ms-1">Activate dense mode</span>
                </t>
            </DropdownItem>
            <t t-if="props.displayExpandCollapseButtons">
                <div class="dropdown-divider" role="separator"/>
                <DropdownItem onSelected="model.expandRows.bind(model)">
                    <i class="fa fa-fw fa-caret-square-o-right"/>
                    <span class="ms-1">Expand rows</span>
                </DropdownItem>
                <DropdownItem onSelected="model.collapseRows.bind(model)">
                    <i class="fa fa-fw fa-caret-square-o-down"/>
                    <span class="ms-1">Collapse rows</span>
                </DropdownItem>
            </t>
        </t>
    </t>

    `);
registerTemplate("web_gantt.GanttRendererControls.RangeMenu", `/web_gantt/static/src/gantt_renderer_controls.xml`, `<t t-name="web_gantt.GanttRendererControls.RangeMenu" xml:space="preserve">
        <div class="btn-group" t-att-class="{ 'ms-3': env.isSmall }">
            <button class="btn btn-secondary" data-hotkey="p" t-on-click="() =&gt; this.selectRange('previous')">
                <i class="fa fa-arrow-left"/>
            </button>
            <button class="btn btn-secondary" data-hotkey="n" t-on-click="() =&gt; this.selectRange('next')">
                <i class="fa fa-arrow-right"/>
            </button>
        </div>
        <Dropdown state="dropdownState" menuClass="'o_gantt_range_menu'">
            <div class="btn btn-secondary">
                <i class="fa fa-calendar me-1"/>
                <t t-if="state.rangeId === 'custom'">
                    <t t-esc="\`From: \${getFormattedDate(state.startDate)} to: \${getFormattedDate(state.stopDate)}\`"/>
                </t>
                <t t-else="">
                    <t t-esc="dateDescription"/>
                </t>
            </div>
            <t t-set-slot="content">
                <t t-foreach="Object.entries(model.metaData.ranges)" t-as="range" t-key="range[0]">
                    <DropdownItem class="{ 'selected': isSelected(range[0]) }" onSelected="() =&gt; this.selectRangeId(range[0])">
                        <t t-esc="range[1].description"/>
                    </DropdownItem>
                </t>
                <div class="dropdown-divider"/>
                <DropdownItem class="{ 'o_gantt_range_custom_item py-0': true, 'selected': isSelected('custom') }" closingMode="'none'">
                    <div class="d-flex align-items-center gap-1">
                        <label>From </label>
                        <span class="o_gantt_picker o_input cursor-pointer px-1" t-ref="start-picker" t-on-click="() =&gt; startPicker.open()">
                            <t t-esc="getFormattedDate(pickerValues.startDate)"/>
                        </span>
                        <label>to </label>
                        <span class="o_gantt_picker o_input cursor-pointer px-1" t-ref="stop-picker" t-on-click="() =&gt; stopPicker.open()">
                            <t t-esc="getFormattedDate(pickerValues.stopDate)"/>
                        </span>
                        <button class="btn btn-sm btn-primary ms-1" t-on-click="onApply">Apply</button>
                    </div>
                </DropdownItem>
            </t>
        </Dropdown>
    </t>

`);
registerTemplate("web_gantt.GanttResizeBadge", `/web_gantt/static/src/gantt_resize_badge.xml`, `<t t-name="web_gantt.GanttResizeBadge" xml:space="preserve">
        <span t-if="props.reactive.position" class="o_gantt_pill_resize_badge badge rounded-pill bg-view position-fixed" t-att-class="{ 'text-success': diff &gt; 0, 'text-danger': diff &lt; 0 }" t-att-style="positionStyle" t-esc="diffText"/>
    </t>

`);
registerTemplate("web_gantt.GanttRowProgressBar", `/web_gantt/static/src/gantt_row_progress_bar.xml`, `<t t-name="web_gantt.GanttRowProgressBar" xml:space="preserve">
        <span class="o_gantt_progress_bar position-relative h-100 pe-none" t-att-class="\`o_gantt_group_\${status || 'none'}\`">
            <t t-if="props.progressBar.max_value gt 0">
                <span class="bg-opacity-25 position-absolute top-0 end-0 h-100" t-att-class="status and \`bg-\${status}\`" t-attf-style="width:{{ Math.min(props.progressBar.ratio, 100) }}%;"/>
                <span t-if="show" class="position-absolute top-0 end-0 h-100 d-flex align-items-center px-1" t-att-class="status ? \`text-bg-\${status}\` : 'bg-view'">
                    <span class="o_gantt_group_hours" t-esc="\`\${props.progressBar.value_formatted} / \${props.progressBar.max_value_formatted}\`"/>
                </span>
            </t>
            <t t-elif="show and props.progressBar.warning">
                <span class="o_gantt_group_hours position-absolute top-0 end-0 h-100 d-flex align-items-center px-1 pe-auto bg-view" t-attf-title="{{ props.progressBar.warning }}">
                    <t t-esc="props.progressBar.value_formatted"/>
                    <i class="fa fa-exclamation-triangle"/>
                </span>
            </t>
        </span>
    </t>
`);
registerTemplate("planning.PlanningEmployeeAvatar", `/planning/static/src/views/planning_gantt/planning_employee_avatar.xml`, `<t t-name="planning.PlanningEmployeeAvatar" t-inherit="mail.Avatar" xml:space="preserve">
        <xpath expr="//span[@t-esc='props.displayName']" position="attributes">
            <attribute name="t-ref">displayName</attribute>
        </xpath>
        <xpath expr="//div[hasclass('o-mail-Avatar')]" position="attributes">
            <attribute name="t-attf-class" add="{{ props.showPopover ? 'o_field_many2one_avatar' : '' }}" separator=" "/>
        </xpath>
        <xpath expr="//div[hasclass('o-mail-Avatar')]/img" position="attributes">
            <attribute name="t-on-click.stop.prevent">openCard</attribute>
            <attribute name="t-if">!props.isResourceMaterial</attribute>
            <attribute name="t-att-data-tooltip">props.displayName</attribute>
        </xpath>
        <xpath expr="//div[hasclass('o-mail-Avatar')]/img" position="after">
            <t t-if="props.isResourceMaterial">
                <div t-attf-class="o_colorlist_item_color_{{ props.resourceColor }} o_material_resource d-inline-flex flex-shrink-0 align-items-center justify-content-center me-1 rounded bg-200" t-on-click.stop.prevent="openCard">
                    <i class="fa fa-wrench"/>
                </div>
            </t>
        </xpath>
    </t>

`);
registerTemplate("planning.PlanningGanttView.Buttons", `/planning/static/src/views/planning_gantt/planning_gantt_controller.xml`, `<t t-name="planning.PlanningGanttView.Buttons" t-inherit="web_gantt.GanttView.Buttons" xml:space="preserve">
        <xpath expr="//div" position="inside">
            <div class="btn-group px-1">
                <div class="btn-group d-block">
                    <button t-if="model.metaData.canEdit" class="o_gantt_button_send_all btn btn-primary" title="Send schedule" data-hotkey="w" t-on-click="() =&gt; this.planningControllerActions.publish()">
                        Publish
                    </button>
                    <button t-if="env.isSmall and model.metaData.canCreate and model.metaData.scale.id === 'week' and model.metaData.rangeId === 'week'" class="o_gantt_button_copy_previous_week btn btn-link dropdown-item" title="Copy previous week" data-hotkey="c" t-on-click="() =&gt; this.planningControllerActions.copyPrevious()">
                        Copy previous week
                    </button>
                    <button t-if="env.isSmall and model.metaData.canCreate" class="o_gantt_button_auto_plan btn btn-link dropdown-item" title="Automatically plan open shifts and sales orders" data-hotkey="k" t-on-click="() =&gt; this.planningControllerActions.autoPlan()">
                        Auto Plan
                    </button>
                </div>
                <Dropdown t-if="!env.isSmall and model.metaData.canCreate">
                    <button class="btn btn-primary" data-hotkey="o">
                        <i class="fa fa-caret-down"/>
                    </button>
                    <t t-set-slot="content">
                        <DropdownItem t-if="model.metaData.scale.id === 'week' and model.metaData.rangeId === 'week'" class="'o_gantt_button_copy_previous_week btn btn-link dropdown-item'" onSelected="() =&gt; this.planningControllerActions.copyPrevious()" attrs="{ 'data-hotkey': 'c', 'title': 'Copy previous week' }">
                            Copy previous week
                        </DropdownItem>
                        <DropdownItem class="'o_gantt_button_auto_plan btn btn-link dropdown-item'" onSelected="() =&gt; this.planningControllerActions.autoPlan()" attrs="{ 'data-hotkey': 'k', 'title': 'Automatically plan open shifts and sales orders' }">
                            Auto Plan
                        </DropdownItem>
                    </t>
                </Dropdown>
            </div>
        </xpath>
    </t>

`);
registerTemplate("planning.PlanningGanttRenderer.RowHeader", `/planning/static/src/views/planning_gantt/planning_gantt_renderer.xml`, `<t t-name="planning.PlanningGanttRenderer.RowHeader" t-inherit="web_gantt.GanttRenderer.RowHeader" xml:space="preserve">
        <xpath expr="//t[@t-esc='row.name']" position="replace">
            <Avatar t-if="hasAvatar(row)" t-props="getAvatarProps(row)"/>
            <Material t-elif="hasMaterial(row)" t-props="getMaterialProps(row)"/>
            <t t-else="" t-esc="row.name"/>
        </xpath>
    </t>

    `);
registerTemplate("planning.PlanningGanttRenderer.Pill", `/planning/static/src/views/planning_gantt/planning_gantt_renderer.xml`, `<t t-name="planning.PlanningGanttRenderer.Pill" t-inherit="web_gantt.GanttRenderer.Pill" xml:space="preserve">
        <xpath expr="//div[hasclass('o_gantt_pill_wrapper')]" position="after">
            <t t-foreach="getSplitToolGrids(pill)" t-as="splitTool" t-key="splitTool_index">
                <div class="o_gantt_pill_split_tool" t-att-style="getGridPosition(splitTool.grid)" t-att-data-split-tool-pill-id="pill.id + '_' + splitTool_index" t-on-click.synthetic="(ev) =&gt; this.onPillSplitToolClicked(ev, pill, splitTool_index)">
                    <div class="o_slot_dashed_cut_line"/>
                    <i class="fa fa-lg fa-scissors fa-rotate-270"/>
                </div>
            </t>
        </xpath>
        <xpath expr="//span[hasclass('o_gantt_pill_title')]" position="after">
            <t t-if="pill.hasAvatar">
                <div class="ms-auto o_gantt_pill_avatar" t-att-title="pill.record.employee_id[1]">
                    <Avatar t-props="pill.avatarProps"/>
                </div>
            </t>
        </xpath>
    </t>

    `);
registerTemplate("planning.PlanningGanttRenderer.GroupPill", `/planning/static/src/views/planning_gantt/planning_gantt_renderer.xml`, `<t t-name="planning.PlanningGanttRenderer.GroupPill" t-inherit="web_gantt.GanttRenderer.GroupPill" owl="1" xml:space="preserve">
        <xpath expr="//div[contains(@class, 'o_gantt_group_pill')]/div" position="before">
            <t t-set="workHours" t-value="_computeWorkHours(pill)"/>
        </xpath>
        <xpath expr="//div[contains(@class, 'o_gantt_group_pill')]/div" position="attributes">
            <attribute name="t-attf-class" add="{{ _computeResourceOvertimeColors(pill, workHours) }}"/>
        </xpath>
        <xpath expr="//span[contains(@class, 'o_gantt_pill_title')]" position="attributes">
            <attribute name="t-esc">_computeDisplayName(pill, workHours)</attribute>
        </xpath>
    </t>

`);
registerTemplate("planning.PlanningGanttRendererControls.ToolbarContent", `/planning/static/src/views/planning_gantt/planning_gantt_renderer_controls.xml`, `<t t-name="planning.PlanningGanttRendererControls.ToolbarContent" t-inherit="web_gantt.GanttRendererControls.ToolbarContent" xml:space="preserve">
        <xpath expr="//div[@name='expandCollapseButtons']" position="after">
            <strong t-if="!env.isSmall" class="text-success d-flex justify-content-center align-items-center position-absolute top-0 end-0 h-100 bg-light px-3" t-att-class="{ invisible: !this.props.duplicateToolHelperReactive.shouldDisplay }">
                <i class="fa fa-lightbulb-o me-2"/>
                Press Ctrl to duplicate the shift
            </strong>
        </xpath>
    </t>

`);
registerTemplate("planning.PlanningGanttRowProgressBar", `/planning/static/src/views/planning_gantt/planning_gantt_row_progress_bar.xml`, `<t t-name="planning.PlanningGanttRowProgressBar" t-inherit="web_gantt.GanttRowProgressBar" xml:space="preserve">
        <xpath expr="//t[@t-if='props.progressBar.max_value gt 0']" position="replace">
            <t t-if="props.progressBar.max_value gt 0">

                <t t-if="props.progressBar.is_fully_flexible_hours">
                    <span t-if="show" class="position-absolute top-0 end-0 h-100 d-flex align-items-center px-1 o_gantt_group_hours" t-esc="props.progressBar.value_formatted" style="background-color: #fff; padding: 0 5px;"/>
                </t>

                <t t-else="">
                    <span class="bg-opacity-25 position-absolute top-0 end-0 h-100" t-att-class="status and \`bg-\${status}\`" t-attf-style="width:{{ Math.min(props.progressBar.ratio, 100) }}%;"/>
                    <span t-if="show" class="position-absolute top-0 end-0 h-100 d-flex align-items-center px-1" t-att-class="status ? \`text-bg-\${status}\` : 'bg-view'">
                        <span class="o_gantt_group_hours" t-esc="\`\${props.progressBar.value_formatted} / \${props.progressBar.max_value_formatted}\`"/>
                        <span class="ms-1">
                            (<span t-esc="props.progressBar.ratio_formatted"/>)
                        </span>
                    </span>
                </t>
            </t>
        </xpath>
    </t>

`);
registerTemplate("planning.PlanningMaterialRole", `/planning/static/src/views/planning_gantt/planning_material_role.xml`, `<t t-name="planning.PlanningMaterialRole" xml:space="preserve">
        <span class="text-truncate" t-esc="props.displayName" t-ref="displayName"/>
    </t>

`);
registerTemplateExtension("web.PivotRenderer", `/web_enterprise/static/src/views/pivot/pivot_renderer.xml`, `<t t-inherit="web.PivotRenderer" t-inherit-mode="extension" xml:space="preserve">
        <xpath expr="//div[hasclass('o_pivot')]" position="attributes">
            <attribute name="t-ref">root</attribute>
        </xpath>
    </t>

`);
registerTemplate("web_grid.FloatToggleGridCell", `/web_grid/static/src/components/float_toggle_grid_cell.xml`, `<t t-name="web_grid.FloatToggleGridCell" t-inherit="web_grid.Cell" xml:space="preserve">
        <xpath expr="//input" position="replace">
            <button t-if="state.edit" class="o_field_float_toggle" t-on-click="onChange" t-on-keydown="onKeyDown" t-ref="toggleButton">
                <t t-out="formattedValue"/>
            </button>
        </xpath>
    </t>
`);
registerTemplate("web_grid.Cell", `/web_grid/static/src/components/grid_cell.xml`, `<t t-name="web_grid.Cell" xml:space="preserve">
        <div t-if="props.reactive.cell" t-attf-class="{{ props.classNames }} o_grid_cell o_grid_highlightable position-relative d-flex justify-content-center align-items-center w-100 h-100 text-800" t-on-click.synthetic="onCellClick" t-ref="root">
            <button class="o_grid_search_btn btn btn-sm position-absolute start-0 px-1 opacity-50 opacity-100-hover" t-on-click.synthetic="() =&gt; this.magnifierGlassHook.onMagnifierGlassClick()">
                <i class="fa fa-search"/>
            </button>
            <div t-if="state.cell" class="d-flex w-100 h-100 justify-content-center align-items-center">
                <input t-if="state.edit" inputmode="numeric" type="text" class="o_input h-100" t-ref="numpadDecimal"/>
                <span t-else="" class="z-1" t-out="formattedValue"/>
            </div>
        </div>
    </t>
`);
registerTemplate("web_grid.GridComponent", `/web_grid/static/src/components/grid_component/grid_component.xml`, `<t t-name="web_grid.GridComponent" xml:space="preserve">
        <t t-component="gridComponent" t-props="gridComponentProps"/>
    </t>

`);
registerTemplate("web_grid.GridRow", `/web_grid/static/src/components/grid_row/grid_row.xml`, `<t t-name="web_grid.GridRow" xml:space="preserve">
        <div t-att-name="props.name" t-att-class="props.classNames" t-att-style="props.style">
            <span t-if="value" t-esc="value"/>
            <span t-else="" class="o_grid_no_data text-300">None</span>
        </div>
    </t>

`);
registerTemplate("web_grid.Many2OneGridRow", `/web_grid/static/src/components/many2one_grid_row/many2one_grid_row.xml`, `<t t-name="web_grid.Many2OneGridRow" xml:space="preserve">
        <div t-att-name="props.name" t-att-class="props.classNames" t-att-style="props.style">
            <t t-if="!props.canOpen and resId">
                <span>
                    <span t-esc="displayName" t-att-class="{'me-2': props.row.isAdditionalRow}"/>
                    <t t-foreach="extraLines" t-as="extraLine" t-key="extraLine_index">
                        <br/>
                        <span t-esc="extraLine"/>
                    </t>
                </span>
            </t>
            <t t-elif="resId">
                <a t-attf-class="o_form_uri" t-att-href="\`#id=\${resId}&amp;model=\${relation}\`" t-on-click.prevent="onClick">
                    <span t-esc="displayName" t-att-class="{'me-2': props.row.isAdditionalRow}"/>
                    <t t-foreach="extraLines" t-as="extraLine" t-key="extraLine_index">
                        <br/>
                        <span t-esc="extraLine"/>
                    </t>
                </a>
            </t>
            <span t-else="" class="o_grid_no_data text-300">None</span>
        </div>
    </t>

`);
registerTemplate("web_grid.Buttons", `/web_grid/static/src/views/grid_controller.xml`, `<t t-name="web_grid.Buttons" xml:space="preserve">
        <div class="d-flex o_grid_buttons">
            <div class="me-2" t-if="displayAddALine">
                <button class="btn btn-primary o_grid_button_add" type="button" t-on-click="() =&gt; this.createRecord()">
                    Add a Line
                </button>
            </div>
            <t t-call="web_grid.CustomButtons" t-if="props.archInfo.buttons.length"/>
        </div>
    </t>
    `);
registerTemplate("web_grid.CustomButtons", `/web_grid/static/src/views/grid_controller.xml`, `<t t-name="web_grid.CustomButtons" xml:space="preserve">
        <div class="o_grid_custom_buttons me-2">
            <t t-foreach="props.archInfo.buttons" t-as="button" t-key="button.id">
                <ViewButton t-if="!button.invisible" className="button.className" clickParams="button.clickParams" defaultRank="button.defaultRank" icon="button.icon" string="button.string" title="button.title" record="model.record"/>
            </t>
        </div>
    </t>
    `);
registerTemplate("web_grid.GridView", `/web_grid/static/src/views/grid_controller.xml`, `<t t-name="web_grid.GridView" xml:space="preserve">
        <div t-attf-class="o_grid_view {{ isMobile ? 'o_action_delegate_scroll' : '' }} {{props.className}}" t-ref="root">
            <Layout className="(model.useSampleModel ? 'o_view_sample_data' : '')" display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-buttons">
                    <t t-call="{{ props.buttonTemplate }}"/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-set-slot="default" t-slot-scope="layout">
                    <t t-if="displayNoContent">
                        <t t-call="web.ActionHelper">
                            <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                        </t>
                    </t>
                    <t t-if="hasDisplayableData">
                        <t t-component="props.Renderer" options="options" model="model" sections="model.sectionsArray" columns="columns" rows="model.itemsArray" sectionField="model.sectionField" rowFields="model.rowFields" measureField="props.archInfo.measureField" isEditable="isEditable" createInline="props.archInfo.activeActions.create and props.archInfo.createInline and !displayNoContent" createRecord.bind="createRecord" widgetPerFieldName="props.archInfo.widgetPerFieldName" openAction="props.archInfo.openAction" contentRef="layout.contentRef" ranges="model.ranges" state="state" toggleWeekendVisibility.bind="toggleWeekendVisibility"/>
                    </t>
                </t>
            </Layout>
        </div>
    </t>
`);
registerTemplate("web_grid.Renderer", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.Renderer" xml:space="preserve">
        <div class="o_grid_renderer position-relative z-0" t-ref="renderer">
            <div class="o_grid_grid d-grid gap-0 border-bottom bg-100" t-attf-style="grid-template-rows: {{ isMobile ? 'auto' : gridTemplateRows }}; grid-template-columns: {{ gridTemplateColumns }}" t-on-mouseover.stop="onMouseOver" t-on-mouseout.stop="onMouseOut">
                <t t-call="web_grid.Header"/>
                <t t-foreach="virtualRows" t-as="row" t-key="row.id">
                    <t t-if="row.isSection">
                        <t t-call="web_grid.Section"/>
                    </t>
                    <t t-else="">
                        <t t-call="web_grid.Row"/>
                        <t t-if="displayAddLine">
                            <t t-call="web_grid.AddLine"/>
                        </t>
                    </t>
                </t>
                <t t-if="props.createInline and !props.model.hasData()" t-call="web_grid.AddLine"/>
                <t t-call="web_grid.Footer"/>
                <t t-if="props.options.hasBarChartTotal" t-call="web_grid.barChart"/>
                <GridComponent t-props="hoveredCellProps"/>
                <GridComponent t-props="editCellProps"/>
            </div>
        </div>
    </t>
    `);
registerTemplate("web_grid.Header", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.Header" xml:space="preserve">
        <div class="o_grid_column_title o_grid_navigation_wrap position-md-sticky top-0 start-0 d-flex align-items-center gap-2 px-3 border-bottom bg-100 overflow-visible" t-attf-style="grid-row: {{rowsGap}}; grid-column: {{columnsGap}};">
            <t t-call="web_grid.NavigationButtons"/>
        </div>
        <div t-foreach="props.columns" t-as="column" t-key="column.id" class="o_grid_column_title position-relative position-md-sticky top-0 d-flex align-items-center justify-content-center px-3 py-2 border-bottom text-bg-100" t-att-class="{                 'fw-bolder': column.isToday,                 'fw-bold' : !column.isToday,                 'text-opacity-25' : getUnavailableClass(column) === 'o_grid_unavailable'              }" t-att-data-grid-row="rowsGap" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowsGap}}; grid-column: {{column_index + 1 + columnsGap}};">
            <div class="position-absolute top-0 start-0 w-100 h-100" t-att-class="{                     'o_grid_cell_overlay_today bg-info': column.isToday,                     'o_grid_cell_overlay bg-700' : !column.isToday,                  }" t-attf-class="{{getUnavailableClass(column)}}"/>
            <span class="z-1 text-center" t-out="column.title"/>
        </div>
        <div t-if="!props.options.hideLineTotal" class="o_grid_column_title o_grid_row_total position-md-sticky top-0 end-0 d-flex align-items-center justify-content-center text-bg-200 px-3 py-2 border-bottom fw-bold text-center" t-attf-style="grid-row: {{rowsGap}}; grid-column: {{props.columns.length + 1 + columnsGap}};">
            <span class="z-1" t-out="measureLabel"/>
        </div>
    </t>
    `);
registerTemplate("web_grid.Section", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.Section" xml:space="preserve">
        <t t-set="section" t-value="row"/>
        <t t-set="rowPosition" t-value="getRowPosition(section)"/>
        <t name="section" t-if="!section.isFake and (props.sections.length &gt; 1 or section.value)">
            <div class="o_grid_section o_grid_section_title o_grid_highlightable d-flex align-items-center ps-3 border-top bg-200 fw-bold" t-att-class="{                     'position-md-sticky start-0': !props.model.useSampleModel,                  }" t-att-data-grid-row="rowPosition" t-att-data-grid-column="columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{columnsGap}};">
            <div class="o_grid_cell_overlay position-absolute top-0 start-0 w-100 h-100 bg-700"/>
                <GridComponent classNames="'z-1 text-truncate'" name="props.sectionField.name" model="props.model" row="section" t-props="getFieldAdditionalProps(props.sectionField.name)"/>
            </div>
            <div t-foreach="props.columns" t-as="column" t-key="column.id" t-attf-class="o_grid_section o_grid_highlightable position-relative d-flex align-items-center justify-content-center fw-bold {{ getCellColorClass(column) }}" t-att-class="getSectionColumnsClasses(column, section)" t-att-data-row="section.id" t-att-data-column="column.id" t-att-data-grid-row="rowPosition" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{column_index + 1 + columnsGap}};">
                <div class="position-absolute top-0 start-0 w-100 h-100" t-att-class="{                        'o_grid_cell_overlay_today bg-info bg-opacity-25' : column.isToday,                        'o_grid_cell_overlay bg-700' : !column.isToday,                     }" t-attf-class="{{getUnavailableClass(column)}}"/>
                <div class="o_grid_cell_readonly position-relative d-flex justify-content-center align-items-center w-100 h-100">
                    <span class="z-1" t-att-class="getSectionCellsClasses(column, section)" t-out="formatValue(section.cells[column.id].value)"/>
                </div>
            </div>
            <t t-set="grandTotal" t-value="section.getGrandTotal(props.state.isWeekendVisible)"/>
            <div t-if="!props.options.hideLineTotal" class="o_grid_section o_grid_row_total o_grid_highlightable position-relative position-md-sticky end-0 z-1 d-flex align-items-center justify-content-center px-3 py-1 border-top fw-bold" t-att-class="getSectionTotalRowClass(section, grandTotal)" t-att-data-grid-row="rowPosition" t-att-data-grid-column="props.columns.length + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{props.columns.length + 1 + columnsGap}};">
                <div class="o_grid_cell_overlay_total position-absolute top-0 start-0 w-100 h-100 bg-900"/>
                <div class="position-relative d-flex align-items-center">
                    <span t-out="formatValue(grandTotal)"/>
                </div>
            </div>
        </t>
    </t>
    `);
registerTemplate("web_grid.Row", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.Row" xml:space="preserve">
        <t t-set="rowPosition" t-value="getRowPosition(row)"/>
        <t t-set="isEven" t-value="rowPosition % 2 !== 0"/>
        <div name="row" class="o_grid_row o_grid_row_title o_grid_highlightable position-relative d-flex flex-column flex-md-row justify-content-center justify-content-md-start align-items-md-center px-3 py-1" t-att-class="{                 'position-md-sticky start-0': !props.model.useSampleModel,                 'bg-view': isEven,                 'bg-100': !isEven,                 'fst-italic': row.isAdditionalRow,                 'text-opacity-25' : getUnavailableClass(row) === 'o_grid_unavailable'              }" t-att-data-grid-row="rowPosition" t-att-data-grid-column="columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{columnsGap}};">
            <div class="o_grid_cell_overlay position-absolute top-0 start-0 w-100 h-100 bg-700"/>
            <t t-set="rowFields" t-value="props.model.rowFields.map(field =&gt; field.name)"/>
            <t t-foreach="props.rowFields" t-as="rowField" t-key="rowField_index">
                <t t-set="fieldName" t-value="rowField.name"/>
                <GridComponent t-if="row.initialRecordValues[fieldName] or rowField_index === 0" classNames="\`d-flex z-1 text-truncate o_grid_field_\${fieldName.replace('_id','')}\${isMobile ? '' : ' text-nowrap'}\${row.isAdditionalRow ? ' pe-1' : ''}\`" name="fieldName" value="row.initialRecordValues[fieldName]" model="props.model" row="row" t-props="getFieldAdditionalProps(fieldName)"/>
                <span t-if="!rowField_last and row.initialRecordValues[props.rowFields[rowField_index + 1].name]" class="o_grid_row_data_separator d-none d-md-inline px-2 text-300">
                |
                </span>
            </t>
        </div>
        <div t-foreach="props.columns" t-as="column" t-key="column.id" class="o_grid_row o_grid_highlightable position-relative d-flex align-items-center justify-content-center" t-att-class="getCellsClasses(column, row, section, isEven)" t-att-data-row="row.id" t-att-data-column="column.id" t-att-data-grid-row="rowPosition" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{column_index + 1 + columnsGap}};" t-on-click.prevent.synthetic="onCellClick">
            <div class="position-absolute top-0 start-0 w-100 h-100" t-att-class="{                     'o_grid_cell_overlay_today bg-info bg-opacity-25' : column.isToday,                     'o_grid_cell_overlay bg-700' : !column.isToday,                  }" t-attf-class="{{getUnavailableClass(column)}}"/>
            <div class="o_grid_cell_readonly position-relative d-flex justify-content-center align-items-center w-100 h-100">
                <span t-att-class="{                           'text-900 text-opacity-25': row.cells[column.id].value === 0,                       }" t-esc="formatValue(row.cells[column.id].value)"/>
            </div>
        </div>
        <t t-set="grandTotal" t-value="row.getGrandTotal(props.state.isWeekendVisible)"/>
        <div t-if="!props.options.hideLineTotal" class="o_grid_row o_grid_row_total o_grid_highlightable position-relative position-md-sticky end-0 d-flex align-items-center justify-content-center px-3 py-1" t-att-class="{                 'fst-italic': row.isAdditionalRow,                 'text-bg-200': grandTotal &gt;= 0,                 'bg-danger text-bg-danger': grandTotal lt 0,                 'text-opacity-50': grandTotal === 0              }" t-att-data-grid-row="rowPosition" t-att-data-grid-column="props.columns.length + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{props.columns.length + 1 + columnsGap}};">
            <div class="o_grid_cell_overlay_total position-absolute top-0 start-0 w-100 h-100 bg-900"/>
            <span class="z-1" t-out="formatValue(grandTotal)"/>

        </div>
    </t>
    `);
registerTemplate("web_grid.AddLine", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.AddLine" xml:space="preserve">
        <t t-set="rowPosition" t-value="getRowPosition(row or undefined, true)"/>
        <t t-set="isEven" t-value="rowPosition % 2 !== 0"/>
        <div t-if="props.createInline" class="o_grid_row o_grid_add_line o_grid_add_line_first_cell position-md-sticky start-0 d-flex align-items-center z-1 ps-3" t-att-class="{                 'bg-view': isEven,                 'bg-100': !isEven,              }" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{columnsGap}};">
            <a class="btn btn-link o_text_overflow" t-on-click="() =&gt; this.onCreateInlineClick(row?.section)" data-hotkey="i">
               <i class="fa fa-plus-circle fs-4 me-1"/>Add a line
            </a>
        </div>
        <div t-foreach="props.columns" t-as="column" t-key="column.id" class="o_grid_row o_grid_add_line position-relative" t-att-class="{                    'o_grid_cell_today' : column.isToday,                    'bg-view': isEven,                 }" t-att-data-grid-row="rowPosition" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{column_index + 1 + columnsGap}};">
            <div class="position-absolute top-0 start-0 w-100 h-100" t-att-class="{                     'o_grid_cell_overlay_today bg-info bg-opacity-25' : column.isToday,                     'o_grid_cell_overlay bg-700' : !column.isToday,                  }" t-attf-class="{{getUnavailableClass(column)}}"/>
        </div>
        <div class="o_grid_add_line position-md-sticky end-0 text-bg-200" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{props.columns.length + 1 + columnsGap}};"/>
    </t>
    `);
registerTemplate("web_grid.Footer", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.Footer" xml:space="preserve">
        <t t-if="!props.options.hideColumnTotal">
            <t t-set="rowPosition" t-value="getTotalRowPosition()"/>
            <t t-set="isEven" t-value="rowPosition % 2 !== 0"/>
            <div class="" t-att-class="{                     'bg-view': isEven,                     'bg-100': !isEven,                     'z-1 position-md-sticky start-0': !props.model.useSampleModel,                  }" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{columnsGap}};"/>
            <t t-set="grandTotal" t-value="0"/>
            <div t-foreach="props.columns" t-as="column" t-key="column.id" class="o_grid_row o_grid_column_total o_grid_highlightable position-relative" t-att-class="{                     'bg-view': isEven and column.grandTotal &gt;= 0,                     'text-danger': column.grandTotal lt 0,                  }" t-att-data-grid-row="rowPosition" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{column_index + 1 + columnsGap}};">
                <div class="position-absolute top-0 start-0 w-100 h-100" t-att-class="{                         'o_grid_cell_overlay_today bg-info bg-opacity-25' : column.isToday,                         'o_grid_cell_overlay bg-700' : !column.isToday,                      }" t-attf-class="{{getUnavailableClass(column)}}"/>
                <t t-set="grandTotal" t-value="grandTotal + column.grandTotal"/>
                <div class="h-100 d-flex justify-content-center align-items-center" t-if="column.grandTotal !== 0">
                    <div class="o_grid_bar_chart_total_title">
                        <span class="fs-5 fw-bolder" t-att-class="{                                 'text-danger' : getUnavailableClass(column) === 'o_grid_unavailable' and column.grandTotal gt 0                               }">
                            <t t-esc="formatValue(column.grandTotal)"/>
                        </span>
                    </div>
                </div>
            </div>
            <div t-if="!props.options.hideLineTotal" t-att-data-grid-row="rowPosition" t-att-data-grid-column="props.columns.length + 1 + columnsGap" t-attf-class="o_grid_highlightable position-md-sticky end-0 d-flex align-items-center justify-content-center text-black fw-bold {{ getFooterTotalCellClasses(grandTotal) }}" t-attf-style="grid-row: {{rowPosition}}; grid-column: {{props.columns.length + 1 + columnsGap}};">
                <span>
                    <t t-esc="formatValue(grandTotal)"/>
                </span>
            </div>
        </t>
    </t>
    `);
registerTemplate("web_grid.barChart", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.barChart" xml:space="preserve">
        <t t-if="!props.options.hideColumnTotal">
            <t t-set="rowPosition" t-value="getTotalRowPosition()"/>
            <t t-set="isEven" t-value="(rowPosition + 1) % 2 !== 0"/>
            <div class="o_grid_row_barChart" t-att-class="{                     'bg-view': isEven,                     'bg-100': !isEven,                     'z-1 position-md-sticky start-0': !props.model.useSampleModel,                  }" t-attf-style="grid-row: {{rowPosition + 1}}; grid-column: {{columnsGap}};"/>
            <t t-set="grandTotal" t-value="0"/>
            <div t-foreach="props.columns" t-as="column" t-key="column.id" class="o_grid_row o_grid_column_total o_grid_highlightable o_grid_bar_chart_container" t-att-class="{'bg-view': isEven}" t-att-data-grid-row="rowPosition + 1" t-att-data-grid-column="column_index + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition + 1}}; grid-column: {{column_index + 1 + columnsGap}};">
                <t t-set="grandTotal" t-value="grandTotal + column.grandTotal"/>
                <div class="h-100 position-relative" t-if="column.grandTotal !== 0">
                    <div class="o_grid_bar_chart_total_pill position-absolute w-100 border-top border-primary border-2 bg-primary bg-opacity-50" t-if="props.options.hasBarChartTotal" t-att-style="getColumnBarChartHeightStyle(column)">
                    </div>
                </div>
            </div>
            <div t-if="!props.options.hideLineTotal" class="o_grid_row o_grid_column_total o_grid_row_total o_grid_highlightable position-md-sticky end-0 bg-200" t-att-data-grid-row="rowPosition + 1" t-att-data-grid-column="props.columns.length + 1 + columnsGap" t-attf-style="grid-row: {{rowPosition + 1}}; grid-column: {{props.columns.length + 1 + columnsGap}};">
                <div class="h-100 position-relative" t-if="grandTotal !== 0"/>
            </div>
        </t>
    </t>
    `);
registerTemplate("web_grid.NavigationButtons", `/web_grid/static/src/views/grid_renderer.xml`, `<t t-name="web_grid.NavigationButtons" xml:space="preserve">
        <div class="o_grid_navigation_buttons position-md-sticky d-flex gap-2" t-if="props.model.columnFieldIsDate">
            <button class="btn btn-secondary" data-hotkey="t" type="button" t-on-click="onTodayButtonClick">
                Today
            </button>
            <div class="btn-group">
                <button class="btn btn-secondary" type="button" t-on-click="onPreviousButtonClick" data-hotkey="p">
                    <span aria-label="Previous" class="oi oi-arrow-left" role="img" title="Previous"/>
                </button>
                <ViewScaleSelector t-if="rangesArray.length" scales="props.ranges" currentScale="props.state.activeRangeName" setScale.bind="onRangeClick" isWeekendVisible="props.state.isWeekendVisible" toggleWeekendVisibility="props.toggleWeekendVisibility"/>
                <button type="button" class="btn btn-secondary" t-on-click="onNextButtonClick" data-hotkey="n">
                    <span aria-label="Next" class="oi oi-arrow-right" role="img" title="Next"/>
                </button>
            </div>
        </div>
    </t>
`);
registerTemplate("hr.GanttEmployeeAvatar", `/hr_gantt/static/src/hr_gantt_employee_avatar.xml`, `<t t-name="hr.GanttEmployeeAvatar" t-inherit="mail.Avatar" xml:space="preserve">
        <xpath expr="//div[hasclass('o-mail-Avatar')]" position="attributes">
            <attribute name="class" add="o_field_many2one_avatar" separator=" "/>
        </xpath>
        <xpath expr="//div[hasclass('o-mail-Avatar')]/img" position="attributes">
            <attribute name="t-on-click.stop.prevent">openCard</attribute>
            <attribute name="t-att-data-tooltip">props.displayName</attribute>
        </xpath>
    </t>

`);
registerTemplate("hr.HrGanttRenderer.RowHeader", `/hr_gantt/static/src/hr_gantt_renderer.xml`, `<t t-name="hr.HrGanttRenderer.RowHeader" t-inherit="web_gantt.GanttRenderer.RowHeader" xml:space="preserve">
        <xpath expr="//t[@t-esc='row.name']" position="replace">
            <Avatar t-if="hasAvatar(row)" t-props="getAvatarProps(row)"/>
            <t t-else="" t-esc="row.name"/>
        </xpath>
    </t>

`);
registerTemplate("web_hierarchy.HierarchyCard", `/web_hierarchy/static/src/hierarchy_card.xml`, `<t t-name="web_hierarchy.HierarchyCard" xml:space="preserve">
        <div class="o_hierarchy_node_container mb-4 d-flex flex-column" t-att-class="classNames" t-att-data-node-id="props.node.id">
            <div class="o_hierarchy_node_button_container w-100 d-flex justify-content-end">
                <button t-if="props.node.parentResId !== false and !props.node.parentNode" name="hierarchy_search_parent_node" class="btn p-0" t-on-click.synthetic="onClickArrowUp">
                    <i class="fa fa-chevron-up"/>
                </button>
            </div>
            <div class="o_hierarchy_node w-100 h-100 d-flex flex-column justify-content-between border" t-att-class="{                     'border-bottom-0': props.node.nodes.length or props.node.canShowChildNodes,                 }" t-att-data-node-id="props.node.id" t-on-click.synthetic="onGlobalClick">
                <div class="o_hierarchy_node_content">
                    <Record resModel="props.node.model.resModel" resId="props.node.resId" fields="props.node.model.fields" activeFields="props.node.model.activeFields" values="props.node.data" t-slot-scope="data">
                        <t t-call="{{ templates['hierarchy-box'] }}" t-call-context="getRenderingContext(data)"/>
                    </Record>
                </div>
                <button t-if="props.node.nodes.length or props.node.canShowChildNodes" name="hierarchy_search_subsidiaries" class="o_hierarchy_node_button btn rounded-0 d-grid" t-att-class="{                             'btn-primary': !props.node.nodes.length,                             'btn-secondary': props.node.nodes.length &gt; 0,                         }" t-on-click.synthetic="onClickArrowDown">
                    <t t-if="!props.node.nodes.length">
                        <span style="grid-column: 2;">
                            Unfold
                        </span>
                        <span class="text-end" style="grid-column: 3;">
                            <t t-out="props.node.childResIds.length"/>
                            <i class="fa ps-1" t-att-class="props.archInfo.icon"/>
                        </span>
                    </t>
                    <t t-else="">
                        <span style="grid-column: 2;">
                            Fold
                        </span>
                    </t>
                </button>
            </div>
        </div>
    </t>

`);
registerTemplate("web_hierarchy.HierarchyButtons", `/web_hierarchy/static/src/hierarchy_controller.xml`, `<t t-name="web_hierarchy.HierarchyButtons" xml:space="preserve">
        <div class="d-flex o_grid_buttons">
            <div class="me-2" t-if="props.archInfo.activeActions.create and (!props.archInfo.createInline or displayNoContent)">
                <button class="btn btn-primary o_hierarchy_button_add" type="button" t-on-click="props.createRecord">
                    New
                </button>
            </div>
        </div>
    </t>
    `);
registerTemplate("web_hierarchy.HierarchyView", `/web_hierarchy/static/src/hierarchy_controller.xml`, `<t t-name="web_hierarchy.HierarchyView" xml:space="preserve">
        <div t-attf-class="o_hierarchy_view {{ isMobile ? 'o_action_delegate_scroll' : '' }} {{ props.className }}" t-ref="root">
            <Layout className="(model.useSampleModel ? 'o_view_sample_data' : '') + ' d-flex'" display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-buttons">
                    <t t-call="{{ props.buttonTemplate }}"/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-set-slot="default" t-slot-scope="layout">
                <t t-if="displayNoContent">
                    <t t-if="props.info.noContentHelp" t-call="web.ActionHelper">
                        <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                    </t>
                    <t t-else="" t-call="web.NoContentHelper"/>
                </t>
                    <t t-component="props.Renderer" model="model" openRecord.bind="openRecord" archInfo="props.archInfo" templates="props.archInfo.templateDocs"/>
                </t>
            </Layout>
        </div>
    </t>
`);
registerTemplate("web_hierarchy.HierarchyRenderer", `/web_hierarchy/static/src/hierarchy_renderer.xml`, `<t t-name="web_hierarchy.HierarchyRenderer" xml:space="preserve">
        <div class="o_hierarchy_renderer w-100 d-flex justify-content-center" t-ref="renderer">
            <div class="o_hierarchy_container d-flex flex-column w-100 w-lg-75 h-100 pt-5 px-2">
                <t t-foreach="rows" t-as="row" t-key="row_index">
                    <t t-set="previousRow" t-value="!row_first ? rows[row_index - 1] : null"/>
                    <t t-if="!row_first">
                        <div t-if="row.parentNode and previousRow.nodes.length &gt; 1" class="o_hierarchy_parent_node_container d-flex justify-content-center">
                            <span t-esc="row.parentNode.data.display_name || row.parentNode.data.name"/>
                        </div>
                        <div class="o_hierarchy_separator d-flex pb-4">
                            <div class="o_hierarchy_line_part o_hierarchy_line_left"/>
                            <div class="o_hierarchy_line_part o_hierarchy_line_right"/>
                        </div>
                    </t>
                    <div class="o_hierarchy_row row justify-content-center flex-wrap row-cols-2 row-cols-lg-5 g-2 g-lg-3 pt-3" t-att-class="{ 'pb-4': row_last }" t-att-data-parent-node-id="row.parentNode?.id" t-att-data-row-id="row_index">
                        <t t-foreach="row.nodes" t-as="node" t-key="node.id">
                            <HierarchyCard node="node" openRecord="props.openRecord" archInfo="props.archInfo" templates="props.templates"/>
                        </t>
                    </div>
                </t>
            </div>
        </div>
    </t>

`);
registerTemplate("hr_org_chart.HrEmployeeHierarchyCard", `/hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_card.xml`, `<t t-name="hr_org_chart.HrEmployeeHierarchyCard" t-inherit="web_hierarchy.HierarchyCard" xml:space="preserve">
        <xpath expr="//button[@name='hierarchy_search_subsidiaries']" position="attributes">
            <attribute name="class" separator=" " remove="d-grid"/>
            <attribute name="class" separator=" " remove="rounded-0"/>
        </xpath>
        <xpath expr="//button[@name='hierarchy_search_subsidiaries']" position="inside">
            <t t-out="props.node.childResIds.length"/> people
        </xpath>
        <xpath expr="//button[@name='hierarchy_search_subsidiaries']/t[@t-if]" position="replace">
            <t t-if="!props.node.nodes.length">
                <i class="fa fa-fw fa-caret-right"/>
            </t>
        </xpath>
        <xpath expr="//button[@name='hierarchy_search_subsidiaries']/t[@t-else]" position="replace">
            <t t-else="">
                <i class="fa fa-fw fa-caret-down"/>
            </t>
        </xpath>
    </t>

`);
registerTemplate("hr_org_chart.HierarchyView", `/hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_controller.xml`, `<t t-name="hr_org_chart.HierarchyView" t-inherit="web_hierarchy.HierarchyView" t-inherit-mode="primary" xml:space="preserve">
        <t t-call="web.ActionHelper" position="replace">
            <t t-if="props.info.noContentHelp">
                <HrActionHelper noContentTitle.translate="No Data" noContentParagraph.translate="In the Organigram you will have a clear overview of the hierarchy of employees."/>
            </t>
        </t>
    </t>
`);
registerTemplate("hr_org_chart.HrEmployeeHierarchyRenderer", `/hr_org_chart/static/src/views/hr_employee_hierarchy/hr_employee_hierarchy_renderer.xml`, `<t t-name="hr_org_chart.HrEmployeeHierarchyRenderer" t-inherit="web_hierarchy.HierarchyRenderer" xml:space="preserve">
        <xpath expr="//div[hasclass('o_hierarchy_parent_node_container')]/span" position="replace">
            <Avatar resModel="row.parentNode.model.resModel" resId="row.parentNode.resId" displayName="row.parentNode.data.display_name || row.parentNode.data.name"/>
        </xpath>
    </t>

`);
registerTemplate("web_map.MapView", `/web_map/static/src/map_view/map_controller.xml`, `<t t-name="web_map.MapView" xml:space="preserve">
        <div t-att-class="props.className">
            <Layout className="model.useSampleModel ? 'o_view_sample_data' : ''" display="props.display">
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-buttons">
                    <t t-call="{{ props.buttonTemplate }}"/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar t-if="searchBarToggler.state.showSearchBar"/>
                </t>
                <t t-set-slot="control-panel-navigation-additional">
                    <t t-component="searchBarToggler.component" t-props="searchBarToggler.props"/>
                </t>
                <t t-component="props.Renderer" t-props="rendererProps"/>
            </Layout>
        </div>
    </t>

    `);
registerTemplate("web_map.MapView.Buttons", `/web_map/static/src/map_view/map_controller.xml`, `<t t-name="web_map.MapView.Buttons" xml:space="preserve">

    </t>

`);
registerTemplate("web_map.MapRenderer", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer" xml:space="preserve">
        <t t-if="env.isSmall">
            <div class="row g-0 o-sm-pin-list-container" t-att-class="{ 'h-100': expendedPinList }">
                <t t-call="web_map.MapRenderer.PinListContainer"/>
            </div>
        </t>
        <div class="o-map-renderer row g-0" t-att-class="{ 'd-none': expendedPinList }">
            <t t-if="!env.isSmall">
                <t t-call="web_map.MapRenderer.PinListContainer"/>
            </t>
            <div class="h-100 col col-md-10">
                <t t-if="props.model.data.routingError">
                    <t t-call="web_map.MapRenderer.RountingUnavailable"/>
                </t>
                <t t-elif="props.model.data.fetchingCoordinates">
                    <t t-call="web_map.MapRenderer.FetchingCoordinates"/>
                </t>
                <t t-elif="props.model.metaData.routing and !props.model.data.useMapBoxAPI">
                    <t t-call="web_map.MapRenderer.NoMapToken"/>
                </t>
                <div class="o-map-renderer--container h-100" t-ref="mapContainer"/>
            </div>
        </div>
    </t>

    `);
registerTemplate("web_map.MapRenderer.FetchingCoordinates", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.FetchingCoordinates" xml:space="preserve">
        <div class="alert alert-info col col-md-10 px-5 mb-0 text-center position-absolute o-map-renderer--alert" role="status">
            <i class="fa fa-spin fa-circle-o-notch"/> Locating new addresses...
        </div>
    </t>

    `);
registerTemplate("web_map.MapRenderer.NoMapToken", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.NoMapToken" xml:space="preserve">

        <div class="alert alert-info alert-dismissible col col-md-10 px-5 mb-0 text-center position-absolute o-map-renderer--alert" role="status">
            To get routing on your map, you first need to set up your MapBox token. It's free.
            <a href="/odoo/action-base_setup.action_general_configuration" class="ml8">
                <i class="oi oi-arrow-right"/>
                Set up token
            </a>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"/>
        </div>
    </t>

    `);
registerTemplate("web_map.MapRenderer.PinListContainer", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.PinListContainer" xml:space="preserve">
        <div class="o-map-renderer--pin-list-container col-12 col-md-2 bg-view border-start cursor-default h-100">
            <div class="o-map-view--buttons">
                <a class="btn btn-primary" t-att-href="googleMapUrl" target="_blank" data-hotkey="m">View in Google Maps</a>
            </div>
            <t t-if="!props.model.metaData.hideTitle">
                <header class="o-map-renderer--pin-list-header o_pin_list_header text-uppercase px-0 py-md-2 d-flex align-items-baseline" t-on-click="togglePinList">
                    <i class="fa fa-list me-2 text-primary"/>
                    <span class="fs-6 fw-bold text-truncate" t-out="props.model.metaData.panelTitle"/>
                    <i t-if="env.isSmall" class="fa float-end ms-auto" t-att-class="{                         'fa-caret-down': expendedPinList,                         'fa-caret-left': !expendedPinList                     }"/>
                </header>
            </t>
            <t t-if="canDisplayPinList and props.model.data.isGrouped">
                <t t-foreach="props.model.data.recordGroups" t-as="groupId" t-key="groupId">
                    <div class="o-map-renderer--pin-list-group mb-1">
                        <t t-set="group" t-value="props.model.data.recordGroups[groupId]"/>
                        <div class="o-map-renderer--pin-list-group-header d-flex align-items-baseline" t-on-click="() =&gt; this.toggleGroup(groupId)">
                            <i t-attf-class="fa fa-caret-{{ state.closedGroupIds.includes(groupId) ? 'right' : 'down' }}"/>
                            <span class="ms-1" t-att-style="'color:' + getGroupColor(groupId)">
                                <t t-call="web_map.pinSVG">
                                    <t t-set="numbering" t-value="props.model.metaData.numbering"/>
                                </t>
                            </span>
                            <t t-if="group.name" t-esc="group.name"/>
                            <t t-else="">Undefined</t>
                        </div>
                        <t t-if="!state.closedGroupIds.includes(groupId)">
                            <t t-call="web_map.MapRenderer.PinList">
                                <t t-set="records" t-value="group.records"/>
                            </t>
                        </t>
                    </div>
                </t>
            </t>
            <t t-elif="canDisplayPinList">
                <t t-call="web_map.MapRenderer.PinList">
                    <t t-set="records" t-value="props.model.data.records"/>
                </t>
            </t>
        </div>
    </t>

    `);
registerTemplate("web_map.MapRenderer.PinList", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.PinList" xml:space="preserve">
        <t t-tag="props.model.metaData.numbering ? 'ol' : 'ul'" t-att-class="{'o-map-renderer--pin-located': !props.model.metaData.numbering}" class="o-map-renderer--pin-list-details ps-0 pb-0 o-map-renderer--handle" t-ref="pinList">
            <t t-call="web_map.MapRenderer.PinListItems"/>
        </t>
    </t>

    `);
registerTemplate("web_map.MapRenderer.PinListItems", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.PinListItems" xml:space="preserve">
        <t t-foreach="records" t-as="record" t-key="record.id">
            <t t-set="latitude" t-value="record.partner and record.partner.partner_latitude"/>
            <t t-set="longitude" t-value="record.partner and record.partner.partner_longitude"/>
            <li t-att-data-id="record.id" t-if="latitude and longitude" t-on-click.prevent="() =&gt; this.centerAndOpenPin(record)" class="cursor-pointer d-flex align-items-center justify-content-between o-map-renderer--pin-located py-1">
                <span class="text-truncate"> <t t-if="props.model.metaData.numbering" t-esc="record_index + 1 + '.'"/> <t t-esc="record.display_name"/> </span>
                <span class="o_row_handle oi oi-draggable" t-if="this.props.model.canResequence" t-on-click.stop=""/>
            </li>
        </t>
    </t>

    `);
registerTemplate("web_map.MapRenderer.RountingUnavailable", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.MapRenderer.RountingUnavailable" xml:space="preserve">
        <div class="alert alert-warning alert-dismissible col col-md-10 px-5 mb-0 text-center position-absolute o-map-renderer--alert" role="status">
            <strong>Unsuccessful routing request: </strong>
            <t t-esc="props.model.data.routingError"/>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"/>
        </div>
    </t>

    `);
registerTemplate("web_map.marker", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.marker" xml:space="preserve">
        <div t-att-style="color and ('color:' + color)">
            <t t-call="web_map.pinSVG"/>
            <t t-if="numbering" t-call="web_map.markerNumber"/>
            <t t-elif="isMulti" t-call="web_map.markerBadge"/>
        </div>
    </t>

    `);
registerTemplate("web_map.markerBadge", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.markerBadge" xml:space="preserve">
        <span class="badge text-bg-danger rounded-pill o-map-renderer--marker-badge" t-att-style="color and \`background-color: \${color} !important\`">
            <t t-esc="count"/>
        </span>
    </t>

    `);
registerTemplate("web_map.markerNumber", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.markerNumber" xml:space="preserve">
        <p class="o-map-renderer--marker-number position-relative text-center">
            <t t-esc="number"/>
            <t t-if="count gt 1">
                <t t-call="web_map.markerBadge"/>
            </t>
        </p>
    </t>

    `);
registerTemplate("web_map.markerPopup", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.markerPopup" xml:space="preserve">
        <div>
            <table class="o-map-renderer--popup-table align-top">
                <thead>
                    <tr>
                        <th colspan="2"/>
                        <th/>
                        <th/>
                    </tr>
                </thead>
                <tbody>
                    <tr t-foreach="fields" t-as="field" t-key="field.id">
                        <td class="o-map-renderer--popup-table-content-name fw-bold text-nowrap align-baseline">
                            <t t-esc="field.string"/>
                        </td>
                        <td class="o-map-renderer--popup-table-space"/>
                        <td class="o-map-renderer--popup-table-content-value align-baseline">
                            <t t-esc="field.value"/>
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="o-map-renderer--popup-buttons d-flex align-item-end justify-content-start mt8">
                <t t-if="hasFormView">
                    <button class="btn btn-primary o-map-renderer--popup-buttons-open">
                        Open
                    </button>
                </t>
                <div class="o-map-renderer--popup-buttons-divider d-inline-block h-auto"/>
                <a class="btn btn-primary" role="button" t-att-href="url" target="_blank">
                    Navigate to
                </a>
            </div>
        </div>
    </t>

    `);
registerTemplate("web_map.pinSVG", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.pinSVG" xml:space="preserve">
        <t t-if="numbering">
            <t t-call="web_map.pinNoCircleSVG"/>
        </t>
        <t t-else="">
            <t t-call="web_map.pinCircleSVG"/>
        </t>
    </t>

    `);
registerTemplate("web_map.pinCircleSVG", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.pinCircleSVG" xml:space="preserve">
        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 60 78.6" style="enable-background:new 0 0 60 78.6;" xml:space="preserve">
            <style type="text/css">
                .st0{opacity:0.3;enable-background:new;}
                .st1{fill:currentColor;stroke:#1A1919;stroke-width:3;stroke-miterlimit:10;}
            </style>
            <g>
                <g id="Layer_2_1_">
                    <g id="Layer_1-2">
                        <path class="st0" d="M32.5,4C17.3,4,5,16.3,5,31.5c0,18.2,23.4,44.6,24.4,45.7c1.5,1.7,4.1,1.8,5.8,0.3c0.1-0.1,0.2-0.2,0.3-0.3                             c1-1.1,24.4-27.4,24.4-45.7C60,16.3,47.7,4,32.5,4z M32.5,42.4c-6.3,0-11.4-5.1-11.4-11.5s5.1-11.5,11.5-11.5S44,24.6,44,31v0                             C43.9,37.3,38.8,42.4,32.5,42.4z"/>
                        <path class="st1" d="M28.8,1.8c-14.9,0-27,12.1-27.1,27.1c0,18.5,24.2,45.7,25.3,46.9c0.9,1,2.4,1.1,3.4,0.2                             c0.1-0.1,0.1-0.1,0.2-0.2c1-1.1,25.3-28.3,25.3-46.9C55.9,13.9,43.7,1.8,28.8,1.8z M28.8,40.3c-6.3,0-11.5-5.1-11.5-11.4                             s5.1-11.5,11.4-11.5s11.5,5.1,11.5,11.4v0C40.2,35.2,35.1,40.3,28.8,40.3z"/>
                    </g>
                </g>
            </g>
        </svg>
    </t>

    `);
registerTemplate("web_map.pinNoCircleSVG", `/web_map/static/src/map_view/map_renderer.xml`, `<t t-name="web_map.pinNoCircleSVG" xml:space="preserve">
        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 61 78.9" style="enable-background:new 0 0 61 78.9;" xml:space="preserve">
            <style type="text/css">
                .st0{opacity:0.3;enable-background:new;}
                .st1{fill:currentColor;stroke:#1A1919;stroke-width:3;stroke-miterlimit:10;}
            </style>
            <g>
                <g id="Layer_2_1_">
                    <g id="Layer_1-2">
                        <path class="st0" d="M33.5,4C18.3,4,6,16.3,6,31.5c0,18.2,23.4,44.6,24.4,45.7c1.5,1.7,4.1,1.8,5.8,0.3c0.1-0.1,0.2-0.2,0.3-0.3                             c1-1.1,24.4-27.4,24.4-45.7C61,16.3,48.7,4,33.5,4z"/>
                        <path class="st1" d="M28.7,1.7c-14.9,0-27,12.1-27.1,27.1c0,18.5,24.2,45.7,25.3,46.9c0.9,1,2.4,1.1,3.4,0.2                             c0.1-0.1,0.1-0.1,0.2-0.2c1-1.1,25.3-28.3,25.3-46.9C55.8,13.8,43.6,1.7,28.7,1.7z"/>
                    </g>
                </g>
            </g>
        </svg>
    </t>

`);
registerTemplate("project_enterprise.ProjectTaskMapRenderer", `/project_enterprise/static/src/views/project_task_map/project_task_map_renderer.xml`, `<t t-name="project_enterprise.ProjectTaskMapRenderer" t-inherit="web_map.MapRenderer" t-inherit-mode="primary" xml:space="preserve">
        <xpath expr="//t[@t-if='env.isSmall']//t[@t-call='web_map.MapRenderer.PinListContainer']" position="attributes">
            <attribute name="t-call">project_enterprise.ProjectTaskMapRenderer.PinListContainer</attribute>
        </xpath>
        <xpath expr="//t[@t-if='!env.isSmall']//t[@t-call='web_map.MapRenderer.PinListContainer']" position="attributes">
            <attribute name="t-call">project_enterprise.ProjectTaskMapRenderer.PinListContainer</attribute>
        </xpath>
    </t>
    `);
registerTemplate("project_enterprise.ProjectTaskMapRenderer.PinListContainer", `/project_enterprise/static/src/views/project_task_map/project_task_map_renderer.xml`, `<t t-name="project_enterprise.ProjectTaskMapRenderer.PinListContainer" t-inherit="web_map.MapRenderer.PinListContainer" t-inherit-mode="primary" xml:space="preserve">
        <xpath expr="//t[@t-elif='canDisplayPinList']/t[@t-call='web_map.MapRenderer.PinList']" position="attributes">
            <attribute name="t-call">project_enterprise.ProjectTaskMapRenderer.PinList</attribute>
        </xpath>
        <xpath expr="//t[@t-if='canDisplayPinList and props.model.data.isGrouped']//t[@t-call='web_map.MapRenderer.PinList']" position="attributes">
            <attribute name="t-call">project_enterprise.ProjectTaskMapRenderer.PinList</attribute>
        </xpath>
    </t>
    `);
registerTemplate("project_enterprise.ProjectTaskMapRenderer.PinList", `/project_enterprise/static/src/views/project_task_map/project_task_map_renderer.xml`, `<t t-name="project_enterprise.ProjectTaskMapRenderer.PinList" t-inherit="web_map.MapRenderer.PinList" t-inherit-mode="primary" xml:space="preserve">
        <xpath expr="//t[@t-call='web_map.MapRenderer.PinListItems']" position="attributes">
            <attribute name="t-call">project_enterprise.ProjectTaskMapRenderer.PinListItems</attribute>
        </xpath>
    </t>
    `);
registerTemplate("project_enterprise.ProjectTaskMapRenderer.PinListItems", `/project_enterprise/static/src/views/project_task_map/project_task_map_renderer.xml`, `<t t-name="project_enterprise.ProjectTaskMapRenderer.PinListItems" t-inherit="web_map.MapRenderer.PinListItems" t-inherit-mode="primary" xml:space="preserve">
        <xpath expr="//li[@t-if='latitude and longitude']" position="attributes">
            <attribute name="t-attf-class">#{record.planned_date_begin ? '' : 'text-muted'}</attribute>
        </xpath>
        <xpath expr="//t[@t-foreach='records']" position="before">
            <p t-if="!records.length" class="fst-italic text-muted">View customer locations for your tasks</p>
        </xpath>
    </t>
`);
registerTemplate("project_enterprise.MilestonesPopover", `/project_enterprise/static/src/views/task_gantt/milestones_popover.xml`, `<t t-name="project_enterprise.MilestonesPopover" xml:space="preserve">
        <div class="popover-body">
            <ul class="mb-0 list-unstyled">
                <li t-foreach="Object.values(props.projects)" t-as="project" t-key="project.id">
                    <t t-if="props.displayProjectName">
                        <div><u><t t-out="project.name"/></u></div>
                    </t>
                    <em t-if="project.isStartDate">Project start</em>
                    <em t-if="project.isDeadline">Project due</em>
                    <ul class="mb-0 list-unstyled">
                        <li t-foreach="project.milestones" t-as="milestone" t-key="milestone_index">
                            <t t-if="milestone.is_deadline_exceeded">
                                <i t-attf-class="fa fa-square-o fa-fw text-start o_unreached_milestones"/>
                            </t>
                            <t t-else="">
                                <i class="fa fa-fw text-start" t-attf-class="{{milestone.is_reached ? 'fa-check-square-o o_milestones_reached' : 'fa-square-o'}}"/>
                            </t>
                            <strong><t t-out="milestone.name"/></strong>
                            <span t-if="props.displayMilestoneDates"><br/><t t-out="getDeadline(milestone)"/></span>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </t>

`);
registerTemplate("project_enterprise.TaskGanttRenderer.RowHeader", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.RowHeader" t-inherit="web_gantt.GanttRenderer.RowHeader" xml:space="preserve">
        <xpath expr="//t[@t-esc='row.name']" position="replace">
            <Avatar t-if="hasAvatar(row)" t-props="getAvatarProps(row)"/>
            <t t-else="" t-esc="row.name"/>
        </xpath>
    </t>

    `);
registerTemplate("project_enterprise.TaskGanttRenderer.Header", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.Header" t-inherit="web_gantt.GanttRenderer.Header" xml:space="preserve">
        <xpath expr="//t[@t-foreach='columns']/div" position="inside">
            <t t-set="columnInfo" t-value="columnMilestones[column.id]"/>
            <t t-if="columnInfo.edge &amp;&amp; columnInfo.edge.hasStartDate">
                <div class="o_project_edge_startdate_circle" t-on-mouseenter="(ev) =&gt; this.onMilestoneMouseEnter(ev, columnInfo.edge.projects)" t-on-mouseleave="onMilestoneMouseLeave"/>
            </t>
            <t t-if="columnInfo.hasMilestone">
                <div class="o_project_milestone_diamond" t-att-class="{                          'o_unreached_milestones': columnInfo.hasDeadLineExceeded,                          'edge_slot': column_last,                          'o_project_deadline_milestone': columnInfo.hasDeadline,                          'o_project_startdate_milestone': !columnInfo.hasDeadline &amp;&amp; columnInfo.hasStartDate,                      }" t-on-mouseenter="(ev) =&gt; this.onMilestoneMouseEnter(ev, columnInfo.projects)" t-on-mouseleave="onMilestoneMouseLeave">
                    <i class="fa fa-check o_milestones_reached" t-att-class="{ 'edge_slot': column_last }" t-if="columnInfo.allReached"/>
                </div>
            </t>
            <t t-elif="columnInfo.hasDeadline || columnInfo.hasStartDate">
                <div t-att-class="{                          'o_project_deadline_circle': columnInfo.hasDeadline,                          'o_project_startdate_circle': !columnInfo.hasDeadline &amp;&amp; columnInfo.hasStartDate,                      }" t-on-mouseenter="(ev) =&gt; this.onMilestoneMouseEnter(ev, columnInfo.projects)" t-on-mouseleave="onMilestoneMouseLeave"/>
            </t>
        </xpath>
    </t>

    `);
registerTemplate("project_enterprise.TaskGanttRenderer.ColoredCellBorder", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.ColoredCellBorder" xml:space="preserve">
        <t t-set="columnInfo" t-value="columnMilestones[column.id]"/>
        <t t-if="columnInfo.edge &amp;&amp; columnInfo.edge.hasStartDate">
            <div class="o_edge_startdate_pin" t-att-style="coloredCellBorderStyle"/>
        </t>
        <t t-if="columnInfo.hasMilestone">
            <div class="o_project_milestone" t-att-style="coloredCellBorderStyle" t-att-class="{ 'o_unreached_milestones': columnInfo.hasDeadLineExceeded }"/>
        </t>
        <t t-elif="columnInfo.hasDeadline">
            <div class="o_project_milestone o_unreached_milestones" t-att-style="coloredCellBorderStyle"/>
        </t>
        <t t-elif="columnInfo.hasStartDate">
            <div class="o_project_milestone o_startdate_pin" t-att-style="coloredCellBorderStyle"/>
        </t>
    </t>

    `);
registerTemplate("project_enterprise.TaskGanttRenderer.RowContent", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.RowContent" t-inherit="web_gantt.GanttRenderer.RowContent" xml:space="preserve">
        <xpath expr="//div[hasclass('o_gantt_cell')]" position="after">
            <t t-call="project_enterprise.TaskGanttRenderer.ColoredCellBorder">
                <t t-set="coloredCellBorderStyle" t-value="getGridPosition({ column: column.grid.column, row: row.grid.row })"/>
            </t>
        </xpath>
    </t>

     `);
registerTemplate("project_enterprise.TaskGanttRenderer.TotalRow", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.TotalRow" t-inherit="web_gantt.GanttRenderer.TotalRow" xml:space="preserve">
        <xpath expr="//div[hasclass('o_gantt_cell')]" position="after">
            <t t-call="project_enterprise.TaskGanttRenderer.ColoredCellBorder">
                <t t-set="coloredCellBorderStyle" t-value="getGridPosition({ column: column.grid.column })"/>
            </t>
        </xpath>
    </t>

    `);
registerTemplate("project_enterprise.TaskGanttRenderer.Pill", `/project_enterprise/static/src/views/task_gantt/task_gantt_renderer.xml`, `<t t-name="project_enterprise.TaskGanttRenderer.Pill" t-inherit="web_gantt.GanttRenderer.Pill" xml:space="preserve">
        <xpath expr="//div[hasclass('o_gantt_lock')]" position="before">
            <div t-if="!renderConnectors" class="o_gantt_forbidden fa fa-ban ms-auto me-2"/>
        </xpath>
    </t>

`);
registerTemplate("project_enterprise.ProjectGanttRenderer.RowHeader", `/project_enterprise/static/src/views/project_gantt/project_gantt_renderer.xml`, `<t t-name="project_enterprise.ProjectGanttRenderer.RowHeader" t-inherit="web_gantt.GanttRenderer.RowHeader" owl="1" xml:space="preserve">
        <xpath expr="//t[@t-esc='row.name']" position="replace">
            <Avatar t-if="hasAvatar(row)" t-props="getAvatarProps(row)"/>
            <t t-else="" t-esc="row.name"/>
        </xpath>
    </t>

`);
registerTemplateExtension("web.GraphView.Buttons", `/spreadsheet_edition/static/src/assets/graph_view/graph_view.xml`, `<t t-inherit="web.GraphView.Buttons" t-inherit-mode="extension" xml:space="preserve">
        <xpath expr="//div[hasclass('btn-group')][1]" position="after">
            <t t-if="canInsertChart and !env.isSmall">
                <div class="btn-group" role="toolbar" aria-label="Insert in Spreadsheet">
                    <button class="btn btn-secondary o_graph_insert_spreadsheet" t-att-disabled="!model.hasData() or model.useSampleModel" t-on-click="onInsertInSpreadsheet">
                        Insert in Spreadsheet
                    </button>
                </div>
            </t>
        </xpath>
    </t>
`);
registerTemplateExtension("web.PivotView.Buttons", `/spreadsheet_edition/static/src/bundle/pivot/pivot.xml`, `<t t-name="spreadsheet_edition.PivotView.buttons" t-inherit="web.PivotView.Buttons" t-inherit-mode="extension" xml:space="preserve">
        <xpath expr="//button[hasclass('o_pivot_flip_button')]" position="before">
            <div t-att-data-tooltip="getInsertButtonTooltip()" t-if="canInsertPivot and env.isSmall">
                <button class="btn btn-secondary fa fa-file-text-o o_pivot_add_spreadsheet h-100 rounded-end-0" t-att-disabled="isInsertButtonDisabled()" title="Insert in Spreadsheet" aria-label="Insert in Spreadsheet" t-on-click="onInsertInSpreadsheet"/>
            </div>
        </xpath>
        <xpath expr="//div[hasclass('btn-group')][1]" position="after">
            <t t-if="canInsertPivot and !env.isSmall">
                <div class="btn-group" role="toolbar" aria-label="Insert in Spreadsheet" t-att-data-tooltip="getInsertButtonTooltip()">
                    <button class="btn btn-secondary o_pivot_add_spreadsheet" t-att-disabled="isInsertButtonDisabled()" t-on-click="onInsertInSpreadsheet">
                        Insert in Spreadsheet
                    </button>
                </div>
            </t>
        </xpath>
    </t>
`);
registerTemplate("web_cohort.CohortView.Buttons", `/web_cohort/static/src/cohort_controller.xml`, `<t t-name="web_cohort.CohortView.Buttons" xml:space="preserve">
    </t>

    `);
registerTemplate("web_cohort.CohortView", `/web_cohort/static/src/cohort_controller.xml`, `<t t-name="web_cohort.CohortView" xml:space="preserve">
        <div t-att-class="props.className" t-ref="root">
            <Layout className="model.useSampleModel ? 'o_view_sample_data' : ''" display="props.display">
                <t t-set-slot="layout-buttons">
                    <t t-call="{{ props.buttonTemplate }}"/>
                </t>
                <t t-set-slot="control-panel-additional-actions">
                    <CogMenu/>
                </t>
                <t t-set-slot="layout-actions">
                    <SearchBar/>
                </t>
                <t t-set="displayNoContent" t-value="                     props.info.noContentHelp !== false and (                         !model.hasData() or model.useSampleModel                     )"/>
                <t t-if="displayNoContent">
                    <t t-if="props.info.noContentHelp" t-call="web.ActionHelper">
                        <t t-set="noContentHelp" t-value="props.info.noContentHelp"/>
                    </t>
                    <t t-else="" t-call="web.NoContentHelper"/>
                </t>
                <t t-component="props.Renderer" class="'o_renderer'" model="model" onRowClicked="(row) =&gt; this.onRowClicked(row)"/>
            </Layout>
        </div>
    </t>

`);
registerTemplate("web_cohort.CohortRenderer", `/web_cohort/static/src/cohort_renderer.xml`, `<t t-name="web_cohort.CohortRenderer" xml:space="preserve">
        <div class="o_cohort_renderer" t-att-class="props.class">
            <div class="d-flex gap-1 px-3 py-2">
                <div class="btn-group" role="toolbar" aria-label="Main actions">
                    <ReportViewMeasures measures="model.metaData.measures" activeMeasures="[model.metaData.measure]" onMeasureSelected.bind="this.onMeasureSelected"/>
                </div>
                    <div class="btn-group">
                    <ViewScaleSelector scales="scales" currentScale="model.metaData.interval" setScale.bind="setScale"/>
                </div>
                    <div class="btn-group">
                    <button class="btn btn-secondary fa fa-download o_cohort_download_button" title="Download as Excel file" t-on-click="downloadExcel"/>
                </div>
            </div>
            <t t-foreach="model.data" t-as="data" t-key="data_index">
                <div t-if="data.title" class="table-responsive">
                    <table class="table text-center mb-0">
                        <thead>
                            <tr>
                                <th colspan="16" class="text-center align-middle">
                                    <t t-esc="data.title"/>
                                </th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <div t-if="data.rows.length" class="table-responsive">
                    <table class="o_data_table table table-bordered text-center mb-0">
                        <thead>
                            <tr>
                                <th rowspan="2" class="text-center align-middle">
                                    <t t-esc="model.metaData.dateStartString"/>
                                </th>
                                <th rowspan="2" class="text-center align-middle">
                                    <t t-esc="model.metaData.measures[model.metaData.measure].string"/>
                                </th>
                                <th colspan="16" class="text-center align-middle">
                                    <t t-esc="model.metaData.dateStopString"/> - By <t t-esc="model.intervals[model.metaData.interval]"/>
                                </th>
                            </tr>
                            <tr>
                                <th t-foreach="range(data.rows[0].columns.length)" t-as="intervalNumber" t-key="intervalNumber" class="text-center align-middle">
                                    <t t-if="model.metaData.timeline === 'backward'">
                                        <t t-esc="intervalNumber - (data.rows[0].columns.length - 1)"/>
                                    </t>
                                    <t t-else="">
                                        +<t t-esc="intervalNumber"/>
                                    </t>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr t-foreach="data.rows" t-as="row" t-key="row.date" class="o_cohort_row_clickable" t-on-click.stop="() =&gt; props.onRowClicked(row)">
                                <td class="o_cohort_value text-center align-middle p-0">
                                    <t t-esc="row.date"/>
                                </td>
                                <td class="o_cohort_value text-center align-middle p-0">
                                    <t t-esc="getFormattedValue(row.value)"/>
                                </td>
                                <td t-foreach="row.columns" t-as="col" t-key="col.period" class="text-center align-middle p-0">
                                    <t t-set="count" t-value="mode === 'churn' ? (col.churn_value === '-' ? '' : col.churn_value) : (col.value === '-' ? '' : col.value)"/>
                                    <t t-set="measure" t-value="model.metaData.measures[model.metaData.measure].string"/>
                                    <div class="o_cohort_highlight m-1 rounded p-1" t-att-title="getCellTitle(col.period, measure, count)" t-attf-style="background-color: rgba(0, 160, 157, {{col.percentage/100.0}}); color: {{col.percentage gt 50 and '#FFFFFF' or 'inherit'}}" t-att-class="{o_cohort_value: col.value !== '-'}">
                                        <t t-esc="formatPercentage(col.percentage / 100.0)"/>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                        <tfoot class="fw-bold">
                            <tr>
                                <td class="text-center align-middle">Average</td>
                                <td class="text-center align-middle">
                                    <t t-esc="getFormattedValue(data.avg.avg_value)"/>
                                </td>
                                <td t-foreach="data.avg.columns_avg" t-as="col" t-key="col_index" class="text-center align-middle">
                                    <t t-if="data.avg.columns_avg[col]['count']">
                                        <t t-esc="formatPercentage(data.avg.columns_avg[col]['percentage'] / (data.avg.columns_avg[col]['count'] * 100.0))"/>
                                    </t>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div t-if="model.data.length &gt; 1 &amp;&amp; !data.rows.length" class="o_cohort_no_data text-center p-3 border">
                    No data available.
                </div>
                <br/>
            </t>
        </div>
    </t>

`);
checkPrimaryTemplateParents(["mail.Avatar"]);
                    });
